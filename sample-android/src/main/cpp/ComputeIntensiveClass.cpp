/**
 * File generated by Jenny -- https://github.com/LanderlYoung/Jenny
 *
 * For bug report, please refer to github issue tracker https://github.com/LanderlYoung/Jenny/issues,
 * or contact author landerlyoung@gmail.com.
 */
#include <CallbackProxy.h>
#include <NestedClassProxy.h>
#include "ComputeIntensiveClass.h"
#include "gen/java_InputStreamProxy.h"
#include "gen/java_StringProxy.h"
#include "gen/java_URLConnectionProxy.h"
#include "gen/java_URLProxy.h"

/*
 * Class:     io_github_landerlyoung_jennysampleapp_ComputeIntensiveClass
 * Method:    public int addInNative(int a, int b)
 * Signature: (II)I
 */
jint ComputeIntensiveClass::addInNative(JNIEnv *env, jobject thiz, jint a, jint b) {
    jint c = a + b;
    return c;
}

/*
 * Class:     io_github_landerlyoung_jennysampleapp_ComputeIntensiveClass
 * Method:    public static void computeSomething(byte[] sth)
 * Signature: ([B)V
 */
void ComputeIntensiveClass::computeSomething(JNIEnv *env, jclass clazz, jbyteArray sth) {
    return;
}

/*
 * Class:     io_github_landerlyoung_jennysampleapp_ComputeIntensiveClass
 * Method:    public static java.lang.String greet()
 * Signature: ()Ljava/lang/String;
 */
jstring ComputeIntensiveClass::greet(JNIEnv *env, jclass clazz) {
    return env->NewStringUTF("Hello From Jenny");
}

/*
 * Class:     io_github_landerlyoung_jennysampleapp_ComputeIntensiveClass
 * Method:    public final void testParamParse(int a, java.lang.String b, long[] c, float[][] d, java.lang.Exception e, java.lang.Class<java.lang.String> f, java.util.HashMap<?,?> g)
 * Signature: (ILjava/lang/String;[J[[FLjava/lang/Exception;Ljava/lang/Class;Ljava/util/HashMap;)V
 */
void ComputeIntensiveClass::testParamParse(JNIEnv *env, jobject thiz, jint a, jstring b, jlongArray c, jobjectArray d, jthrowable e, jclass f, jobject g) {
    return;
}

/*
 * Class:     io_github_landerlyoung_jennysampleapp_ComputeIntensiveClass
 * Method:    public static long returnsLong()
 * Signature: ()J
 */
jlong ComputeIntensiveClass::returnsLong(JNIEnv *env, jclass clazz) {
    return 0;
}

/*
 * Class:     io_github_landerlyoung_jennysampleapp_ComputeIntensiveClass
 * Method:    public static boolean returnsBool()
 * Signature: ()Z
 */
jboolean ComputeIntensiveClass::returnsBool(JNIEnv *env, jclass clazz) {
    return JNI_FALSE;
}

/*
 * Class:     io_github_landerlyoung_jennysampleapp_ComputeIntensiveClass
 * Method:    public static java.lang.Object returnsObject()
 * Signature: ()Ljava/lang/Object;
 */
jobject ComputeIntensiveClass::returnsObject(JNIEnv *env, jclass clazz) {
    return nullptr;
}

/*
 * Class:     io_github_landerlyoung_jennysampleapp_ComputeIntensiveClass
 * Method:    public static java.lang.String httpGet(java.lang.String url)
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
jstring JNICALL ComputeIntensiveClass::httpGet(JNIEnv *env, jclass clazz, jstring _url) {
    using namespace java;
    auto url = URLProxy::newInstance(env, _url);
    URLConnectionProxy urlConn(env, url.openConnection());
    InputStreamProxy input(env, urlConn.getInputStream());

    jbyteArray buffer = env->NewByteArray(1024);
    jint len = input.read(buffer);
    input.close();

    jstring ret =  (jstring) (*StringProxy::newInstance(env, buffer, 0, len));

    url.deleteLocalRef();
    urlConn.deleteLocalRef();
    input.deleteLocalRef();
    env->DeleteLocalRef(buffer);
    return ret;
}

/*
 * Class:     io_github_landerlyoung_jennysampleapp_ComputeIntensiveClass
 * Method:    public int computeThenCallback(io.github.landerlyoung.jennysampleapp.Callback listener)
 * Signature: (Lio/github/landerlyoung/jennysampleapp/Callback;)I
 */
jint ComputeIntensiveClass::computeThenCallback(JNIEnv *env, jobject thiz, jobject listener) {
    CallbackProxy callback(env, listener);
    callback.onJobStart();
    callback.getName();

    jstring name = (CallbackProxy(env, listener)).getName();

    auto newInstance = CallbackProxy::newInstance(env);
    callback.setLock(*newInstance);
    callback.onJobProgress(20);

    auto nestedClass = NestedClassProxy::newInstance(env, listener);
    callback.setLock(*nestedClass);
    callback.onJobProgress(50);

    callback.setAStaticField(env, nullptr);

    callback.setCount(100);
    callback.setLock(listener);
    callback.onJobProgress(100);

    jstring str = env->NewStringUTF("Yes, callback from jni");
    callback.onJobDone(JNI_TRUE, str);

    env->DeleteLocalRef(name);
    env->DeleteLocalRef(str);

    newInstance.deleteLocalRef();
    nestedClass.deleteLocalRef();
    callback.deleteLocalRef();
    return 0;
}




