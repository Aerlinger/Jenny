/**
 * File generated by Jenny -- https://github.com/LanderlYoung/Jenny
 *
 * DO NOT EDIT THIS FILE.
 *
 * For bug report, please refer to github issue tracker https://github.com/LanderlYoung/Jenny/issues,
 * or contact author landerlyoung@gmail.com.
 */

/* C++ header file for class io/github/landerlyoung/jennysampleapp/NativeDrawable */
#pragma once

#include <jni.h>


namespace NativeDrawable {

// DO NOT modify
static constexpr auto FULL_CLASS_NAME = "io/github/landerlyoung/jennysampleapp/NativeDrawable";

static constexpr jlong nativeHandle = 0;

/*
 * Class:     io_github_landerlyoung_jennysampleapp_NativeDrawable
 * Method:    private final long nativeInit()
 * Signature: ()J
 */
jlong JNICALL nativeInit(JNIEnv *env, jobject thiz);

/*
 * Class:     io_github_landerlyoung_jennysampleapp_NativeDrawable
 * Method:    public final void onClick()
 * Signature: ()V
 */
void JNICALL onClick(JNIEnv *env, jobject thiz);

/*
 * Class:     io_github_landerlyoung_jennysampleapp_NativeDrawable
 * Method:    public void draw(android.graphics.Canvas canvas)
 * Signature: (Landroid/graphics/Canvas;)V
 */
void JNICALL draw(JNIEnv *env, jobject thiz, jobject canvas);

/*
 * Class:     io_github_landerlyoung_jennysampleapp_NativeDrawable
 * Method:    public final void release()
 * Signature: ()V
 */
void JNICALL release(JNIEnv *env, jobject thiz);

/**
* register Native functions
* @returns success or not
*/
inline bool registerNativeFunctions(JNIEnv *env) {
   const JNINativeMethod gsNativeMethods[] = {
       {
           /* method name      */ const_cast<char *>("nativeInit"),
           /* method signature */ const_cast<char *>("()J"),
           /* function pointer */ reinterpret_cast<void *>(nativeInit)
       },
       {
           /* method name      */ const_cast<char *>("onClick"),
           /* method signature */ const_cast<char *>("()V"),
           /* function pointer */ reinterpret_cast<void *>(onClick)
       },
       {
           /* method name      */ const_cast<char *>("draw"),
           /* method signature */ const_cast<char *>("(Landroid/graphics/Canvas;)V"),
           /* function pointer */ reinterpret_cast<void *>(draw)
       },
       {
           /* method name      */ const_cast<char *>("release"),
           /* method signature */ const_cast<char *>("()V"),
           /* function pointer */ reinterpret_cast<void *>(release)
       }
   };
   const int gsMethodCount =
       sizeof(gsNativeMethods) / sizeof(JNINativeMethod);

   bool success = false;
   jclass clazz = env->FindClass(FULL_CLASS_NAME);
   if (clazz != nullptr) {
       success = 0 == env->RegisterNatives(clazz, gsNativeMethods, gsMethodCount);
       env->DeleteLocalRef(clazz);
   }
   return success;
}

} // endof namespace NativeDrawable


