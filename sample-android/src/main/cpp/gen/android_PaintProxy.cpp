/**
 * File generated by Jenny -- https://github.com/LanderlYoung/Jenny
 *
 * DO NOT EDIT THIS FILE.
 *
 * For bug report, please refer to github issue tracker https://github.com/LanderlYoung/Jenny/issues,
 * or contact author landerlyoung@gmail.com.
 */
#include "android_PaintProxy.h"


// external logger function passed by jenny.errorLoggerFunction
void jennySampleErrorLog(const char* error);


namespace android {

jclass PaintProxy::sClazz = nullptr;

// thread safe init
std::mutex PaintProxy::sInitLock;
std::atomic_bool PaintProxy::sInited;

/*static*/ bool PaintProxy::initClazz(JNIEnv *env) {
#define JENNY_CHECK_NULL(val)                      \
       do {                                        \
           if ((val) == nullptr) {                 \
                jennySampleErrorLog("can't init PaintProxy::" #val); \
               env->ExceptionDescribe();           \
               return false;                       \
           }                                       \
       } while(false)

    if (!sInited) {
        std::lock_guard<std::mutex> lg(sInitLock);
        if (!sInited) {
            auto clazz = env->FindClass(FULL_CLASS_NAME);
            JENNY_CHECK_NULL(clazz);
            sClazz = reinterpret_cast<jclass>(env->NewGlobalRef(clazz));
            env->DeleteLocalRef(clazz);
            JENNY_CHECK_NULL(sClazz);

            sConstruct_0 = env->GetMethodID(sClazz, "<init>", "()V");
            JENNY_CHECK_NULL(sConstruct_0);

            sConstruct_1 = env->GetMethodID(sClazz, "<init>", "(I)V");
            JENNY_CHECK_NULL(sConstruct_1);

            sConstruct_2 = env->GetMethodID(sClazz, "<init>", "(Landroid/graphics/Paint;)V");
            JENNY_CHECK_NULL(sConstruct_2);


            sMethod_reset_0 = env->GetMethodID(sClazz, "reset", "()V");
            JENNY_CHECK_NULL(sMethod_reset_0);

            sMethod_set_0 = env->GetMethodID(sClazz, "set", "(Landroid/graphics/Paint;)V");
            JENNY_CHECK_NULL(sMethod_set_0);

            sMethod_getFlags_0 = env->GetMethodID(sClazz, "getFlags", "()I");
            JENNY_CHECK_NULL(sMethod_getFlags_0);

            sMethod_setFlags_0 = env->GetMethodID(sClazz, "setFlags", "(I)V");
            JENNY_CHECK_NULL(sMethod_setFlags_0);

            sMethod_getHinting_0 = env->GetMethodID(sClazz, "getHinting", "()I");
            JENNY_CHECK_NULL(sMethod_getHinting_0);

            sMethod_setHinting_0 = env->GetMethodID(sClazz, "setHinting", "(I)V");
            JENNY_CHECK_NULL(sMethod_setHinting_0);

            sMethod_isAntiAlias_0 = env->GetMethodID(sClazz, "isAntiAlias", "()Z");
            JENNY_CHECK_NULL(sMethod_isAntiAlias_0);

            sMethod_setAntiAlias_0 = env->GetMethodID(sClazz, "setAntiAlias", "(Z)V");
            JENNY_CHECK_NULL(sMethod_setAntiAlias_0);

            sMethod_isDither_0 = env->GetMethodID(sClazz, "isDither", "()Z");
            JENNY_CHECK_NULL(sMethod_isDither_0);

            sMethod_setDither_0 = env->GetMethodID(sClazz, "setDither", "(Z)V");
            JENNY_CHECK_NULL(sMethod_setDither_0);

            sMethod_isLinearText_0 = env->GetMethodID(sClazz, "isLinearText", "()Z");
            JENNY_CHECK_NULL(sMethod_isLinearText_0);

            sMethod_setLinearText_0 = env->GetMethodID(sClazz, "setLinearText", "(Z)V");
            JENNY_CHECK_NULL(sMethod_setLinearText_0);

            sMethod_isSubpixelText_0 = env->GetMethodID(sClazz, "isSubpixelText", "()Z");
            JENNY_CHECK_NULL(sMethod_isSubpixelText_0);

            sMethod_setSubpixelText_0 = env->GetMethodID(sClazz, "setSubpixelText", "(Z)V");
            JENNY_CHECK_NULL(sMethod_setSubpixelText_0);

            sMethod_isUnderlineText_0 = env->GetMethodID(sClazz, "isUnderlineText", "()Z");
            JENNY_CHECK_NULL(sMethod_isUnderlineText_0);

            sMethod_setUnderlineText_0 = env->GetMethodID(sClazz, "setUnderlineText", "(Z)V");
            JENNY_CHECK_NULL(sMethod_setUnderlineText_0);

            sMethod_isStrikeThruText_0 = env->GetMethodID(sClazz, "isStrikeThruText", "()Z");
            JENNY_CHECK_NULL(sMethod_isStrikeThruText_0);

            sMethod_setStrikeThruText_0 = env->GetMethodID(sClazz, "setStrikeThruText", "(Z)V");
            JENNY_CHECK_NULL(sMethod_setStrikeThruText_0);

            sMethod_isFakeBoldText_0 = env->GetMethodID(sClazz, "isFakeBoldText", "()Z");
            JENNY_CHECK_NULL(sMethod_isFakeBoldText_0);

            sMethod_setFakeBoldText_0 = env->GetMethodID(sClazz, "setFakeBoldText", "(Z)V");
            JENNY_CHECK_NULL(sMethod_setFakeBoldText_0);

            sMethod_isFilterBitmap_0 = env->GetMethodID(sClazz, "isFilterBitmap", "()Z");
            JENNY_CHECK_NULL(sMethod_isFilterBitmap_0);

            sMethod_setFilterBitmap_0 = env->GetMethodID(sClazz, "setFilterBitmap", "(Z)V");
            JENNY_CHECK_NULL(sMethod_setFilterBitmap_0);

            sMethod_getStyle_0 = env->GetMethodID(sClazz, "getStyle", "()Landroid/graphics/Paint$Style;");
            JENNY_CHECK_NULL(sMethod_getStyle_0);

            sMethod_setStyle_0 = env->GetMethodID(sClazz, "setStyle", "(Landroid/graphics/Paint$Style;)V");
            JENNY_CHECK_NULL(sMethod_setStyle_0);

            sMethod_getColor_0 = env->GetMethodID(sClazz, "getColor", "()I");
            JENNY_CHECK_NULL(sMethod_getColor_0);

            sMethod_setColor_0 = env->GetMethodID(sClazz, "setColor", "(I)V");
            JENNY_CHECK_NULL(sMethod_setColor_0);

            sMethod_getAlpha_0 = env->GetMethodID(sClazz, "getAlpha", "()I");
            JENNY_CHECK_NULL(sMethod_getAlpha_0);

            sMethod_setAlpha_0 = env->GetMethodID(sClazz, "setAlpha", "(I)V");
            JENNY_CHECK_NULL(sMethod_setAlpha_0);

            sMethod_setARGB_0 = env->GetMethodID(sClazz, "setARGB", "(IIII)V");
            JENNY_CHECK_NULL(sMethod_setARGB_0);

            sMethod_getStrokeWidth_0 = env->GetMethodID(sClazz, "getStrokeWidth", "()F");
            JENNY_CHECK_NULL(sMethod_getStrokeWidth_0);

            sMethod_setStrokeWidth_0 = env->GetMethodID(sClazz, "setStrokeWidth", "(F)V");
            JENNY_CHECK_NULL(sMethod_setStrokeWidth_0);

            sMethod_getStrokeMiter_0 = env->GetMethodID(sClazz, "getStrokeMiter", "()F");
            JENNY_CHECK_NULL(sMethod_getStrokeMiter_0);

            sMethod_setStrokeMiter_0 = env->GetMethodID(sClazz, "setStrokeMiter", "(F)V");
            JENNY_CHECK_NULL(sMethod_setStrokeMiter_0);

            sMethod_getStrokeCap_0 = env->GetMethodID(sClazz, "getStrokeCap", "()Landroid/graphics/Paint$Cap;");
            JENNY_CHECK_NULL(sMethod_getStrokeCap_0);

            sMethod_setStrokeCap_0 = env->GetMethodID(sClazz, "setStrokeCap", "(Landroid/graphics/Paint$Cap;)V");
            JENNY_CHECK_NULL(sMethod_setStrokeCap_0);

            sMethod_getStrokeJoin_0 = env->GetMethodID(sClazz, "getStrokeJoin", "()Landroid/graphics/Paint$Join;");
            JENNY_CHECK_NULL(sMethod_getStrokeJoin_0);

            sMethod_setStrokeJoin_0 = env->GetMethodID(sClazz, "setStrokeJoin", "(Landroid/graphics/Paint$Join;)V");
            JENNY_CHECK_NULL(sMethod_setStrokeJoin_0);

            sMethod_getFillPath_0 = env->GetMethodID(sClazz, "getFillPath", "(Landroid/graphics/Path;Landroid/graphics/Path;)Z");
            JENNY_CHECK_NULL(sMethod_getFillPath_0);

            sMethod_getShader_0 = env->GetMethodID(sClazz, "getShader", "()Landroid/graphics/Shader;");
            JENNY_CHECK_NULL(sMethod_getShader_0);

            sMethod_setShader_0 = env->GetMethodID(sClazz, "setShader", "(Landroid/graphics/Shader;)Landroid/graphics/Shader;");
            JENNY_CHECK_NULL(sMethod_setShader_0);

            sMethod_getColorFilter_0 = env->GetMethodID(sClazz, "getColorFilter", "()Landroid/graphics/ColorFilter;");
            JENNY_CHECK_NULL(sMethod_getColorFilter_0);

            sMethod_setColorFilter_0 = env->GetMethodID(sClazz, "setColorFilter", "(Landroid/graphics/ColorFilter;)Landroid/graphics/ColorFilter;");
            JENNY_CHECK_NULL(sMethod_setColorFilter_0);

            sMethod_getXfermode_0 = env->GetMethodID(sClazz, "getXfermode", "()Landroid/graphics/Xfermode;");
            JENNY_CHECK_NULL(sMethod_getXfermode_0);

            sMethod_setXfermode_0 = env->GetMethodID(sClazz, "setXfermode", "(Landroid/graphics/Xfermode;)Landroid/graphics/Xfermode;");
            JENNY_CHECK_NULL(sMethod_setXfermode_0);

            sMethod_getPathEffect_0 = env->GetMethodID(sClazz, "getPathEffect", "()Landroid/graphics/PathEffect;");
            JENNY_CHECK_NULL(sMethod_getPathEffect_0);

            sMethod_setPathEffect_0 = env->GetMethodID(sClazz, "setPathEffect", "(Landroid/graphics/PathEffect;)Landroid/graphics/PathEffect;");
            JENNY_CHECK_NULL(sMethod_setPathEffect_0);

            sMethod_getMaskFilter_0 = env->GetMethodID(sClazz, "getMaskFilter", "()Landroid/graphics/MaskFilter;");
            JENNY_CHECK_NULL(sMethod_getMaskFilter_0);

            sMethod_setMaskFilter_0 = env->GetMethodID(sClazz, "setMaskFilter", "(Landroid/graphics/MaskFilter;)Landroid/graphics/MaskFilter;");
            JENNY_CHECK_NULL(sMethod_setMaskFilter_0);

            sMethod_getTypeface_0 = env->GetMethodID(sClazz, "getTypeface", "()Landroid/graphics/Typeface;");
            JENNY_CHECK_NULL(sMethod_getTypeface_0);

            sMethod_setTypeface_0 = env->GetMethodID(sClazz, "setTypeface", "(Landroid/graphics/Typeface;)Landroid/graphics/Typeface;");
            JENNY_CHECK_NULL(sMethod_setTypeface_0);

            sMethod_setShadowLayer_0 = env->GetMethodID(sClazz, "setShadowLayer", "(FFFI)V");
            JENNY_CHECK_NULL(sMethod_setShadowLayer_0);

            sMethod_clearShadowLayer_0 = env->GetMethodID(sClazz, "clearShadowLayer", "()V");
            JENNY_CHECK_NULL(sMethod_clearShadowLayer_0);

            sMethod_getTextAlign_0 = env->GetMethodID(sClazz, "getTextAlign", "()Landroid/graphics/Paint$Align;");
            JENNY_CHECK_NULL(sMethod_getTextAlign_0);

            sMethod_setTextAlign_0 = env->GetMethodID(sClazz, "setTextAlign", "(Landroid/graphics/Paint$Align;)V");
            JENNY_CHECK_NULL(sMethod_setTextAlign_0);

            sMethod_getTextLocale_0 = env->GetMethodID(sClazz, "getTextLocale", "()Ljava/util/Locale;");
            JENNY_CHECK_NULL(sMethod_getTextLocale_0);

            sMethod_getTextLocales_0 = env->GetMethodID(sClazz, "getTextLocales", "()Landroid/os/LocaleList;");
            JENNY_CHECK_NULL(sMethod_getTextLocales_0);

            sMethod_setTextLocale_0 = env->GetMethodID(sClazz, "setTextLocale", "(Ljava/util/Locale;)V");
            JENNY_CHECK_NULL(sMethod_setTextLocale_0);

            sMethod_setTextLocales_0 = env->GetMethodID(sClazz, "setTextLocales", "(Landroid/os/LocaleList;)V");
            JENNY_CHECK_NULL(sMethod_setTextLocales_0);

            sMethod_isElegantTextHeight_0 = env->GetMethodID(sClazz, "isElegantTextHeight", "()Z");
            JENNY_CHECK_NULL(sMethod_isElegantTextHeight_0);

            sMethod_setElegantTextHeight_0 = env->GetMethodID(sClazz, "setElegantTextHeight", "(Z)V");
            JENNY_CHECK_NULL(sMethod_setElegantTextHeight_0);

            sMethod_getTextSize_0 = env->GetMethodID(sClazz, "getTextSize", "()F");
            JENNY_CHECK_NULL(sMethod_getTextSize_0);

            sMethod_setTextSize_0 = env->GetMethodID(sClazz, "setTextSize", "(F)V");
            JENNY_CHECK_NULL(sMethod_setTextSize_0);

            sMethod_getTextScaleX_0 = env->GetMethodID(sClazz, "getTextScaleX", "()F");
            JENNY_CHECK_NULL(sMethod_getTextScaleX_0);

            sMethod_setTextScaleX_0 = env->GetMethodID(sClazz, "setTextScaleX", "(F)V");
            JENNY_CHECK_NULL(sMethod_setTextScaleX_0);

            sMethod_getTextSkewX_0 = env->GetMethodID(sClazz, "getTextSkewX", "()F");
            JENNY_CHECK_NULL(sMethod_getTextSkewX_0);

            sMethod_setTextSkewX_0 = env->GetMethodID(sClazz, "setTextSkewX", "(F)V");
            JENNY_CHECK_NULL(sMethod_setTextSkewX_0);

            sMethod_getLetterSpacing_0 = env->GetMethodID(sClazz, "getLetterSpacing", "()F");
            JENNY_CHECK_NULL(sMethod_getLetterSpacing_0);

            sMethod_setLetterSpacing_0 = env->GetMethodID(sClazz, "setLetterSpacing", "(F)V");
            JENNY_CHECK_NULL(sMethod_setLetterSpacing_0);

            sMethod_getFontFeatureSettings_0 = env->GetMethodID(sClazz, "getFontFeatureSettings", "()Ljava/lang/String;");
            JENNY_CHECK_NULL(sMethod_getFontFeatureSettings_0);

            sMethod_setFontFeatureSettings_0 = env->GetMethodID(sClazz, "setFontFeatureSettings", "(Ljava/lang/String;)V");
            JENNY_CHECK_NULL(sMethod_setFontFeatureSettings_0);

            sMethod_getFontVariationSettings_0 = env->GetMethodID(sClazz, "getFontVariationSettings", "()Ljava/lang/String;");
            JENNY_CHECK_NULL(sMethod_getFontVariationSettings_0);

            sMethod_setFontVariationSettings_0 = env->GetMethodID(sClazz, "setFontVariationSettings", "(Ljava/lang/String;)Z");
            JENNY_CHECK_NULL(sMethod_setFontVariationSettings_0);

            sMethod_ascent_0 = env->GetMethodID(sClazz, "ascent", "()F");
            JENNY_CHECK_NULL(sMethod_ascent_0);

            sMethod_descent_0 = env->GetMethodID(sClazz, "descent", "()F");
            JENNY_CHECK_NULL(sMethod_descent_0);

            sMethod_getFontMetrics_0 = env->GetMethodID(sClazz, "getFontMetrics", "(Landroid/graphics/Paint$FontMetrics;)F");
            JENNY_CHECK_NULL(sMethod_getFontMetrics_0);

            sMethod_getFontMetrics_1 = env->GetMethodID(sClazz, "getFontMetrics", "()Landroid/graphics/Paint$FontMetrics;");
            JENNY_CHECK_NULL(sMethod_getFontMetrics_1);

            sMethod_getFontMetricsInt_0 = env->GetMethodID(sClazz, "getFontMetricsInt", "(Landroid/graphics/Paint$FontMetricsInt;)I");
            JENNY_CHECK_NULL(sMethod_getFontMetricsInt_0);

            sMethod_getFontMetricsInt_1 = env->GetMethodID(sClazz, "getFontMetricsInt", "()Landroid/graphics/Paint$FontMetricsInt;");
            JENNY_CHECK_NULL(sMethod_getFontMetricsInt_1);

            sMethod_getFontSpacing_0 = env->GetMethodID(sClazz, "getFontSpacing", "()F");
            JENNY_CHECK_NULL(sMethod_getFontSpacing_0);

            sMethod_measureText_0 = env->GetMethodID(sClazz, "measureText", "([CII)F");
            JENNY_CHECK_NULL(sMethod_measureText_0);

            sMethod_measureText_1 = env->GetMethodID(sClazz, "measureText", "(Ljava/lang/String;II)F");
            JENNY_CHECK_NULL(sMethod_measureText_1);

            sMethod_measureText_2 = env->GetMethodID(sClazz, "measureText", "(Ljava/lang/String;)F");
            JENNY_CHECK_NULL(sMethod_measureText_2);

            sMethod_measureText_3 = env->GetMethodID(sClazz, "measureText", "(Ljava/lang/CharSequence;II)F");
            JENNY_CHECK_NULL(sMethod_measureText_3);

            sMethod_breakText_0 = env->GetMethodID(sClazz, "breakText", "([CIIF[F)I");
            JENNY_CHECK_NULL(sMethod_breakText_0);

            sMethod_breakText_1 = env->GetMethodID(sClazz, "breakText", "(Ljava/lang/CharSequence;IIZF[F)I");
            JENNY_CHECK_NULL(sMethod_breakText_1);

            sMethod_breakText_2 = env->GetMethodID(sClazz, "breakText", "(Ljava/lang/String;ZF[F)I");
            JENNY_CHECK_NULL(sMethod_breakText_2);

            sMethod_getTextWidths_0 = env->GetMethodID(sClazz, "getTextWidths", "([CII[F)I");
            JENNY_CHECK_NULL(sMethod_getTextWidths_0);

            sMethod_getTextWidths_1 = env->GetMethodID(sClazz, "getTextWidths", "(Ljava/lang/CharSequence;II[F)I");
            JENNY_CHECK_NULL(sMethod_getTextWidths_1);

            sMethod_getTextWidths_2 = env->GetMethodID(sClazz, "getTextWidths", "(Ljava/lang/String;II[F)I");
            JENNY_CHECK_NULL(sMethod_getTextWidths_2);

            sMethod_getTextWidths_3 = env->GetMethodID(sClazz, "getTextWidths", "(Ljava/lang/String;[F)I");
            JENNY_CHECK_NULL(sMethod_getTextWidths_3);

            sMethod_getTextPath_0 = env->GetMethodID(sClazz, "getTextPath", "([CIIFFLandroid/graphics/Path;)V");
            JENNY_CHECK_NULL(sMethod_getTextPath_0);

            sMethod_getTextPath_1 = env->GetMethodID(sClazz, "getTextPath", "(Ljava/lang/String;IIFFLandroid/graphics/Path;)V");
            JENNY_CHECK_NULL(sMethod_getTextPath_1);

            sMethod_getTextBounds_0 = env->GetMethodID(sClazz, "getTextBounds", "(Ljava/lang/String;IILandroid/graphics/Rect;)V");
            JENNY_CHECK_NULL(sMethod_getTextBounds_0);

            sMethod_getTextBounds_1 = env->GetMethodID(sClazz, "getTextBounds", "([CIILandroid/graphics/Rect;)V");
            JENNY_CHECK_NULL(sMethod_getTextBounds_1);

            sMethod_hasGlyph_0 = env->GetMethodID(sClazz, "hasGlyph", "(Ljava/lang/String;)Z");
            JENNY_CHECK_NULL(sMethod_hasGlyph_0);

            sMethod_getRunAdvance_0 = env->GetMethodID(sClazz, "getRunAdvance", "([CIIIIZI)F");
            JENNY_CHECK_NULL(sMethod_getRunAdvance_0);

            sMethod_getRunAdvance_1 = env->GetMethodID(sClazz, "getRunAdvance", "(Ljava/lang/CharSequence;IIIIZI)F");
            JENNY_CHECK_NULL(sMethod_getRunAdvance_1);

            sMethod_getOffsetForAdvance_0 = env->GetMethodID(sClazz, "getOffsetForAdvance", "([CIIIIZF)I");
            JENNY_CHECK_NULL(sMethod_getOffsetForAdvance_0);

            sMethod_getOffsetForAdvance_1 = env->GetMethodID(sClazz, "getOffsetForAdvance", "(Ljava/lang/CharSequence;IIIIZF)I");
            JENNY_CHECK_NULL(sMethod_getOffsetForAdvance_1);

            sMethod_equalsForTextMeasurement_0 = env->GetMethodID(sClazz, "equalsForTextMeasurement", "(Landroid/graphics/Paint;)Z");
            JENNY_CHECK_NULL(sMethod_equalsForTextMeasurement_0);



            sInited = true;
        }
    }
#undef JENNY_CHECK_NULL
   return true;
}

/*static*/ void PaintProxy::releaseClazz(JNIEnv *env) {
    if (sInited) {
        std::lock_guard<std::mutex> lg(sInitLock);
        if (sInited) {
            env->DeleteLocalRef(sClazz);
            sInited = false;
        }
    }
}

jmethodID PaintProxy::sConstruct_0;
jmethodID PaintProxy::sConstruct_1;
jmethodID PaintProxy::sConstruct_2;

jmethodID PaintProxy::sMethod_reset_0;
jmethodID PaintProxy::sMethod_set_0;
jmethodID PaintProxy::sMethod_getFlags_0;
jmethodID PaintProxy::sMethod_setFlags_0;
jmethodID PaintProxy::sMethod_getHinting_0;
jmethodID PaintProxy::sMethod_setHinting_0;
jmethodID PaintProxy::sMethod_isAntiAlias_0;
jmethodID PaintProxy::sMethod_setAntiAlias_0;
jmethodID PaintProxy::sMethod_isDither_0;
jmethodID PaintProxy::sMethod_setDither_0;
jmethodID PaintProxy::sMethod_isLinearText_0;
jmethodID PaintProxy::sMethod_setLinearText_0;
jmethodID PaintProxy::sMethod_isSubpixelText_0;
jmethodID PaintProxy::sMethod_setSubpixelText_0;
jmethodID PaintProxy::sMethod_isUnderlineText_0;
jmethodID PaintProxy::sMethod_setUnderlineText_0;
jmethodID PaintProxy::sMethod_isStrikeThruText_0;
jmethodID PaintProxy::sMethod_setStrikeThruText_0;
jmethodID PaintProxy::sMethod_isFakeBoldText_0;
jmethodID PaintProxy::sMethod_setFakeBoldText_0;
jmethodID PaintProxy::sMethod_isFilterBitmap_0;
jmethodID PaintProxy::sMethod_setFilterBitmap_0;
jmethodID PaintProxy::sMethod_getStyle_0;
jmethodID PaintProxy::sMethod_setStyle_0;
jmethodID PaintProxy::sMethod_getColor_0;
jmethodID PaintProxy::sMethod_setColor_0;
jmethodID PaintProxy::sMethod_getAlpha_0;
jmethodID PaintProxy::sMethod_setAlpha_0;
jmethodID PaintProxy::sMethod_setARGB_0;
jmethodID PaintProxy::sMethod_getStrokeWidth_0;
jmethodID PaintProxy::sMethod_setStrokeWidth_0;
jmethodID PaintProxy::sMethod_getStrokeMiter_0;
jmethodID PaintProxy::sMethod_setStrokeMiter_0;
jmethodID PaintProxy::sMethod_getStrokeCap_0;
jmethodID PaintProxy::sMethod_setStrokeCap_0;
jmethodID PaintProxy::sMethod_getStrokeJoin_0;
jmethodID PaintProxy::sMethod_setStrokeJoin_0;
jmethodID PaintProxy::sMethod_getFillPath_0;
jmethodID PaintProxy::sMethod_getShader_0;
jmethodID PaintProxy::sMethod_setShader_0;
jmethodID PaintProxy::sMethod_getColorFilter_0;
jmethodID PaintProxy::sMethod_setColorFilter_0;
jmethodID PaintProxy::sMethod_getXfermode_0;
jmethodID PaintProxy::sMethod_setXfermode_0;
jmethodID PaintProxy::sMethod_getPathEffect_0;
jmethodID PaintProxy::sMethod_setPathEffect_0;
jmethodID PaintProxy::sMethod_getMaskFilter_0;
jmethodID PaintProxy::sMethod_setMaskFilter_0;
jmethodID PaintProxy::sMethod_getTypeface_0;
jmethodID PaintProxy::sMethod_setTypeface_0;
jmethodID PaintProxy::sMethod_setShadowLayer_0;
jmethodID PaintProxy::sMethod_clearShadowLayer_0;
jmethodID PaintProxy::sMethod_getTextAlign_0;
jmethodID PaintProxy::sMethod_setTextAlign_0;
jmethodID PaintProxy::sMethod_getTextLocale_0;
jmethodID PaintProxy::sMethod_getTextLocales_0;
jmethodID PaintProxy::sMethod_setTextLocale_0;
jmethodID PaintProxy::sMethod_setTextLocales_0;
jmethodID PaintProxy::sMethod_isElegantTextHeight_0;
jmethodID PaintProxy::sMethod_setElegantTextHeight_0;
jmethodID PaintProxy::sMethod_getTextSize_0;
jmethodID PaintProxy::sMethod_setTextSize_0;
jmethodID PaintProxy::sMethod_getTextScaleX_0;
jmethodID PaintProxy::sMethod_setTextScaleX_0;
jmethodID PaintProxy::sMethod_getTextSkewX_0;
jmethodID PaintProxy::sMethod_setTextSkewX_0;
jmethodID PaintProxy::sMethod_getLetterSpacing_0;
jmethodID PaintProxy::sMethod_setLetterSpacing_0;
jmethodID PaintProxy::sMethod_getFontFeatureSettings_0;
jmethodID PaintProxy::sMethod_setFontFeatureSettings_0;
jmethodID PaintProxy::sMethod_getFontVariationSettings_0;
jmethodID PaintProxy::sMethod_setFontVariationSettings_0;
jmethodID PaintProxy::sMethod_ascent_0;
jmethodID PaintProxy::sMethod_descent_0;
jmethodID PaintProxy::sMethod_getFontMetrics_0;
jmethodID PaintProxy::sMethod_getFontMetrics_1;
jmethodID PaintProxy::sMethod_getFontMetricsInt_0;
jmethodID PaintProxy::sMethod_getFontMetricsInt_1;
jmethodID PaintProxy::sMethod_getFontSpacing_0;
jmethodID PaintProxy::sMethod_measureText_0;
jmethodID PaintProxy::sMethod_measureText_1;
jmethodID PaintProxy::sMethod_measureText_2;
jmethodID PaintProxy::sMethod_measureText_3;
jmethodID PaintProxy::sMethod_breakText_0;
jmethodID PaintProxy::sMethod_breakText_1;
jmethodID PaintProxy::sMethod_breakText_2;
jmethodID PaintProxy::sMethod_getTextWidths_0;
jmethodID PaintProxy::sMethod_getTextWidths_1;
jmethodID PaintProxy::sMethod_getTextWidths_2;
jmethodID PaintProxy::sMethod_getTextWidths_3;
jmethodID PaintProxy::sMethod_getTextPath_0;
jmethodID PaintProxy::sMethod_getTextPath_1;
jmethodID PaintProxy::sMethod_getTextBounds_0;
jmethodID PaintProxy::sMethod_getTextBounds_1;
jmethodID PaintProxy::sMethod_hasGlyph_0;
jmethodID PaintProxy::sMethod_getRunAdvance_0;
jmethodID PaintProxy::sMethod_getRunAdvance_1;
jmethodID PaintProxy::sMethod_getOffsetForAdvance_0;
jmethodID PaintProxy::sMethod_getOffsetForAdvance_1;
jmethodID PaintProxy::sMethod_equalsForTextMeasurement_0;


} // endof namespace android
