/**
 * File generated by Jenny -- https://github.com/LanderlYoung/Jenny
 *
 * DO NOT EDIT THIS FILE.
 *
 * For bug report, please refer to github issue tracker https://github.com/LanderlYoung/Jenny/issues,
 * or contact author landerlyoung@gmail.com.
 */
#pragma once

#include <jni.h>
#include <assert.h>                        
#include <atomic>
#include <mutex>

namespace android {
class DrawableProxy {

public:
    static constexpr auto FULL_CLASS_NAME = "android/graphics/drawable/Drawable";



private:
    // thread safe init
    static std::atomic_bool sInited;
    static std::mutex sInitLock;

    JNIEnv* mJniEnv;
    jobject mJavaObjectReference;

public:

    static bool initClazz(JNIEnv *env);
    
    static void releaseClazz(JNIEnv *env);

    static void assertInited(JNIEnv *env) {
        auto initClazzSuccess = initClazz(env);
        assert(initClazzSuccess);
    }

    DrawableProxy(JNIEnv *env, jobject javaObj)
            : mJniEnv(env), mJavaObjectReference(javaObj) {
        assertInited(env);
    }

    DrawableProxy(const DrawableProxy &from) = default;
    DrawableProxy &operator=(const DrawableProxy &) = default;

    DrawableProxy(DrawableProxy &&from)
           : mJniEnv(from.mJniEnv), mJavaObjectReference(from.mJavaObjectReference) {
        from.mJavaObjectReference = nullptr;
    }

    ~DrawableProxy() = default;
    
    // helper method to get underlay jobject reference
    jobject operator*() {
       return mJavaObjectReference;
    }
    
    // helper method to delete JNI local ref.
    // use only when you really understand JNIEnv::DeleteLocalRef.
    void deleteLocalRef() {
       if (mJavaObjectReference) {
           mJniEnv->DeleteLocalRef(mJavaObjectReference);
           mJavaObjectReference = nullptr;
       }
    }
    
    // === java methods below ===
    
    // construct: public Drawable()
    static DrawableProxy newInstance(JNIEnv* env) noexcept {
       assertInited(env);
       return DrawableProxy(env, env->NewObject(sClazz, sConstruct_0));
    } 
    

    // method: public abstract void draw(android.graphics.Canvas arg0)
    void draw(jobject arg0) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_draw_0, arg0);
    }

    // method: public void setBounds(int left, int top, int right, int bottom)
    void setBounds(jint left, jint top, jint right, jint bottom) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setBounds_0, left, top, right, bottom);
    }

    // method: public void setBounds(android.graphics.Rect bounds)
    void setBounds(jobject bounds) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setBounds_1, bounds);
    }

    // method: public final void copyBounds(android.graphics.Rect bounds)
    void copyBounds(jobject bounds) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_copyBounds_0, bounds);
    }

    // method: public final android.graphics.Rect copyBounds()
    jobject copyBounds() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_copyBounds_1);
    }

    // method: public final android.graphics.Rect getBounds()
    jobject getBounds() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getBounds_0);
    }

    // method: public android.graphics.Rect getDirtyBounds()
    jobject getDirtyBounds() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getDirtyBounds_0);
    }

    // method: public void setChangingConfigurations(int configs)
    void setChangingConfigurations(jint configs) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setChangingConfigurations_0, configs);
    }

    // method: public int getChangingConfigurations()
    jint getChangingConfigurations() const {
        return mJniEnv->CallIntMethod(mJavaObjectReference, sMethod_getChangingConfigurations_0);
    }

    // method: public void setDither(boolean dither)
    void setDither(jboolean dither) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setDither_0, dither);
    }

    // method: public void setFilterBitmap(boolean filter)
    void setFilterBitmap(jboolean filter) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setFilterBitmap_0, filter);
    }

    // method: public boolean isFilterBitmap()
    jboolean isFilterBitmap() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_isFilterBitmap_0);
    }

    // method: public final void setCallback(android.graphics.drawable.Drawable.Callback cb)
    void setCallback(jobject cb) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setCallback_0, cb);
    }

    // method: public android.graphics.drawable.Drawable.Callback getCallback()
    jobject getCallback() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getCallback_0);
    }

    // method: public void invalidateSelf()
    void invalidateSelf() const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_invalidateSelf_0);
    }

    // method: public void scheduleSelf(java.lang.Runnable what, long when)
    void scheduleSelf(jobject what, jlong when) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_scheduleSelf_0, what, when);
    }

    // method: public void unscheduleSelf(java.lang.Runnable what)
    void unscheduleSelf(jobject what) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_unscheduleSelf_0, what);
    }

    // method: public int getLayoutDirection()
    jint getLayoutDirection() const {
        return mJniEnv->CallIntMethod(mJavaObjectReference, sMethod_getLayoutDirection_0);
    }

    // method: public final boolean setLayoutDirection(int layoutDirection)
    jboolean setLayoutDirection(jint layoutDirection) const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_setLayoutDirection_0, layoutDirection);
    }

    // method: public boolean onLayoutDirectionChanged(int layoutDirection)
    jboolean onLayoutDirectionChanged(jint layoutDirection) const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_onLayoutDirectionChanged_0, layoutDirection);
    }

    // method: public abstract void setAlpha(int arg0)
    void setAlpha(jint arg0) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setAlpha_0, arg0);
    }

    // method: public int getAlpha()
    jint getAlpha() const {
        return mJniEnv->CallIntMethod(mJavaObjectReference, sMethod_getAlpha_0);
    }

    // method: public abstract void setColorFilter(android.graphics.ColorFilter arg0)
    void setColorFilter(jobject arg0) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setColorFilter_0, arg0);
    }

    // method: public void setColorFilter(int color, android.graphics.PorterDuff.Mode mode)
    void setColorFilter(jint color, jobject mode) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setColorFilter_1, color, mode);
    }

    // method: public void setTint(int tintColor)
    void setTint(jint tintColor) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setTint_0, tintColor);
    }

    // method: public void setTintList(android.content.res.ColorStateList tint)
    void setTintList(jobject tint) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setTintList_0, tint);
    }

    // method: public void setTintMode(android.graphics.PorterDuff.Mode tintMode)
    void setTintMode(jobject tintMode) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setTintMode_0, tintMode);
    }

    // method: public android.graphics.ColorFilter getColorFilter()
    jobject getColorFilter() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getColorFilter_0);
    }

    // method: public void clearColorFilter()
    void clearColorFilter() const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_clearColorFilter_0);
    }

    // method: public void setHotspot(float x, float y)
    void setHotspot(jfloat x, jfloat y) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setHotspot_0, x, y);
    }

    // method: public void setHotspotBounds(int left, int top, int right, int bottom)
    void setHotspotBounds(jint left, jint top, jint right, jint bottom) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setHotspotBounds_0, left, top, right, bottom);
    }

    // method: public void getHotspotBounds(android.graphics.Rect outRect)
    void getHotspotBounds(jobject outRect) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_getHotspotBounds_0, outRect);
    }

    // method: public boolean isStateful()
    jboolean isStateful() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_isStateful_0);
    }

    // method: public boolean setState(int[] stateSet)
    jboolean setState(jintArray stateSet) const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_setState_0, stateSet);
    }

    // method: public int[] getState()
    jintArray getState() const {
        return reinterpret_cast<jintArray>(mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getState_0));
    }

    // method: public void jumpToCurrentState()
    void jumpToCurrentState() const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_jumpToCurrentState_0);
    }

    // method: public android.graphics.drawable.Drawable getCurrent()
    jobject getCurrent() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getCurrent_0);
    }

    // method: public final boolean setLevel(int level)
    jboolean setLevel(jint level) const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_setLevel_0, level);
    }

    // method: public final int getLevel()
    jint getLevel() const {
        return mJniEnv->CallIntMethod(mJavaObjectReference, sMethod_getLevel_0);
    }

    // method: public boolean setVisible(boolean visible, boolean restart)
    jboolean setVisible(jboolean visible, jboolean restart) const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_setVisible_0, visible, restart);
    }

    // method: public final boolean isVisible()
    jboolean isVisible() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_isVisible_0);
    }

    // method: public void setAutoMirrored(boolean mirrored)
    void setAutoMirrored(jboolean mirrored) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setAutoMirrored_0, mirrored);
    }

    // method: public boolean isAutoMirrored()
    jboolean isAutoMirrored() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_isAutoMirrored_0);
    }

    // method: public void applyTheme(android.content.res.Resources.Theme t)
    void applyTheme(jobject t) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_applyTheme_0, t);
    }

    // method: public boolean canApplyTheme()
    jboolean canApplyTheme() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_canApplyTheme_0);
    }

    // method: public abstract int getOpacity()
    jint getOpacity() const {
        return mJniEnv->CallIntMethod(mJavaObjectReference, sMethod_getOpacity_0);
    }

    // method: public static int resolveOpacity(int op1, int op2)
    static jint resolveOpacity(JNIEnv* env, jint op1, jint op2) {
        assertInited(env);
        return env->CallStaticIntMethod(sClazz, sMethod_resolveOpacity_0, op1, op2);
    }

    // method: public android.graphics.Region getTransparentRegion()
    jobject getTransparentRegion() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getTransparentRegion_0);
    }

    // method: protected boolean onStateChange(int[] state)
    jboolean onStateChange(jintArray state) const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_onStateChange_0, state);
    }

    // method: protected boolean onLevelChange(int level)
    jboolean onLevelChange(jint level) const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_onLevelChange_0, level);
    }

    // method: protected void onBoundsChange(android.graphics.Rect bounds)
    void onBoundsChange(jobject bounds) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_onBoundsChange_0, bounds);
    }

    // method: public int getIntrinsicWidth()
    jint getIntrinsicWidth() const {
        return mJniEnv->CallIntMethod(mJavaObjectReference, sMethod_getIntrinsicWidth_0);
    }

    // method: public int getIntrinsicHeight()
    jint getIntrinsicHeight() const {
        return mJniEnv->CallIntMethod(mJavaObjectReference, sMethod_getIntrinsicHeight_0);
    }

    // method: public int getMinimumWidth()
    jint getMinimumWidth() const {
        return mJniEnv->CallIntMethod(mJavaObjectReference, sMethod_getMinimumWidth_0);
    }

    // method: public int getMinimumHeight()
    jint getMinimumHeight() const {
        return mJniEnv->CallIntMethod(mJavaObjectReference, sMethod_getMinimumHeight_0);
    }

    // method: public boolean getPadding(android.graphics.Rect padding)
    jboolean getPadding(jobject padding) const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_getPadding_0, padding);
    }

    // method: public void getOutline(android.graphics.Outline outline)
    void getOutline(jobject outline) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_getOutline_0, outline);
    }

    // method: public android.graphics.drawable.Drawable mutate()
    jobject mutate() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_mutate_0);
    }

    // method: public static android.graphics.drawable.Drawable createFromStream(java.io.InputStream is, java.lang.String srcName)
    static jobject createFromStream(JNIEnv* env, jobject is, jstring srcName) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_createFromStream_0, is, srcName);
    }

    // method: public static android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources res, android.util.TypedValue value, java.io.InputStream is, java.lang.String srcName)
    static jobject createFromResourceStream(JNIEnv* env, jobject res, jobject value, jobject is, jstring srcName) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_createFromResourceStream_0, res, value, is, srcName);
    }

    // method: public static android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources res, android.util.TypedValue value, java.io.InputStream is, java.lang.String srcName, android.graphics.BitmapFactory.Options opts)
    static jobject createFromResourceStream(JNIEnv* env, jobject res, jobject value, jobject is, jstring srcName, jobject opts) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_createFromResourceStream_1, res, value, is, srcName, opts);
    }

    // method: public static android.graphics.drawable.Drawable createFromXml(android.content.res.Resources r, org.xmlpull.v1.XmlPullParser parser)
    static jobject createFromXml(JNIEnv* env, jobject r, jobject parser) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_createFromXml_0, r, parser);
    }

    // method: public static android.graphics.drawable.Drawable createFromXml(android.content.res.Resources r, org.xmlpull.v1.XmlPullParser parser, android.content.res.Resources.Theme theme)
    static jobject createFromXml(JNIEnv* env, jobject r, jobject parser, jobject theme) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_createFromXml_1, r, parser, theme);
    }

    // method: public static android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources r, org.xmlpull.v1.XmlPullParser parser, android.util.AttributeSet attrs)
    static jobject createFromXmlInner(JNIEnv* env, jobject r, jobject parser, jobject attrs) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_createFromXmlInner_0, r, parser, attrs);
    }

    // method: public static android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources r, org.xmlpull.v1.XmlPullParser parser, android.util.AttributeSet attrs, android.content.res.Resources.Theme theme)
    static jobject createFromXmlInner(JNIEnv* env, jobject r, jobject parser, jobject attrs, jobject theme) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_createFromXmlInner_1, r, parser, attrs, theme);
    }

    // method: public static android.graphics.drawable.Drawable createFromPath(java.lang.String pathName)
    static jobject createFromPath(JNIEnv* env, jstring pathName) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_createFromPath_0, pathName);
    }

    // method: public void inflate(android.content.res.Resources r, org.xmlpull.v1.XmlPullParser parser, android.util.AttributeSet attrs)
    void inflate(jobject r, jobject parser, jobject attrs) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_inflate_0, r, parser, attrs);
    }

    // method: public void inflate(android.content.res.Resources r, org.xmlpull.v1.XmlPullParser parser, android.util.AttributeSet attrs, android.content.res.Resources.Theme theme)
    void inflate(jobject r, jobject parser, jobject attrs, jobject theme) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_inflate_1, r, parser, attrs, theme);
    }

    // method: public android.graphics.drawable.Drawable.ConstantState getConstantState()
    jobject getConstantState() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getConstantState_0);
    }



private:
    static jclass sClazz;
    static jmethodID sConstruct_0;

    static jmethodID sMethod_draw_0;
    static jmethodID sMethod_setBounds_0;
    static jmethodID sMethod_setBounds_1;
    static jmethodID sMethod_copyBounds_0;
    static jmethodID sMethod_copyBounds_1;
    static jmethodID sMethod_getBounds_0;
    static jmethodID sMethod_getDirtyBounds_0;
    static jmethodID sMethod_setChangingConfigurations_0;
    static jmethodID sMethod_getChangingConfigurations_0;
    static jmethodID sMethod_setDither_0;
    static jmethodID sMethod_setFilterBitmap_0;
    static jmethodID sMethod_isFilterBitmap_0;
    static jmethodID sMethod_setCallback_0;
    static jmethodID sMethod_getCallback_0;
    static jmethodID sMethod_invalidateSelf_0;
    static jmethodID sMethod_scheduleSelf_0;
    static jmethodID sMethod_unscheduleSelf_0;
    static jmethodID sMethod_getLayoutDirection_0;
    static jmethodID sMethod_setLayoutDirection_0;
    static jmethodID sMethod_onLayoutDirectionChanged_0;
    static jmethodID sMethod_setAlpha_0;
    static jmethodID sMethod_getAlpha_0;
    static jmethodID sMethod_setColorFilter_0;
    static jmethodID sMethod_setColorFilter_1;
    static jmethodID sMethod_setTint_0;
    static jmethodID sMethod_setTintList_0;
    static jmethodID sMethod_setTintMode_0;
    static jmethodID sMethod_getColorFilter_0;
    static jmethodID sMethod_clearColorFilter_0;
    static jmethodID sMethod_setHotspot_0;
    static jmethodID sMethod_setHotspotBounds_0;
    static jmethodID sMethod_getHotspotBounds_0;
    static jmethodID sMethod_isStateful_0;
    static jmethodID sMethod_setState_0;
    static jmethodID sMethod_getState_0;
    static jmethodID sMethod_jumpToCurrentState_0;
    static jmethodID sMethod_getCurrent_0;
    static jmethodID sMethod_setLevel_0;
    static jmethodID sMethod_getLevel_0;
    static jmethodID sMethod_setVisible_0;
    static jmethodID sMethod_isVisible_0;
    static jmethodID sMethod_setAutoMirrored_0;
    static jmethodID sMethod_isAutoMirrored_0;
    static jmethodID sMethod_applyTheme_0;
    static jmethodID sMethod_canApplyTheme_0;
    static jmethodID sMethod_getOpacity_0;
    static jmethodID sMethod_resolveOpacity_0;
    static jmethodID sMethod_getTransparentRegion_0;
    static jmethodID sMethod_onStateChange_0;
    static jmethodID sMethod_onLevelChange_0;
    static jmethodID sMethod_onBoundsChange_0;
    static jmethodID sMethod_getIntrinsicWidth_0;
    static jmethodID sMethod_getIntrinsicHeight_0;
    static jmethodID sMethod_getMinimumWidth_0;
    static jmethodID sMethod_getMinimumHeight_0;
    static jmethodID sMethod_getPadding_0;
    static jmethodID sMethod_getOutline_0;
    static jmethodID sMethod_mutate_0;
    static jmethodID sMethod_createFromStream_0;
    static jmethodID sMethod_createFromResourceStream_0;
    static jmethodID sMethod_createFromResourceStream_1;
    static jmethodID sMethod_createFromXml_0;
    static jmethodID sMethod_createFromXml_1;
    static jmethodID sMethod_createFromXmlInner_0;
    static jmethodID sMethod_createFromXmlInner_1;
    static jmethodID sMethod_createFromPath_0;
    static jmethodID sMethod_inflate_0;
    static jmethodID sMethod_inflate_1;
    static jmethodID sMethod_getConstantState_0;


};
} // endof namespace android
