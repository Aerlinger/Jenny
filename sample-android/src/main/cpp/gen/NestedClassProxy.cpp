/**
 * File generated by Jenny -- https://github.com/LanderlYoung/Jenny
 *
 * DO NOT EDIT THIS FILE.
 *
 * For bug report, please refer to github issue tracker https://github.com/LanderlYoung/Jenny/issues,
 * or contact author landerlyoung@gmail.com.
 */
#include "NestedClassProxy.h"


// external logger function passed by jenny.errorLoggerFunction
void jennySampleErrorLog(JNIEnv* env, const char* error);




jclass NestedClassProxy::sClazz = nullptr;

// thread safe init
std::mutex NestedClassProxy::sInitLock;
std::atomic_bool NestedClassProxy::sInited;

/*static*/ bool NestedClassProxy::initClazz(JNIEnv *env) {
#define JENNY_CHECK_NULL(val)                      \
       do {                                        \
           if ((val) == nullptr) {                 \
               jennySampleErrorLog(env, "can't init NestedClassProxy::" #val); \
               return false;                       \
           }                                       \
       } while(false)

    if (!sInited) {
        std::lock_guard<std::mutex> lg(sInitLock);
        if (!sInited) {
            auto clazz = env->FindClass(FULL_CLASS_NAME);
            JENNY_CHECK_NULL(clazz);
            sClazz = reinterpret_cast<jclass>(env->NewGlobalRef(clazz));
            env->DeleteLocalRef(clazz);
            JENNY_CHECK_NULL(sClazz);

            sConstruct_0 = env->GetMethodID(sClazz, "<init>", "(Lio/github/landerlyoung/jennysampleapp/Callback;)V");
            JENNY_CHECK_NULL(sConstruct_0);


            sMethod_hello_0 = env->GetMethodID(sClazz, "hello", "()V");
            JENNY_CHECK_NULL(sMethod_hello_0);



            sInited = true;
        }
    }
#undef JENNY_CHECK_NULL
   return true;
}

/*static*/ void NestedClassProxy::releaseClazz(JNIEnv *env) {
    if (sInited) {
        std::lock_guard<std::mutex> lg(sInitLock);
        if (sInited) {
            env->DeleteLocalRef(sClazz);
            sClazz = nullptr;
            sInited = false;
        }
    }
}

jmethodID NestedClassProxy::sConstruct_0;

jmethodID NestedClassProxy::sMethod_hello_0;



