/**
 * File generated by Jenny -- https://github.com/LanderlYoung/Jenny
 *
 * DO NOT EDIT THIS FILE.
 *
 * For bug report, please refer to github issue tracker https://github.com/LanderlYoung/Jenny/issues,
 * or contact author landerlyoung@gmail.com.
 */
#pragma once

#include <jni.h>
#include <assert.h>                        
#include <atomic>
#include <mutex>

namespace android {
class RectProxy {

public:
    static constexpr auto FULL_CLASS_NAME = "android/graphics/Rect";



private:
    // thread safe init
    static std::atomic_bool sInited;
    static std::mutex sInitLock;

    JNIEnv* mJniEnv;
    jobject mJavaObjectReference;

public:

    static bool initClazz(JNIEnv *env);
    
    static void releaseClazz(JNIEnv *env);

    static void assertInited(JNIEnv *env) {
        auto initClazzSuccess = initClazz(env);
        assert(initClazzSuccess);
    }

    RectProxy(JNIEnv *env, jobject javaObj)
            : mJniEnv(env), mJavaObjectReference(javaObj) {
        assertInited(env);
    }

    RectProxy(const RectProxy &from) = default;
    RectProxy &operator=(const RectProxy &) = default;

    RectProxy(RectProxy &&from)
           : mJniEnv(from.mJniEnv), mJavaObjectReference(from.mJavaObjectReference) {
        from.mJavaObjectReference = nullptr;
    }

    ~RectProxy() = default;
    
    // helper method to get underlay jobject reference
    jobject operator*() {
       return mJavaObjectReference;
    }
    
    // helper method to delete JNI local ref.
    // use only when you really understand JNIEnv::DeleteLocalRef.
    void deleteLocalRef() {
       if (mJavaObjectReference) {
           mJniEnv->DeleteLocalRef(mJavaObjectReference);
           mJavaObjectReference = nullptr;
       }
    }
    
    // === java methods below ===
    
    // construct: public Rect()
    static RectProxy newInstance(JNIEnv* env) noexcept {
       assertInited(env);
       return RectProxy(env, env->NewObject(sClazz, sConstruct_0));
    } 
    
    // construct: public Rect(int left, int top, int right, int bottom)
    static RectProxy newInstance(JNIEnv* env, jint left, jint top, jint right, jint bottom) noexcept {
       assertInited(env);
       return RectProxy(env, env->NewObject(sClazz, sConstruct_1, left, top, right, bottom));
    } 
    
    // construct: public Rect(android.graphics.Rect r)
    static RectProxy newInstance(JNIEnv* env, jobject r) noexcept {
       assertInited(env);
       return RectProxy(env, env->NewObject(sClazz, sConstruct_2, r));
    } 
    

    // method: public boolean equals(java.lang.Object o)
    jboolean equals(jobject o) const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_equals_0, o);
    }

    // method: public int hashCode()
    jint hashCode() const {
        return mJniEnv->CallIntMethod(mJavaObjectReference, sMethod_hashCode_0);
    }

    // method: public java.lang.String toString()
    jstring toString() const {
        return reinterpret_cast<jstring>(mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_toString_0));
    }

    // method: public java.lang.String toShortString()
    jstring toShortString() const {
        return reinterpret_cast<jstring>(mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_toShortString_0));
    }

    // method: public java.lang.String flattenToString()
    jstring flattenToString() const {
        return reinterpret_cast<jstring>(mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_flattenToString_0));
    }

    // method: public static android.graphics.Rect unflattenFromString(java.lang.String str)
    static jobject unflattenFromString(JNIEnv* env, jstring str) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_unflattenFromString_0, str);
    }

    // method: public boolean isEmpty()
    jboolean isEmpty() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_isEmpty_0);
    }

    // method: public int width()
    jint width() const {
        return mJniEnv->CallIntMethod(mJavaObjectReference, sMethod_width_0);
    }

    // method: public int height()
    jint height() const {
        return mJniEnv->CallIntMethod(mJavaObjectReference, sMethod_height_0);
    }

    // method: public int centerX()
    jint centerX() const {
        return mJniEnv->CallIntMethod(mJavaObjectReference, sMethod_centerX_0);
    }

    // method: public int centerY()
    jint centerY() const {
        return mJniEnv->CallIntMethod(mJavaObjectReference, sMethod_centerY_0);
    }

    // method: public float exactCenterX()
    jfloat exactCenterX() const {
        return mJniEnv->CallFloatMethod(mJavaObjectReference, sMethod_exactCenterX_0);
    }

    // method: public float exactCenterY()
    jfloat exactCenterY() const {
        return mJniEnv->CallFloatMethod(mJavaObjectReference, sMethod_exactCenterY_0);
    }

    // method: public void setEmpty()
    void setEmpty() const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setEmpty_0);
    }

    // method: public void set(int left, int top, int right, int bottom)
    void set(jint left, jint top, jint right, jint bottom) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_set_0, left, top, right, bottom);
    }

    // method: public void set(android.graphics.Rect src)
    void set(jobject src) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_set_1, src);
    }

    // method: public void offset(int dx, int dy)
    void offset(jint dx, jint dy) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_offset_0, dx, dy);
    }

    // method: public void offsetTo(int newLeft, int newTop)
    void offsetTo(jint newLeft, jint newTop) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_offsetTo_0, newLeft, newTop);
    }

    // method: public void inset(int dx, int dy)
    void inset(jint dx, jint dy) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_inset_0, dx, dy);
    }

    // method: public boolean contains(int x, int y)
    jboolean contains(jint x, jint y) const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_contains_0, x, y);
    }

    // method: public boolean contains(int left, int top, int right, int bottom)
    jboolean contains(jint left, jint top, jint right, jint bottom) const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_contains_1, left, top, right, bottom);
    }

    // method: public boolean contains(android.graphics.Rect r)
    jboolean contains(jobject r) const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_contains_2, r);
    }

    // method: public boolean intersect(int left, int top, int right, int bottom)
    jboolean intersect(jint left, jint top, jint right, jint bottom) const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_intersect_0, left, top, right, bottom);
    }

    // method: public boolean intersect(android.graphics.Rect r)
    jboolean intersect(jobject r) const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_intersect_1, r);
    }

    // method: public boolean setIntersect(android.graphics.Rect a, android.graphics.Rect b)
    jboolean setIntersect(jobject a, jobject b) const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_setIntersect_0, a, b);
    }

    // method: public boolean intersects(int left, int top, int right, int bottom)
    jboolean intersects(jint left, jint top, jint right, jint bottom) const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_intersects_0, left, top, right, bottom);
    }

    // method: public static boolean intersects(android.graphics.Rect a, android.graphics.Rect b)
    static jboolean intersects(JNIEnv* env, jobject a, jobject b) {
        assertInited(env);
        return env->CallStaticBooleanMethod(sClazz, sMethod_intersects_1, a, b);
    }

    // method: public void union(int left, int top, int right, int bottom)
    void union__IIII(jint left, jint top, jint right, jint bottom) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_union_0, left, top, right, bottom);
    }

    // method: public void union(android.graphics.Rect r)
    void union__Landroid_graphics_Rect_2(jobject r) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_union_1, r);
    }

    // method: public void union(int x, int y)
    void union__II(jint x, jint y) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_union_2, x, y);
    }

    // method: public void sort()
    void sort() const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_sort_0);
    }

    // method: public int describeContents()
    jint describeContents() const {
        return mJniEnv->CallIntMethod(mJavaObjectReference, sMethod_describeContents_0);
    }

    // method: public void writeToParcel(android.os.Parcel out, int flags)
    void writeToParcel(jobject out, jint flags) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_writeToParcel_0, out, flags);
    }

    // method: public void readFromParcel(android.os.Parcel in)
    void readFromParcel(jobject in) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_readFromParcel_0, in);
    }


    // field: public static final android.os.Parcelable.Creator<android.graphics.Rect> CREATOR
    static jobject getCREATOR(JNIEnv* env) {
       assertInited(env);
       return env->GetStaticObjectField(sClazz, sField_CREATOR_0);

    }

    // field: public static final android.os.Parcelable.Creator<android.graphics.Rect> CREATOR
    static void setCREATOR(JNIEnv* env, jobject CREATOR) {
        assertInited(env);
        env->SetStaticObjectField(sClazz, sField_CREATOR_0, CREATOR);
    }


    // field: public int bottom
    jint getBottom() const {
       
       return mJniEnv->GetIntField(mJavaObjectReference, sField_bottom_1);

    }

    // field: public int bottom
    void setBottom(jint bottom) const {
        
        mJniEnv->SetIntField(mJavaObjectReference, sField_bottom_1, bottom);
    }


    // field: public int left
    jint getLeft() const {
       
       return mJniEnv->GetIntField(mJavaObjectReference, sField_left_2);

    }

    // field: public int left
    void setLeft(jint left) const {
        
        mJniEnv->SetIntField(mJavaObjectReference, sField_left_2, left);
    }


    // field: public int right
    jint getRight() const {
       
       return mJniEnv->GetIntField(mJavaObjectReference, sField_right_3);

    }

    // field: public int right
    void setRight(jint right) const {
        
        mJniEnv->SetIntField(mJavaObjectReference, sField_right_3, right);
    }


    // field: public int top
    jint getTop() const {
       
       return mJniEnv->GetIntField(mJavaObjectReference, sField_top_4);

    }

    // field: public int top
    void setTop(jint top) const {
        
        mJniEnv->SetIntField(mJavaObjectReference, sField_top_4, top);
    }



private:
    static jclass sClazz;
    static jmethodID sConstruct_0;
    static jmethodID sConstruct_1;
    static jmethodID sConstruct_2;

    static jmethodID sMethod_equals_0;
    static jmethodID sMethod_hashCode_0;
    static jmethodID sMethod_toString_0;
    static jmethodID sMethod_toShortString_0;
    static jmethodID sMethod_flattenToString_0;
    static jmethodID sMethod_unflattenFromString_0;
    static jmethodID sMethod_isEmpty_0;
    static jmethodID sMethod_width_0;
    static jmethodID sMethod_height_0;
    static jmethodID sMethod_centerX_0;
    static jmethodID sMethod_centerY_0;
    static jmethodID sMethod_exactCenterX_0;
    static jmethodID sMethod_exactCenterY_0;
    static jmethodID sMethod_setEmpty_0;
    static jmethodID sMethod_set_0;
    static jmethodID sMethod_set_1;
    static jmethodID sMethod_offset_0;
    static jmethodID sMethod_offsetTo_0;
    static jmethodID sMethod_inset_0;
    static jmethodID sMethod_contains_0;
    static jmethodID sMethod_contains_1;
    static jmethodID sMethod_contains_2;
    static jmethodID sMethod_intersect_0;
    static jmethodID sMethod_intersect_1;
    static jmethodID sMethod_setIntersect_0;
    static jmethodID sMethod_intersects_0;
    static jmethodID sMethod_intersects_1;
    static jmethodID sMethod_union_0;
    static jmethodID sMethod_union_1;
    static jmethodID sMethod_union_2;
    static jmethodID sMethod_sort_0;
    static jmethodID sMethod_describeContents_0;
    static jmethodID sMethod_writeToParcel_0;
    static jmethodID sMethod_readFromParcel_0;

    static jfieldID sField_CREATOR_0;
    static jfieldID sField_bottom_1;
    static jfieldID sField_left_2;
    static jfieldID sField_right_3;
    static jfieldID sField_top_4;

};
} // endof namespace android
