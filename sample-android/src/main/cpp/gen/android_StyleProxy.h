/**
 * File generated by Jenny -- https://github.com/LanderlYoung/Jenny
 *
 * DO NOT EDIT THIS FILE.
 *
 * For bug report, please refer to github issue tracker https://github.com/LanderlYoung/Jenny/issues.
 */
#pragma once

#include <jni.h>
#include <assert.h>                        
#include <atomic>
#include <mutex>

namespace android {
class StyleProxy {

public:
    static constexpr auto FULL_CLASS_NAME = "android/graphics/Paint$Style";



private:

    JNIEnv* mJniEnv;
    jobject mJavaObjectReference;

public:

    static bool initClazz(JNIEnv* env);
    
    static void releaseClazz(JNIEnv* env);

    static void assertInited(JNIEnv* env) {
        auto initClazzSuccess = initClazz(env);
        assert(initClazzSuccess);
    }

    StyleProxy(): StyleProxy(nullptr, nullptr) {}
    
    StyleProxy(JNIEnv* env, jobject javaObj)
            : mJniEnv(env), mJavaObjectReference(javaObj) {
        if (env) { assertInited(env); }
    }

    StyleProxy(const StyleProxy& from) = default;
    StyleProxy &operator=(const StyleProxy &) = default;

    StyleProxy(StyleProxy&& from) noexcept
           : mJniEnv(from.mJniEnv), mJavaObjectReference(from.mJavaObjectReference) {
        from.mJavaObjectReference = nullptr;
    }
    
    StyleProxy& operator=(StyleProxy&& from) noexcept {
       mJniEnv = from.mJniEnv;
       std::swap(mJavaObjectReference, from.mJavaObjectReference);
       return *this;
   }

    ~StyleProxy() = default;
    
    // helper method to get underlay jobject reference
    jobject operator*() const {
       return mJavaObjectReference;
    }
    
    // helper method to check underlay jobject reference is not nullptr
    operator bool() const {
       return mJavaObjectReference;
    }
    
    // helper method to delete JNI local ref.
    // use only when you really understand JNIEnv::DeleteLocalRef.
    void deleteLocalRef() {
       if (mJavaObjectReference) {
           mJniEnv->DeleteLocalRef(mJavaObjectReference);
           mJavaObjectReference = nullptr;
       }
    }
    
    // === java methods below ===
    

    // method: public static android.graphics.Paint.Style[] values()
    static jobjectArray values(JNIEnv* env) {
        assertInited(env);
        return reinterpret_cast<jobjectArray>(env->CallStaticObjectMethod(getClassInitState().sClazz, getClassInitState().sMethod_values_0));
    }

    // method: public static android.graphics.Paint.Style valueOf(java.lang.String name)
    static jobject valueOf(JNIEnv* env, jstring name) {
        assertInited(env);
        return env->CallStaticObjectMethod(getClassInitState().sClazz, getClassInitState().sMethod_valueOf_0, name);
    }


    // field: public static final android.graphics.Paint.Style FILL
    static jobject getFILL(JNIEnv* env) {
       assertInited(env);
       return env->GetStaticObjectField(getClassInitState().sClazz, getClassInitState().sField_FILL_0);

    }

    // field: public static final android.graphics.Paint.Style FILL
    static void setFILL(JNIEnv* env, jobject FILL) {
        assertInited(env);
        env->SetStaticObjectField(getClassInitState().sClazz, getClassInitState().sField_FILL_0, FILL);
    }


    // field: public static final android.graphics.Paint.Style STROKE
    static jobject getSTROKE(JNIEnv* env) {
       assertInited(env);
       return env->GetStaticObjectField(getClassInitState().sClazz, getClassInitState().sField_STROKE_1);

    }

    // field: public static final android.graphics.Paint.Style STROKE
    static void setSTROKE(JNIEnv* env, jobject STROKE) {
        assertInited(env);
        env->SetStaticObjectField(getClassInitState().sClazz, getClassInitState().sField_STROKE_1, STROKE);
    }


    // field: public static final android.graphics.Paint.Style FILL_AND_STROKE
    static jobject getFILL_AND_STROKE(JNIEnv* env) {
       assertInited(env);
       return env->GetStaticObjectField(getClassInitState().sClazz, getClassInitState().sField_FILL_AND_STROKE_2);

    }

    // field: public static final android.graphics.Paint.Style FILL_AND_STROKE
    static void setFILL_AND_STROKE(JNIEnv* env, jobject FILL_AND_STROKE) {
        assertInited(env);
        env->SetStaticObjectField(getClassInitState().sClazz, getClassInitState().sField_FILL_AND_STROKE_2, FILL_AND_STROKE);
    }



private:
    struct ClassInitState {
    // thread safe init
    std::atomic_bool sInited {};
    std::mutex sInitLock {};

    jclass sClazz = nullptr;

    jmethodID sMethod_values_0 = nullptr;
    jmethodID sMethod_valueOf_0 = nullptr;

    jfieldID sField_FILL_0 = nullptr;
    jfieldID sField_STROKE_1 = nullptr;
    jfieldID sField_FILL_AND_STROKE_2 = nullptr;

   }; // endof struct ClassInitState

   template <typename T = void>
   static ClassInitState& getClassInitState() {
       static ClassInitState classInitState;
       return classInitState;
   }

};
} // endof namespace android




// external logger function passed by jenny.errorLoggerFunction
void jennySampleErrorLog(JNIEnv* env, const char* error);

namespace android {

/*static*/ inline bool StyleProxy::initClazz(JNIEnv* env) {
#define JENNY_CHECK_NULL(val)                      \
       do {                                        \
           if ((val) == nullptr) {                 \
               jennySampleErrorLog(env, "can't init StyleProxy::" #val); \
               return false;                       \
           }                                       \
       } while(false)

    auto& state = getClassInitState();
    if (!state.sInited) {
        std::lock_guard<std::mutex> lg(state.sInitLock);
        if (!state.sInited) {
            auto clazz = env->FindClass(FULL_CLASS_NAME);
            JENNY_CHECK_NULL(clazz);
            state.sClazz = reinterpret_cast<jclass>(env->NewGlobalRef(clazz));
            env->DeleteLocalRef(clazz);
            JENNY_CHECK_NULL(state.sClazz);


            state.sMethod_values_0 = env->GetStaticMethodID(state.sClazz, "values", "()[Landroid/graphics/Paint$Style;");
            JENNY_CHECK_NULL(state.sMethod_values_0);

            state.sMethod_valueOf_0 = env->GetStaticMethodID(state.sClazz, "valueOf", "(Ljava/lang/String;)Landroid/graphics/Paint$Style;");
            JENNY_CHECK_NULL(state.sMethod_valueOf_0);


            state.sField_FILL_0 = env->GetStaticFieldID(state.sClazz, "FILL", "Landroid/graphics/Paint$Style;");
            JENNY_CHECK_NULL(state.sField_FILL_0);

            state.sField_STROKE_1 = env->GetStaticFieldID(state.sClazz, "STROKE", "Landroid/graphics/Paint$Style;");
            JENNY_CHECK_NULL(state.sField_STROKE_1);

            state.sField_FILL_AND_STROKE_2 = env->GetStaticFieldID(state.sClazz, "FILL_AND_STROKE", "Landroid/graphics/Paint$Style;");
            JENNY_CHECK_NULL(state.sField_FILL_AND_STROKE_2);


            state.sInited = true;
        }
    }
#undef JENNY_CHECK_NULL
   return true;
}

/*static*/ inline void StyleProxy::releaseClazz(JNIEnv* env) {
    auto& state = getClassInitState();
    if (state.sInited) {
        std::lock_guard<std::mutex> lg(state.sInitLock);
        if (state.sInited) {
            env->DeleteGlobalRef(state.sClazz);
            state.sClazz = nullptr;
            state.sInited = false;
        }
    }
}


} // endof namespace android
