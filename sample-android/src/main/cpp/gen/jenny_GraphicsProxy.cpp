/**
 * File generated by Jenny -- https://github.com/LanderlYoung/Jenny
 *
 * DO NOT EDIT THIS FILE.
 *
 * For bug report, please refer to github issue tracker https://github.com/LanderlYoung/Jenny/issues.
 */
#include "jenny_GraphicsProxy.h"


// external logger function passed by jenny.errorLoggerFunction
void jennySampleErrorLog(JNIEnv* env, const char* error);


namespace jenny {

jclass GraphicsProxy::sClazz = nullptr;

// thread safe init
std::mutex GraphicsProxy::sInitLock;
std::atomic_bool GraphicsProxy::sInited;

/*static*/ bool GraphicsProxy::initClazz(JNIEnv* env) {
#define JENNY_CHECK_NULL(val)                      \
       do {                                        \
           if ((val) == nullptr) {                 \
               jennySampleErrorLog(env, "can't init GraphicsProxy::" #val); \
               return false;                       \
           }                                       \
       } while(false)

    if (!sInited) {
        std::lock_guard<std::mutex> lg(sInitLock);
        if (!sInited) {
            auto clazz = env->FindClass(FULL_CLASS_NAME);
            JENNY_CHECK_NULL(clazz);
            sClazz = reinterpret_cast<jclass>(env->NewGlobalRef(clazz));
            env->DeleteLocalRef(clazz);
            JENNY_CHECK_NULL(sClazz);

            sConstruct_0 = env->GetMethodID(sClazz, "<init>", "()V");
            JENNY_CHECK_NULL(sConstruct_0);


            sMethod_newPaint_0 = env->GetStaticMethodID(sClazz, "newPaint", "()Landroid/graphics/Paint;");
            JENNY_CHECK_NULL(sMethod_newPaint_0);

            sMethod_paintSetStyle_0 = env->GetStaticMethodID(sClazz, "paintSetStyle", "(Landroid/graphics/Paint;Landroid/graphics/Paint$Style;)V");
            JENNY_CHECK_NULL(sMethod_paintSetStyle_0);

            sMethod_drawableCircle_0 = env->GetStaticMethodID(sClazz, "drawableCircle", "(Landroid/graphics/Canvas;FFFLandroid/graphics/Paint;)V");
            JENNY_CHECK_NULL(sMethod_drawableCircle_0);

            sMethod_drawableGetBounds_0 = env->GetStaticMethodID(sClazz, "drawableGetBounds", "(Landroid/graphics/drawable/Drawable;)Landroid/graphics/Rect;");
            JENNY_CHECK_NULL(sMethod_drawableGetBounds_0);

            sMethod_setColor_0 = env->GetStaticMethodID(sClazz, "setColor", "(Landroid/graphics/Paint;I)V");
            JENNY_CHECK_NULL(sMethod_setColor_0);


            sField_INSTANCE_0 = env->GetStaticFieldID(sClazz, "INSTANCE", "Lio/github/landerlyoung/jennysampleapp/Graphics;");
            JENNY_CHECK_NULL(sField_INSTANCE_0);


            sInited = true;
        }
    }
#undef JENNY_CHECK_NULL
   return true;
}

/*static*/ void GraphicsProxy::releaseClazz(JNIEnv* env) {
    if (sInited) {
        std::lock_guard<std::mutex> lg(sInitLock);
        if (sInited) {
            env->DeleteGlobalRef(sClazz);
            sClazz = nullptr;
            sInited = false;
        }
    }
}

jmethodID GraphicsProxy::sConstruct_0;

jmethodID GraphicsProxy::sMethod_newPaint_0;
jmethodID GraphicsProxy::sMethod_paintSetStyle_0;
jmethodID GraphicsProxy::sMethod_drawableCircle_0;
jmethodID GraphicsProxy::sMethod_drawableGetBounds_0;
jmethodID GraphicsProxy::sMethod_setColor_0;

jfieldID GraphicsProxy::sField_INSTANCE_0;

} // endof namespace jenny
