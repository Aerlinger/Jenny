/**
 * File generated by Jenny -- https://github.com/LanderlYoung/Jenny
 *
 * DO NOT EDIT THIS FILE.
 *
 * For bug report, please refer to github issue tracker https://github.com/LanderlYoung/Jenny/issues.
 */
#pragma once

#include <jni.h>
#include <assert.h>                        
#include <atomic>
#include <mutex>

namespace java {
class URLConnectionProxy {

public:
    static constexpr auto FULL_CLASS_NAME = "java/net/URLConnection";



private:

    JNIEnv* mJniEnv;
    jobject mJavaObjectReference;

public:

    static bool initClazz(JNIEnv* env);
    
    static void releaseClazz(JNIEnv* env);

    static void assertInited(JNIEnv* env) {
        auto initClazzSuccess = initClazz(env);
        assert(initClazzSuccess);
    }

    URLConnectionProxy(): URLConnectionProxy(nullptr, nullptr) {}
    
    URLConnectionProxy(JNIEnv* env, jobject javaObj)
            : mJniEnv(env), mJavaObjectReference(javaObj) {
        if (env) { assertInited(env); }
    }

    URLConnectionProxy(const URLConnectionProxy& from) = default;
    URLConnectionProxy &operator=(const URLConnectionProxy &) = default;

    URLConnectionProxy(URLConnectionProxy&& from) noexcept
           : mJniEnv(from.mJniEnv), mJavaObjectReference(from.mJavaObjectReference) {
        from.mJavaObjectReference = nullptr;
    }
    
    URLConnectionProxy& operator=(URLConnectionProxy&& from) noexcept {
       mJniEnv = from.mJniEnv;
       std::swap(mJavaObjectReference, from.mJavaObjectReference);
       return *this;
   }

    ~URLConnectionProxy() = default;
    
    // helper method to get underlay jobject reference
    jobject operator*() const {
       return mJavaObjectReference;
    }
    
    // helper method to check underlay jobject reference is not nullptr
    operator bool() const {
       return mJavaObjectReference;
    }
    
    // helper method to delete JNI local ref.
    // use only when you really understand JNIEnv::DeleteLocalRef.
    void deleteLocalRef() {
       if (mJavaObjectReference) {
           mJniEnv->DeleteLocalRef(mJavaObjectReference);
           mJavaObjectReference = nullptr;
       }
    }
    
    // === java methods below ===
    

    // method: public static synchronized java.net.FileNameMap getFileNameMap()
    static jobject getFileNameMap(JNIEnv* env) {
        assertInited(env);
        return env->CallStaticObjectMethod(getClassInitState().sClazz, getClassInitState().sMethod_getFileNameMap_0);
    }

    // method: public static void setFileNameMap(java.net.FileNameMap map)
    static void setFileNameMap(JNIEnv* env, jobject map) {
        assertInited(env);
        env->CallStaticVoidMethod(getClassInitState().sClazz, getClassInitState().sMethod_setFileNameMap_0, map);
    }

    // method: public abstract void connect()
    void connect() const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, getClassInitState().sMethod_connect_0);
    }

    // method: public void setConnectTimeout(int timeout)
    void setConnectTimeout(jint timeout) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, getClassInitState().sMethod_setConnectTimeout_0, timeout);
    }

    // method: public int getConnectTimeout()
    jint getConnectTimeout() const {
        return mJniEnv->CallIntMethod(mJavaObjectReference, getClassInitState().sMethod_getConnectTimeout_0);
    }

    // method: public void setReadTimeout(int timeout)
    void setReadTimeout(jint timeout) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, getClassInitState().sMethod_setReadTimeout_0, timeout);
    }

    // method: public int getReadTimeout()
    jint getReadTimeout() const {
        return mJniEnv->CallIntMethod(mJavaObjectReference, getClassInitState().sMethod_getReadTimeout_0);
    }

    // method: public java.net.URL getURL()
    jobject getURL() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, getClassInitState().sMethod_getURL_0);
    }

    // method: public int getContentLength()
    jint getContentLength() const {
        return mJniEnv->CallIntMethod(mJavaObjectReference, getClassInitState().sMethod_getContentLength_0);
    }

    // method: public long getContentLengthLong()
    jlong getContentLengthLong() const {
        return mJniEnv->CallLongMethod(mJavaObjectReference, getClassInitState().sMethod_getContentLengthLong_0);
    }

    // method: public java.lang.String getContentType()
    jstring getContentType() const {
        return reinterpret_cast<jstring>(mJniEnv->CallObjectMethod(mJavaObjectReference, getClassInitState().sMethod_getContentType_0));
    }

    // method: public java.lang.String getContentEncoding()
    jstring getContentEncoding() const {
        return reinterpret_cast<jstring>(mJniEnv->CallObjectMethod(mJavaObjectReference, getClassInitState().sMethod_getContentEncoding_0));
    }

    // method: public long getExpiration()
    jlong getExpiration() const {
        return mJniEnv->CallLongMethod(mJavaObjectReference, getClassInitState().sMethod_getExpiration_0);
    }

    // method: public long getDate()
    jlong getDate() const {
        return mJniEnv->CallLongMethod(mJavaObjectReference, getClassInitState().sMethod_getDate_0);
    }

    // method: public long getLastModified()
    jlong getLastModified() const {
        return mJniEnv->CallLongMethod(mJavaObjectReference, getClassInitState().sMethod_getLastModified_0);
    }

    // method: public java.lang.String getHeaderField(java.lang.String name)
    jstring getHeaderField(jstring name) const {
        return reinterpret_cast<jstring>(mJniEnv->CallObjectMethod(mJavaObjectReference, getClassInitState().sMethod_getHeaderField_0, name));
    }

    // method: public java.lang.String getHeaderField(int n)
    jstring getHeaderField(jint n) const {
        return reinterpret_cast<jstring>(mJniEnv->CallObjectMethod(mJavaObjectReference, getClassInitState().sMethod_getHeaderField_1, n));
    }

    // method: public java.util.Map<java.lang.String,java.util.List<java.lang.String>> getHeaderFields()
    jobject getHeaderFields() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, getClassInitState().sMethod_getHeaderFields_0);
    }

    // method: public int getHeaderFieldInt(java.lang.String name, int Default)
    jint getHeaderFieldInt(jstring name, jint Default) const {
        return mJniEnv->CallIntMethod(mJavaObjectReference, getClassInitState().sMethod_getHeaderFieldInt_0, name, Default);
    }

    // method: public long getHeaderFieldLong(java.lang.String name, long Default)
    jlong getHeaderFieldLong(jstring name, jlong Default) const {
        return mJniEnv->CallLongMethod(mJavaObjectReference, getClassInitState().sMethod_getHeaderFieldLong_0, name, Default);
    }

    // method: public long getHeaderFieldDate(java.lang.String name, long Default)
    jlong getHeaderFieldDate(jstring name, jlong Default) const {
        return mJniEnv->CallLongMethod(mJavaObjectReference, getClassInitState().sMethod_getHeaderFieldDate_0, name, Default);
    }

    // method: public java.lang.String getHeaderFieldKey(int n)
    jstring getHeaderFieldKey(jint n) const {
        return reinterpret_cast<jstring>(mJniEnv->CallObjectMethod(mJavaObjectReference, getClassInitState().sMethod_getHeaderFieldKey_0, n));
    }

    // method: public java.lang.Object getContent()
    jobject getContent() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, getClassInitState().sMethod_getContent_0);
    }

    // method: public java.lang.Object getContent(java.lang.Class[] classes)
    jobject getContent(jobjectArray classes) const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, getClassInitState().sMethod_getContent_1, classes);
    }

    // method: public java.security.Permission getPermission()
    jobject getPermission() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, getClassInitState().sMethod_getPermission_0);
    }

    // method: public java.io.InputStream getInputStream()
    jobject getInputStream() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, getClassInitState().sMethod_getInputStream_0);
    }

    // method: public java.io.OutputStream getOutputStream()
    jobject getOutputStream() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, getClassInitState().sMethod_getOutputStream_0);
    }

    // method: public java.lang.String toString()
    jstring toString() const {
        return reinterpret_cast<jstring>(mJniEnv->CallObjectMethod(mJavaObjectReference, getClassInitState().sMethod_toString_0));
    }

    // method: public void setDoInput(boolean doinput)
    void setDoInput(jboolean doinput) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, getClassInitState().sMethod_setDoInput_0, doinput);
    }

    // method: public boolean getDoInput()
    jboolean getDoInput() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, getClassInitState().sMethod_getDoInput_0);
    }

    // method: public void setDoOutput(boolean dooutput)
    void setDoOutput(jboolean dooutput) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, getClassInitState().sMethod_setDoOutput_0, dooutput);
    }

    // method: public boolean getDoOutput()
    jboolean getDoOutput() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, getClassInitState().sMethod_getDoOutput_0);
    }

    // method: public void setAllowUserInteraction(boolean allowuserinteraction)
    void setAllowUserInteraction(jboolean allowuserinteraction) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, getClassInitState().sMethod_setAllowUserInteraction_0, allowuserinteraction);
    }

    // method: public boolean getAllowUserInteraction()
    jboolean getAllowUserInteraction() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, getClassInitState().sMethod_getAllowUserInteraction_0);
    }

    // method: public static void setDefaultAllowUserInteraction(boolean defaultallowuserinteraction)
    static void setDefaultAllowUserInteraction(JNIEnv* env, jboolean defaultallowuserinteraction) {
        assertInited(env);
        env->CallStaticVoidMethod(getClassInitState().sClazz, getClassInitState().sMethod_setDefaultAllowUserInteraction_0, defaultallowuserinteraction);
    }

    // method: public static boolean getDefaultAllowUserInteraction()
    static jboolean getDefaultAllowUserInteraction(JNIEnv* env) {
        assertInited(env);
        return env->CallStaticBooleanMethod(getClassInitState().sClazz, getClassInitState().sMethod_getDefaultAllowUserInteraction_0);
    }

    // method: public void setUseCaches(boolean usecaches)
    void setUseCaches(jboolean usecaches) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, getClassInitState().sMethod_setUseCaches_0, usecaches);
    }

    // method: public boolean getUseCaches()
    jboolean getUseCaches() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, getClassInitState().sMethod_getUseCaches_0);
    }

    // method: public void setIfModifiedSince(long ifmodifiedsince)
    void setIfModifiedSince(jlong ifmodifiedsince) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, getClassInitState().sMethod_setIfModifiedSince_0, ifmodifiedsince);
    }

    // method: public long getIfModifiedSince()
    jlong getIfModifiedSince() const {
        return mJniEnv->CallLongMethod(mJavaObjectReference, getClassInitState().sMethod_getIfModifiedSince_0);
    }

    // method: public boolean getDefaultUseCaches()
    jboolean getDefaultUseCaches() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, getClassInitState().sMethod_getDefaultUseCaches_0);
    }

    // method: public void setDefaultUseCaches(boolean defaultusecaches)
    void setDefaultUseCaches(jboolean defaultusecaches) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, getClassInitState().sMethod_setDefaultUseCaches_0, defaultusecaches);
    }

    // method: public void setRequestProperty(java.lang.String key, java.lang.String value)
    void setRequestProperty(jstring key, jstring value) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, getClassInitState().sMethod_setRequestProperty_0, key, value);
    }

    // method: public void addRequestProperty(java.lang.String key, java.lang.String value)
    void addRequestProperty(jstring key, jstring value) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, getClassInitState().sMethod_addRequestProperty_0, key, value);
    }

    // method: public java.lang.String getRequestProperty(java.lang.String key)
    jstring getRequestProperty(jstring key) const {
        return reinterpret_cast<jstring>(mJniEnv->CallObjectMethod(mJavaObjectReference, getClassInitState().sMethod_getRequestProperty_0, key));
    }

    // method: public java.util.Map<java.lang.String,java.util.List<java.lang.String>> getRequestProperties()
    jobject getRequestProperties() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, getClassInitState().sMethod_getRequestProperties_0);
    }

    // method: public static void setDefaultRequestProperty(java.lang.String key, java.lang.String value)
    static void setDefaultRequestProperty(JNIEnv* env, jstring key, jstring value) {
        assertInited(env);
        env->CallStaticVoidMethod(getClassInitState().sClazz, getClassInitState().sMethod_setDefaultRequestProperty_0, key, value);
    }

    // method: public static java.lang.String getDefaultRequestProperty(java.lang.String key)
    static jstring getDefaultRequestProperty(JNIEnv* env, jstring key) {
        assertInited(env);
        return reinterpret_cast<jstring>(env->CallStaticObjectMethod(getClassInitState().sClazz, getClassInitState().sMethod_getDefaultRequestProperty_0, key));
    }

    // method: public static synchronized void setContentHandlerFactory(java.net.ContentHandlerFactory fac)
    static void setContentHandlerFactory(JNIEnv* env, jobject fac) {
        assertInited(env);
        env->CallStaticVoidMethod(getClassInitState().sClazz, getClassInitState().sMethod_setContentHandlerFactory_0, fac);
    }

    // method: public static java.lang.String guessContentTypeFromName(java.lang.String fname)
    static jstring guessContentTypeFromName(JNIEnv* env, jstring fname) {
        assertInited(env);
        return reinterpret_cast<jstring>(env->CallStaticObjectMethod(getClassInitState().sClazz, getClassInitState().sMethod_guessContentTypeFromName_0, fname));
    }

    // method: public static java.lang.String guessContentTypeFromStream(java.io.InputStream is)
    static jstring guessContentTypeFromStream(JNIEnv* env, jobject is) {
        assertInited(env);
        return reinterpret_cast<jstring>(env->CallStaticObjectMethod(getClassInitState().sClazz, getClassInitState().sMethod_guessContentTypeFromStream_0, is));
    }



private:
    struct ClassInitState {
    // thread safe init
    std::atomic_bool sInited {};
    std::mutex sInitLock {};

    jclass sClazz = nullptr;

    jmethodID sMethod_getFileNameMap_0 = nullptr;
    jmethodID sMethod_setFileNameMap_0 = nullptr;
    jmethodID sMethod_connect_0 = nullptr;
    jmethodID sMethod_setConnectTimeout_0 = nullptr;
    jmethodID sMethod_getConnectTimeout_0 = nullptr;
    jmethodID sMethod_setReadTimeout_0 = nullptr;
    jmethodID sMethod_getReadTimeout_0 = nullptr;
    jmethodID sMethod_getURL_0 = nullptr;
    jmethodID sMethod_getContentLength_0 = nullptr;
    jmethodID sMethod_getContentLengthLong_0 = nullptr;
    jmethodID sMethod_getContentType_0 = nullptr;
    jmethodID sMethod_getContentEncoding_0 = nullptr;
    jmethodID sMethod_getExpiration_0 = nullptr;
    jmethodID sMethod_getDate_0 = nullptr;
    jmethodID sMethod_getLastModified_0 = nullptr;
    jmethodID sMethod_getHeaderField_0 = nullptr;
    jmethodID sMethod_getHeaderField_1 = nullptr;
    jmethodID sMethod_getHeaderFields_0 = nullptr;
    jmethodID sMethod_getHeaderFieldInt_0 = nullptr;
    jmethodID sMethod_getHeaderFieldLong_0 = nullptr;
    jmethodID sMethod_getHeaderFieldDate_0 = nullptr;
    jmethodID sMethod_getHeaderFieldKey_0 = nullptr;
    jmethodID sMethod_getContent_0 = nullptr;
    jmethodID sMethod_getContent_1 = nullptr;
    jmethodID sMethod_getPermission_0 = nullptr;
    jmethodID sMethod_getInputStream_0 = nullptr;
    jmethodID sMethod_getOutputStream_0 = nullptr;
    jmethodID sMethod_toString_0 = nullptr;
    jmethodID sMethod_setDoInput_0 = nullptr;
    jmethodID sMethod_getDoInput_0 = nullptr;
    jmethodID sMethod_setDoOutput_0 = nullptr;
    jmethodID sMethod_getDoOutput_0 = nullptr;
    jmethodID sMethod_setAllowUserInteraction_0 = nullptr;
    jmethodID sMethod_getAllowUserInteraction_0 = nullptr;
    jmethodID sMethod_setDefaultAllowUserInteraction_0 = nullptr;
    jmethodID sMethod_getDefaultAllowUserInteraction_0 = nullptr;
    jmethodID sMethod_setUseCaches_0 = nullptr;
    jmethodID sMethod_getUseCaches_0 = nullptr;
    jmethodID sMethod_setIfModifiedSince_0 = nullptr;
    jmethodID sMethod_getIfModifiedSince_0 = nullptr;
    jmethodID sMethod_getDefaultUseCaches_0 = nullptr;
    jmethodID sMethod_setDefaultUseCaches_0 = nullptr;
    jmethodID sMethod_setRequestProperty_0 = nullptr;
    jmethodID sMethod_addRequestProperty_0 = nullptr;
    jmethodID sMethod_getRequestProperty_0 = nullptr;
    jmethodID sMethod_getRequestProperties_0 = nullptr;
    jmethodID sMethod_setDefaultRequestProperty_0 = nullptr;
    jmethodID sMethod_getDefaultRequestProperty_0 = nullptr;
    jmethodID sMethod_setContentHandlerFactory_0 = nullptr;
    jmethodID sMethod_guessContentTypeFromName_0 = nullptr;
    jmethodID sMethod_guessContentTypeFromStream_0 = nullptr;


   }; // endof struct ClassInitState

   template <typename T = void>
   static ClassInitState& getClassInitState() {
       static ClassInitState classInitState;
       return classInitState;
   }

};
} // endof namespace java




// external logger function passed by jenny.errorLoggerFunction
void jennySampleErrorLog(JNIEnv* env, const char* error);

namespace java {

/*static*/ inline bool URLConnectionProxy::initClazz(JNIEnv* env) {
#define JENNY_CHECK_NULL(val)                      \
       do {                                        \
           if ((val) == nullptr) {                 \
               jennySampleErrorLog(env, "can't init URLConnectionProxy::" #val); \
               return false;                       \
           }                                       \
       } while(false)

    auto& state = getClassInitState();
    if (!state.sInited) {
        std::lock_guard<std::mutex> lg(state.sInitLock);
        if (!state.sInited) {
            auto clazz = env->FindClass(FULL_CLASS_NAME);
            JENNY_CHECK_NULL(clazz);
            state.sClazz = reinterpret_cast<jclass>(env->NewGlobalRef(clazz));
            env->DeleteLocalRef(clazz);
            JENNY_CHECK_NULL(state.sClazz);


            state.sMethod_getFileNameMap_0 = env->GetStaticMethodID(state.sClazz, "getFileNameMap", "()Ljava/net/FileNameMap;");
            JENNY_CHECK_NULL(state.sMethod_getFileNameMap_0);

            state.sMethod_setFileNameMap_0 = env->GetStaticMethodID(state.sClazz, "setFileNameMap", "(Ljava/net/FileNameMap;)V");
            JENNY_CHECK_NULL(state.sMethod_setFileNameMap_0);

            state.sMethod_connect_0 = env->GetMethodID(state.sClazz, "connect", "()V");
            JENNY_CHECK_NULL(state.sMethod_connect_0);

            state.sMethod_setConnectTimeout_0 = env->GetMethodID(state.sClazz, "setConnectTimeout", "(I)V");
            JENNY_CHECK_NULL(state.sMethod_setConnectTimeout_0);

            state.sMethod_getConnectTimeout_0 = env->GetMethodID(state.sClazz, "getConnectTimeout", "()I");
            JENNY_CHECK_NULL(state.sMethod_getConnectTimeout_0);

            state.sMethod_setReadTimeout_0 = env->GetMethodID(state.sClazz, "setReadTimeout", "(I)V");
            JENNY_CHECK_NULL(state.sMethod_setReadTimeout_0);

            state.sMethod_getReadTimeout_0 = env->GetMethodID(state.sClazz, "getReadTimeout", "()I");
            JENNY_CHECK_NULL(state.sMethod_getReadTimeout_0);

            state.sMethod_getURL_0 = env->GetMethodID(state.sClazz, "getURL", "()Ljava/net/URL;");
            JENNY_CHECK_NULL(state.sMethod_getURL_0);

            state.sMethod_getContentLength_0 = env->GetMethodID(state.sClazz, "getContentLength", "()I");
            JENNY_CHECK_NULL(state.sMethod_getContentLength_0);

            state.sMethod_getContentLengthLong_0 = env->GetMethodID(state.sClazz, "getContentLengthLong", "()J");
            JENNY_CHECK_NULL(state.sMethod_getContentLengthLong_0);

            state.sMethod_getContentType_0 = env->GetMethodID(state.sClazz, "getContentType", "()Ljava/lang/String;");
            JENNY_CHECK_NULL(state.sMethod_getContentType_0);

            state.sMethod_getContentEncoding_0 = env->GetMethodID(state.sClazz, "getContentEncoding", "()Ljava/lang/String;");
            JENNY_CHECK_NULL(state.sMethod_getContentEncoding_0);

            state.sMethod_getExpiration_0 = env->GetMethodID(state.sClazz, "getExpiration", "()J");
            JENNY_CHECK_NULL(state.sMethod_getExpiration_0);

            state.sMethod_getDate_0 = env->GetMethodID(state.sClazz, "getDate", "()J");
            JENNY_CHECK_NULL(state.sMethod_getDate_0);

            state.sMethod_getLastModified_0 = env->GetMethodID(state.sClazz, "getLastModified", "()J");
            JENNY_CHECK_NULL(state.sMethod_getLastModified_0);

            state.sMethod_getHeaderField_0 = env->GetMethodID(state.sClazz, "getHeaderField", "(Ljava/lang/String;)Ljava/lang/String;");
            JENNY_CHECK_NULL(state.sMethod_getHeaderField_0);

            state.sMethod_getHeaderField_1 = env->GetMethodID(state.sClazz, "getHeaderField", "(I)Ljava/lang/String;");
            JENNY_CHECK_NULL(state.sMethod_getHeaderField_1);

            state.sMethod_getHeaderFields_0 = env->GetMethodID(state.sClazz, "getHeaderFields", "()Ljava/util/Map;");
            JENNY_CHECK_NULL(state.sMethod_getHeaderFields_0);

            state.sMethod_getHeaderFieldInt_0 = env->GetMethodID(state.sClazz, "getHeaderFieldInt", "(Ljava/lang/String;I)I");
            JENNY_CHECK_NULL(state.sMethod_getHeaderFieldInt_0);

            state.sMethod_getHeaderFieldLong_0 = env->GetMethodID(state.sClazz, "getHeaderFieldLong", "(Ljava/lang/String;J)J");
            JENNY_CHECK_NULL(state.sMethod_getHeaderFieldLong_0);

            state.sMethod_getHeaderFieldDate_0 = env->GetMethodID(state.sClazz, "getHeaderFieldDate", "(Ljava/lang/String;J)J");
            JENNY_CHECK_NULL(state.sMethod_getHeaderFieldDate_0);

            state.sMethod_getHeaderFieldKey_0 = env->GetMethodID(state.sClazz, "getHeaderFieldKey", "(I)Ljava/lang/String;");
            JENNY_CHECK_NULL(state.sMethod_getHeaderFieldKey_0);

            state.sMethod_getContent_0 = env->GetMethodID(state.sClazz, "getContent", "()Ljava/lang/Object;");
            JENNY_CHECK_NULL(state.sMethod_getContent_0);

            state.sMethod_getContent_1 = env->GetMethodID(state.sClazz, "getContent", "([Ljava/lang/Class;)Ljava/lang/Object;");
            JENNY_CHECK_NULL(state.sMethod_getContent_1);

            state.sMethod_getPermission_0 = env->GetMethodID(state.sClazz, "getPermission", "()Ljava/security/Permission;");
            JENNY_CHECK_NULL(state.sMethod_getPermission_0);

            state.sMethod_getInputStream_0 = env->GetMethodID(state.sClazz, "getInputStream", "()Ljava/io/InputStream;");
            JENNY_CHECK_NULL(state.sMethod_getInputStream_0);

            state.sMethod_getOutputStream_0 = env->GetMethodID(state.sClazz, "getOutputStream", "()Ljava/io/OutputStream;");
            JENNY_CHECK_NULL(state.sMethod_getOutputStream_0);

            state.sMethod_toString_0 = env->GetMethodID(state.sClazz, "toString", "()Ljava/lang/String;");
            JENNY_CHECK_NULL(state.sMethod_toString_0);

            state.sMethod_setDoInput_0 = env->GetMethodID(state.sClazz, "setDoInput", "(Z)V");
            JENNY_CHECK_NULL(state.sMethod_setDoInput_0);

            state.sMethod_getDoInput_0 = env->GetMethodID(state.sClazz, "getDoInput", "()Z");
            JENNY_CHECK_NULL(state.sMethod_getDoInput_0);

            state.sMethod_setDoOutput_0 = env->GetMethodID(state.sClazz, "setDoOutput", "(Z)V");
            JENNY_CHECK_NULL(state.sMethod_setDoOutput_0);

            state.sMethod_getDoOutput_0 = env->GetMethodID(state.sClazz, "getDoOutput", "()Z");
            JENNY_CHECK_NULL(state.sMethod_getDoOutput_0);

            state.sMethod_setAllowUserInteraction_0 = env->GetMethodID(state.sClazz, "setAllowUserInteraction", "(Z)V");
            JENNY_CHECK_NULL(state.sMethod_setAllowUserInteraction_0);

            state.sMethod_getAllowUserInteraction_0 = env->GetMethodID(state.sClazz, "getAllowUserInteraction", "()Z");
            JENNY_CHECK_NULL(state.sMethod_getAllowUserInteraction_0);

            state.sMethod_setDefaultAllowUserInteraction_0 = env->GetStaticMethodID(state.sClazz, "setDefaultAllowUserInteraction", "(Z)V");
            JENNY_CHECK_NULL(state.sMethod_setDefaultAllowUserInteraction_0);

            state.sMethod_getDefaultAllowUserInteraction_0 = env->GetStaticMethodID(state.sClazz, "getDefaultAllowUserInteraction", "()Z");
            JENNY_CHECK_NULL(state.sMethod_getDefaultAllowUserInteraction_0);

            state.sMethod_setUseCaches_0 = env->GetMethodID(state.sClazz, "setUseCaches", "(Z)V");
            JENNY_CHECK_NULL(state.sMethod_setUseCaches_0);

            state.sMethod_getUseCaches_0 = env->GetMethodID(state.sClazz, "getUseCaches", "()Z");
            JENNY_CHECK_NULL(state.sMethod_getUseCaches_0);

            state.sMethod_setIfModifiedSince_0 = env->GetMethodID(state.sClazz, "setIfModifiedSince", "(J)V");
            JENNY_CHECK_NULL(state.sMethod_setIfModifiedSince_0);

            state.sMethod_getIfModifiedSince_0 = env->GetMethodID(state.sClazz, "getIfModifiedSince", "()J");
            JENNY_CHECK_NULL(state.sMethod_getIfModifiedSince_0);

            state.sMethod_getDefaultUseCaches_0 = env->GetMethodID(state.sClazz, "getDefaultUseCaches", "()Z");
            JENNY_CHECK_NULL(state.sMethod_getDefaultUseCaches_0);

            state.sMethod_setDefaultUseCaches_0 = env->GetMethodID(state.sClazz, "setDefaultUseCaches", "(Z)V");
            JENNY_CHECK_NULL(state.sMethod_setDefaultUseCaches_0);

            state.sMethod_setRequestProperty_0 = env->GetMethodID(state.sClazz, "setRequestProperty", "(Ljava/lang/String;Ljava/lang/String;)V");
            JENNY_CHECK_NULL(state.sMethod_setRequestProperty_0);

            state.sMethod_addRequestProperty_0 = env->GetMethodID(state.sClazz, "addRequestProperty", "(Ljava/lang/String;Ljava/lang/String;)V");
            JENNY_CHECK_NULL(state.sMethod_addRequestProperty_0);

            state.sMethod_getRequestProperty_0 = env->GetMethodID(state.sClazz, "getRequestProperty", "(Ljava/lang/String;)Ljava/lang/String;");
            JENNY_CHECK_NULL(state.sMethod_getRequestProperty_0);

            state.sMethod_getRequestProperties_0 = env->GetMethodID(state.sClazz, "getRequestProperties", "()Ljava/util/Map;");
            JENNY_CHECK_NULL(state.sMethod_getRequestProperties_0);

            state.sMethod_setDefaultRequestProperty_0 = env->GetStaticMethodID(state.sClazz, "setDefaultRequestProperty", "(Ljava/lang/String;Ljava/lang/String;)V");
            JENNY_CHECK_NULL(state.sMethod_setDefaultRequestProperty_0);

            state.sMethod_getDefaultRequestProperty_0 = env->GetStaticMethodID(state.sClazz, "getDefaultRequestProperty", "(Ljava/lang/String;)Ljava/lang/String;");
            JENNY_CHECK_NULL(state.sMethod_getDefaultRequestProperty_0);

            state.sMethod_setContentHandlerFactory_0 = env->GetStaticMethodID(state.sClazz, "setContentHandlerFactory", "(Ljava/net/ContentHandlerFactory;)V");
            JENNY_CHECK_NULL(state.sMethod_setContentHandlerFactory_0);

            state.sMethod_guessContentTypeFromName_0 = env->GetStaticMethodID(state.sClazz, "guessContentTypeFromName", "(Ljava/lang/String;)Ljava/lang/String;");
            JENNY_CHECK_NULL(state.sMethod_guessContentTypeFromName_0);

            state.sMethod_guessContentTypeFromStream_0 = env->GetStaticMethodID(state.sClazz, "guessContentTypeFromStream", "(Ljava/io/InputStream;)Ljava/lang/String;");
            JENNY_CHECK_NULL(state.sMethod_guessContentTypeFromStream_0);



            state.sInited = true;
        }
    }
#undef JENNY_CHECK_NULL
   return true;
}

/*static*/ inline void URLConnectionProxy::releaseClazz(JNIEnv* env) {
    auto& state = getClassInitState();
    if (state.sInited) {
        std::lock_guard<std::mutex> lg(state.sInitLock);
        if (state.sInited) {
            env->DeleteGlobalRef(state.sClazz);
            state.sClazz = nullptr;
            state.sInited = false;
        }
    }
}


} // endof namespace java
