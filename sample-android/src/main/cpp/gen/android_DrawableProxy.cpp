/**
 * File generated by Jenny -- https://github.com/LanderlYoung/Jenny
 *
 * DO NOT EDIT THIS FILE.
 *
 * For bug report, please refer to github issue tracker https://github.com/LanderlYoung/Jenny/issues,
 * or contact author landerlyoung@gmail.com.
 */
#include "android_DrawableProxy.h"


// external logger function passed by jenny.errorLoggerFunction
void jennySampleErrorLog(const char* error);


namespace android {

jclass DrawableProxy::sClazz = nullptr;

// thread safe init
std::mutex DrawableProxy::sInitLock;
std::atomic_bool DrawableProxy::sInited;

/*static*/ bool DrawableProxy::initClazz(JNIEnv *env) {
#define JENNY_CHECK_NULL(val)                      \
       do {                                        \
           if ((val) == nullptr) {                 \
                jennySampleErrorLog("can't init DrawableProxy::" #val); \
               env->ExceptionDescribe();           \
               return false;                       \
           }                                       \
       } while(false)

    if (!sInited) {
        std::lock_guard<std::mutex> lg(sInitLock);
        if (!sInited) {
            auto clazz = env->FindClass(FULL_CLASS_NAME);
            JENNY_CHECK_NULL(clazz);
            sClazz = reinterpret_cast<jclass>(env->NewGlobalRef(clazz));
            env->DeleteLocalRef(clazz);
            JENNY_CHECK_NULL(sClazz);

            sConstruct_0 = env->GetMethodID(sClazz, "<init>", "()V");
            JENNY_CHECK_NULL(sConstruct_0);


            sMethod_draw_0 = env->GetMethodID(sClazz, "draw", "(Landroid/graphics/Canvas;)V");
            JENNY_CHECK_NULL(sMethod_draw_0);

            sMethod_setBounds_0 = env->GetMethodID(sClazz, "setBounds", "(IIII)V");
            JENNY_CHECK_NULL(sMethod_setBounds_0);

            sMethod_setBounds_1 = env->GetMethodID(sClazz, "setBounds", "(Landroid/graphics/Rect;)V");
            JENNY_CHECK_NULL(sMethod_setBounds_1);

            sMethod_copyBounds_0 = env->GetMethodID(sClazz, "copyBounds", "(Landroid/graphics/Rect;)V");
            JENNY_CHECK_NULL(sMethod_copyBounds_0);

            sMethod_copyBounds_1 = env->GetMethodID(sClazz, "copyBounds", "()Landroid/graphics/Rect;");
            JENNY_CHECK_NULL(sMethod_copyBounds_1);

            sMethod_getBounds_0 = env->GetMethodID(sClazz, "getBounds", "()Landroid/graphics/Rect;");
            JENNY_CHECK_NULL(sMethod_getBounds_0);

            sMethod_getDirtyBounds_0 = env->GetMethodID(sClazz, "getDirtyBounds", "()Landroid/graphics/Rect;");
            JENNY_CHECK_NULL(sMethod_getDirtyBounds_0);

            sMethod_setChangingConfigurations_0 = env->GetMethodID(sClazz, "setChangingConfigurations", "(I)V");
            JENNY_CHECK_NULL(sMethod_setChangingConfigurations_0);

            sMethod_getChangingConfigurations_0 = env->GetMethodID(sClazz, "getChangingConfigurations", "()I");
            JENNY_CHECK_NULL(sMethod_getChangingConfigurations_0);

            sMethod_setDither_0 = env->GetMethodID(sClazz, "setDither", "(Z)V");
            JENNY_CHECK_NULL(sMethod_setDither_0);

            sMethod_setFilterBitmap_0 = env->GetMethodID(sClazz, "setFilterBitmap", "(Z)V");
            JENNY_CHECK_NULL(sMethod_setFilterBitmap_0);

            sMethod_isFilterBitmap_0 = env->GetMethodID(sClazz, "isFilterBitmap", "()Z");
            JENNY_CHECK_NULL(sMethod_isFilterBitmap_0);

            sMethod_setCallback_0 = env->GetMethodID(sClazz, "setCallback", "(Landroid/graphics/drawable/Drawable$Callback;)V");
            JENNY_CHECK_NULL(sMethod_setCallback_0);

            sMethod_getCallback_0 = env->GetMethodID(sClazz, "getCallback", "()Landroid/graphics/drawable/Drawable$Callback;");
            JENNY_CHECK_NULL(sMethod_getCallback_0);

            sMethod_invalidateSelf_0 = env->GetMethodID(sClazz, "invalidateSelf", "()V");
            JENNY_CHECK_NULL(sMethod_invalidateSelf_0);

            sMethod_scheduleSelf_0 = env->GetMethodID(sClazz, "scheduleSelf", "(Ljava/lang/Runnable;J)V");
            JENNY_CHECK_NULL(sMethod_scheduleSelf_0);

            sMethod_unscheduleSelf_0 = env->GetMethodID(sClazz, "unscheduleSelf", "(Ljava/lang/Runnable;)V");
            JENNY_CHECK_NULL(sMethod_unscheduleSelf_0);

            sMethod_getLayoutDirection_0 = env->GetMethodID(sClazz, "getLayoutDirection", "()I");
            JENNY_CHECK_NULL(sMethod_getLayoutDirection_0);

            sMethod_setLayoutDirection_0 = env->GetMethodID(sClazz, "setLayoutDirection", "(I)Z");
            JENNY_CHECK_NULL(sMethod_setLayoutDirection_0);

            sMethod_onLayoutDirectionChanged_0 = env->GetMethodID(sClazz, "onLayoutDirectionChanged", "(I)Z");
            JENNY_CHECK_NULL(sMethod_onLayoutDirectionChanged_0);

            sMethod_setAlpha_0 = env->GetMethodID(sClazz, "setAlpha", "(I)V");
            JENNY_CHECK_NULL(sMethod_setAlpha_0);

            sMethod_getAlpha_0 = env->GetMethodID(sClazz, "getAlpha", "()I");
            JENNY_CHECK_NULL(sMethod_getAlpha_0);

            sMethod_setColorFilter_0 = env->GetMethodID(sClazz, "setColorFilter", "(Landroid/graphics/ColorFilter;)V");
            JENNY_CHECK_NULL(sMethod_setColorFilter_0);

            sMethod_setColorFilter_1 = env->GetMethodID(sClazz, "setColorFilter", "(ILandroid/graphics/PorterDuff$Mode;)V");
            JENNY_CHECK_NULL(sMethod_setColorFilter_1);

            sMethod_setTint_0 = env->GetMethodID(sClazz, "setTint", "(I)V");
            JENNY_CHECK_NULL(sMethod_setTint_0);

            sMethod_setTintList_0 = env->GetMethodID(sClazz, "setTintList", "(Landroid/content/res/ColorStateList;)V");
            JENNY_CHECK_NULL(sMethod_setTintList_0);

            sMethod_setTintMode_0 = env->GetMethodID(sClazz, "setTintMode", "(Landroid/graphics/PorterDuff$Mode;)V");
            JENNY_CHECK_NULL(sMethod_setTintMode_0);

            sMethod_getColorFilter_0 = env->GetMethodID(sClazz, "getColorFilter", "()Landroid/graphics/ColorFilter;");
            JENNY_CHECK_NULL(sMethod_getColorFilter_0);

            sMethod_clearColorFilter_0 = env->GetMethodID(sClazz, "clearColorFilter", "()V");
            JENNY_CHECK_NULL(sMethod_clearColorFilter_0);

            sMethod_setHotspot_0 = env->GetMethodID(sClazz, "setHotspot", "(FF)V");
            JENNY_CHECK_NULL(sMethod_setHotspot_0);

            sMethod_setHotspotBounds_0 = env->GetMethodID(sClazz, "setHotspotBounds", "(IIII)V");
            JENNY_CHECK_NULL(sMethod_setHotspotBounds_0);

            sMethod_getHotspotBounds_0 = env->GetMethodID(sClazz, "getHotspotBounds", "(Landroid/graphics/Rect;)V");
            JENNY_CHECK_NULL(sMethod_getHotspotBounds_0);

            sMethod_isStateful_0 = env->GetMethodID(sClazz, "isStateful", "()Z");
            JENNY_CHECK_NULL(sMethod_isStateful_0);

            sMethod_setState_0 = env->GetMethodID(sClazz, "setState", "([I)Z");
            JENNY_CHECK_NULL(sMethod_setState_0);

            sMethod_getState_0 = env->GetMethodID(sClazz, "getState", "()[I");
            JENNY_CHECK_NULL(sMethod_getState_0);

            sMethod_jumpToCurrentState_0 = env->GetMethodID(sClazz, "jumpToCurrentState", "()V");
            JENNY_CHECK_NULL(sMethod_jumpToCurrentState_0);

            sMethod_getCurrent_0 = env->GetMethodID(sClazz, "getCurrent", "()Landroid/graphics/drawable/Drawable;");
            JENNY_CHECK_NULL(sMethod_getCurrent_0);

            sMethod_setLevel_0 = env->GetMethodID(sClazz, "setLevel", "(I)Z");
            JENNY_CHECK_NULL(sMethod_setLevel_0);

            sMethod_getLevel_0 = env->GetMethodID(sClazz, "getLevel", "()I");
            JENNY_CHECK_NULL(sMethod_getLevel_0);

            sMethod_setVisible_0 = env->GetMethodID(sClazz, "setVisible", "(ZZ)Z");
            JENNY_CHECK_NULL(sMethod_setVisible_0);

            sMethod_isVisible_0 = env->GetMethodID(sClazz, "isVisible", "()Z");
            JENNY_CHECK_NULL(sMethod_isVisible_0);

            sMethod_setAutoMirrored_0 = env->GetMethodID(sClazz, "setAutoMirrored", "(Z)V");
            JENNY_CHECK_NULL(sMethod_setAutoMirrored_0);

            sMethod_isAutoMirrored_0 = env->GetMethodID(sClazz, "isAutoMirrored", "()Z");
            JENNY_CHECK_NULL(sMethod_isAutoMirrored_0);

            sMethod_applyTheme_0 = env->GetMethodID(sClazz, "applyTheme", "(Landroid/content/res/Resources$Theme;)V");
            JENNY_CHECK_NULL(sMethod_applyTheme_0);

            sMethod_canApplyTheme_0 = env->GetMethodID(sClazz, "canApplyTheme", "()Z");
            JENNY_CHECK_NULL(sMethod_canApplyTheme_0);

            sMethod_getOpacity_0 = env->GetMethodID(sClazz, "getOpacity", "()I");
            JENNY_CHECK_NULL(sMethod_getOpacity_0);

            sMethod_resolveOpacity_0 = env->GetStaticMethodID(sClazz, "resolveOpacity", "(II)I");
            JENNY_CHECK_NULL(sMethod_resolveOpacity_0);

            sMethod_getTransparentRegion_0 = env->GetMethodID(sClazz, "getTransparentRegion", "()Landroid/graphics/Region;");
            JENNY_CHECK_NULL(sMethod_getTransparentRegion_0);

            sMethod_onStateChange_0 = env->GetMethodID(sClazz, "onStateChange", "([I)Z");
            JENNY_CHECK_NULL(sMethod_onStateChange_0);

            sMethod_onLevelChange_0 = env->GetMethodID(sClazz, "onLevelChange", "(I)Z");
            JENNY_CHECK_NULL(sMethod_onLevelChange_0);

            sMethod_onBoundsChange_0 = env->GetMethodID(sClazz, "onBoundsChange", "(Landroid/graphics/Rect;)V");
            JENNY_CHECK_NULL(sMethod_onBoundsChange_0);

            sMethod_getIntrinsicWidth_0 = env->GetMethodID(sClazz, "getIntrinsicWidth", "()I");
            JENNY_CHECK_NULL(sMethod_getIntrinsicWidth_0);

            sMethod_getIntrinsicHeight_0 = env->GetMethodID(sClazz, "getIntrinsicHeight", "()I");
            JENNY_CHECK_NULL(sMethod_getIntrinsicHeight_0);

            sMethod_getMinimumWidth_0 = env->GetMethodID(sClazz, "getMinimumWidth", "()I");
            JENNY_CHECK_NULL(sMethod_getMinimumWidth_0);

            sMethod_getMinimumHeight_0 = env->GetMethodID(sClazz, "getMinimumHeight", "()I");
            JENNY_CHECK_NULL(sMethod_getMinimumHeight_0);

            sMethod_getPadding_0 = env->GetMethodID(sClazz, "getPadding", "(Landroid/graphics/Rect;)Z");
            JENNY_CHECK_NULL(sMethod_getPadding_0);

            sMethod_getOutline_0 = env->GetMethodID(sClazz, "getOutline", "(Landroid/graphics/Outline;)V");
            JENNY_CHECK_NULL(sMethod_getOutline_0);

            sMethod_mutate_0 = env->GetMethodID(sClazz, "mutate", "()Landroid/graphics/drawable/Drawable;");
            JENNY_CHECK_NULL(sMethod_mutate_0);

            sMethod_createFromStream_0 = env->GetStaticMethodID(sClazz, "createFromStream", "(Ljava/io/InputStream;Ljava/lang/String;)Landroid/graphics/drawable/Drawable;");
            JENNY_CHECK_NULL(sMethod_createFromStream_0);

            sMethod_createFromResourceStream_0 = env->GetStaticMethodID(sClazz, "createFromResourceStream", "(Landroid/content/res/Resources;Landroid/util/TypedValue;Ljava/io/InputStream;Ljava/lang/String;)Landroid/graphics/drawable/Drawable;");
            JENNY_CHECK_NULL(sMethod_createFromResourceStream_0);

            sMethod_createFromResourceStream_1 = env->GetStaticMethodID(sClazz, "createFromResourceStream", "(Landroid/content/res/Resources;Landroid/util/TypedValue;Ljava/io/InputStream;Ljava/lang/String;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/drawable/Drawable;");
            JENNY_CHECK_NULL(sMethod_createFromResourceStream_1);

            sMethod_createFromXml_0 = env->GetStaticMethodID(sClazz, "createFromXml", "(Landroid/content/res/Resources;Lorg/xmlpull/v1/XmlPullParser;)Landroid/graphics/drawable/Drawable;");
            JENNY_CHECK_NULL(sMethod_createFromXml_0);

            sMethod_createFromXml_1 = env->GetStaticMethodID(sClazz, "createFromXml", "(Landroid/content/res/Resources;Lorg/xmlpull/v1/XmlPullParser;Landroid/content/res/Resources$Theme;)Landroid/graphics/drawable/Drawable;");
            JENNY_CHECK_NULL(sMethod_createFromXml_1);

            sMethod_createFromXmlInner_0 = env->GetStaticMethodID(sClazz, "createFromXmlInner", "(Landroid/content/res/Resources;Lorg/xmlpull/v1/XmlPullParser;Landroid/util/AttributeSet;)Landroid/graphics/drawable/Drawable;");
            JENNY_CHECK_NULL(sMethod_createFromXmlInner_0);

            sMethod_createFromXmlInner_1 = env->GetStaticMethodID(sClazz, "createFromXmlInner", "(Landroid/content/res/Resources;Lorg/xmlpull/v1/XmlPullParser;Landroid/util/AttributeSet;Landroid/content/res/Resources$Theme;)Landroid/graphics/drawable/Drawable;");
            JENNY_CHECK_NULL(sMethod_createFromXmlInner_1);

            sMethod_createFromPath_0 = env->GetStaticMethodID(sClazz, "createFromPath", "(Ljava/lang/String;)Landroid/graphics/drawable/Drawable;");
            JENNY_CHECK_NULL(sMethod_createFromPath_0);

            sMethod_inflate_0 = env->GetMethodID(sClazz, "inflate", "(Landroid/content/res/Resources;Lorg/xmlpull/v1/XmlPullParser;Landroid/util/AttributeSet;)V");
            JENNY_CHECK_NULL(sMethod_inflate_0);

            sMethod_inflate_1 = env->GetMethodID(sClazz, "inflate", "(Landroid/content/res/Resources;Lorg/xmlpull/v1/XmlPullParser;Landroid/util/AttributeSet;Landroid/content/res/Resources$Theme;)V");
            JENNY_CHECK_NULL(sMethod_inflate_1);

            sMethod_getConstantState_0 = env->GetMethodID(sClazz, "getConstantState", "()Landroid/graphics/drawable/Drawable$ConstantState;");
            JENNY_CHECK_NULL(sMethod_getConstantState_0);



            sInited = true;
        }
    }
#undef JENNY_CHECK_NULL
   return true;
}

/*static*/ void DrawableProxy::releaseClazz(JNIEnv *env) {
    if (sInited) {
        std::lock_guard<std::mutex> lg(sInitLock);
        if (sInited) {
            env->DeleteLocalRef(sClazz);
            sInited = false;
        }
    }
}

jmethodID DrawableProxy::sConstruct_0;

jmethodID DrawableProxy::sMethod_draw_0;
jmethodID DrawableProxy::sMethod_setBounds_0;
jmethodID DrawableProxy::sMethod_setBounds_1;
jmethodID DrawableProxy::sMethod_copyBounds_0;
jmethodID DrawableProxy::sMethod_copyBounds_1;
jmethodID DrawableProxy::sMethod_getBounds_0;
jmethodID DrawableProxy::sMethod_getDirtyBounds_0;
jmethodID DrawableProxy::sMethod_setChangingConfigurations_0;
jmethodID DrawableProxy::sMethod_getChangingConfigurations_0;
jmethodID DrawableProxy::sMethod_setDither_0;
jmethodID DrawableProxy::sMethod_setFilterBitmap_0;
jmethodID DrawableProxy::sMethod_isFilterBitmap_0;
jmethodID DrawableProxy::sMethod_setCallback_0;
jmethodID DrawableProxy::sMethod_getCallback_0;
jmethodID DrawableProxy::sMethod_invalidateSelf_0;
jmethodID DrawableProxy::sMethod_scheduleSelf_0;
jmethodID DrawableProxy::sMethod_unscheduleSelf_0;
jmethodID DrawableProxy::sMethod_getLayoutDirection_0;
jmethodID DrawableProxy::sMethod_setLayoutDirection_0;
jmethodID DrawableProxy::sMethod_onLayoutDirectionChanged_0;
jmethodID DrawableProxy::sMethod_setAlpha_0;
jmethodID DrawableProxy::sMethod_getAlpha_0;
jmethodID DrawableProxy::sMethod_setColorFilter_0;
jmethodID DrawableProxy::sMethod_setColorFilter_1;
jmethodID DrawableProxy::sMethod_setTint_0;
jmethodID DrawableProxy::sMethod_setTintList_0;
jmethodID DrawableProxy::sMethod_setTintMode_0;
jmethodID DrawableProxy::sMethod_getColorFilter_0;
jmethodID DrawableProxy::sMethod_clearColorFilter_0;
jmethodID DrawableProxy::sMethod_setHotspot_0;
jmethodID DrawableProxy::sMethod_setHotspotBounds_0;
jmethodID DrawableProxy::sMethod_getHotspotBounds_0;
jmethodID DrawableProxy::sMethod_isStateful_0;
jmethodID DrawableProxy::sMethod_setState_0;
jmethodID DrawableProxy::sMethod_getState_0;
jmethodID DrawableProxy::sMethod_jumpToCurrentState_0;
jmethodID DrawableProxy::sMethod_getCurrent_0;
jmethodID DrawableProxy::sMethod_setLevel_0;
jmethodID DrawableProxy::sMethod_getLevel_0;
jmethodID DrawableProxy::sMethod_setVisible_0;
jmethodID DrawableProxy::sMethod_isVisible_0;
jmethodID DrawableProxy::sMethod_setAutoMirrored_0;
jmethodID DrawableProxy::sMethod_isAutoMirrored_0;
jmethodID DrawableProxy::sMethod_applyTheme_0;
jmethodID DrawableProxy::sMethod_canApplyTheme_0;
jmethodID DrawableProxy::sMethod_getOpacity_0;
jmethodID DrawableProxy::sMethod_resolveOpacity_0;
jmethodID DrawableProxy::sMethod_getTransparentRegion_0;
jmethodID DrawableProxy::sMethod_onStateChange_0;
jmethodID DrawableProxy::sMethod_onLevelChange_0;
jmethodID DrawableProxy::sMethod_onBoundsChange_0;
jmethodID DrawableProxy::sMethod_getIntrinsicWidth_0;
jmethodID DrawableProxy::sMethod_getIntrinsicHeight_0;
jmethodID DrawableProxy::sMethod_getMinimumWidth_0;
jmethodID DrawableProxy::sMethod_getMinimumHeight_0;
jmethodID DrawableProxy::sMethod_getPadding_0;
jmethodID DrawableProxy::sMethod_getOutline_0;
jmethodID DrawableProxy::sMethod_mutate_0;
jmethodID DrawableProxy::sMethod_createFromStream_0;
jmethodID DrawableProxy::sMethod_createFromResourceStream_0;
jmethodID DrawableProxy::sMethod_createFromResourceStream_1;
jmethodID DrawableProxy::sMethod_createFromXml_0;
jmethodID DrawableProxy::sMethod_createFromXml_1;
jmethodID DrawableProxy::sMethod_createFromXmlInner_0;
jmethodID DrawableProxy::sMethod_createFromXmlInner_1;
jmethodID DrawableProxy::sMethod_createFromPath_0;
jmethodID DrawableProxy::sMethod_inflate_0;
jmethodID DrawableProxy::sMethod_inflate_1;
jmethodID DrawableProxy::sMethod_getConstantState_0;


} // endof namespace android
