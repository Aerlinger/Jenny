/**
 * File generated by Jenny -- https://github.com/LanderlYoung/Jenny
 *
 * DO NOT EDIT THIS FILE.
 *
 * For bug report, please refer to github issue tracker https://github.com/LanderlYoung/Jenny/issues.
 */
#pragma once

#include <jni.h>
#include <assert.h>                        
#include <atomic>
#include <mutex>


class GenericProxy {

public:
    static constexpr auto FULL_CLASS_NAME = "io/github/landerlyoung/jennysampleapp/Generic";



private:

    JNIEnv* mJniEnv;
    jobject mJavaObjectReference;

public:

    static bool initClazz(JNIEnv* env);
    
    static void releaseClazz(JNIEnv* env);

    static void assertInited(JNIEnv* env) {
        auto initClazzSuccess = initClazz(env);
        assert(initClazzSuccess);
    }

    GenericProxy(): GenericProxy(nullptr, nullptr) {}
    
    GenericProxy(JNIEnv* env, jobject javaObj)
            : mJniEnv(env), mJavaObjectReference(javaObj) {
        if (env) { assertInited(env); }
    }

    GenericProxy(const GenericProxy& from) = default;
    GenericProxy &operator=(const GenericProxy &) = default;

    GenericProxy(GenericProxy&& from) noexcept
           : mJniEnv(from.mJniEnv), mJavaObjectReference(from.mJavaObjectReference) {
        from.mJavaObjectReference = nullptr;
    }
    
    GenericProxy& operator=(GenericProxy&& from) noexcept {
       mJniEnv = from.mJniEnv;
       std::swap(mJavaObjectReference, from.mJavaObjectReference);
       return *this;
   }

    ~GenericProxy() = default;
    
    // helper method to get underlay jobject reference
    jobject operator*() const {
       return mJavaObjectReference;
    }
    
    // helper method to check underlay jobject reference is not nullptr
    operator bool() const {
       return mJavaObjectReference;
    }
    
    // helper method to delete JNI local ref.
    // use only when you really understand JNIEnv::DeleteLocalRef.
    void deleteLocalRef() {
       if (mJavaObjectReference) {
           mJniEnv->DeleteLocalRef(mJavaObjectReference);
           mJavaObjectReference = nullptr;
       }
    }
    
    // === java methods below ===
    
    // construct: public Generic()
    static GenericProxy newInstance(JNIEnv* env) noexcept {
       assertInited(env);
       return GenericProxy(env, env->NewObject(getClassInitState().sClazz, getClassInitState().sConstruct_0));
    } 
    

    // method: public final T getAndRet(T t)
    jobject getAndRet(jobject t) const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, getClassInitState().sMethod_getAndRet_0, t);
    }

    // method: public final void genericParam(R r)
    void genericParam__Ljava_lang_Object_2(jobject r) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, getClassInitState().sMethod_genericParam_0, r);
    }

    // method: public final void genericParam(io.github.landerlyoung.jennysampleapp.Generic<java.lang.Runnable> t)
    void genericParam__Lio_github_landerlyoung_jennysampleapp_Generic_2(jobject t) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, getClassInitState().sMethod_genericParam_1, t);
    }

    // method: public final void genericParamMultiUpperBounds(R r)
    void genericParamMultiUpperBounds(jobject r) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, getClassInitState().sMethod_genericParamMultiUpperBounds_0, r);
    }

    // method: public final void genericParam2(io.github.landerlyoung.jennysampleapp.Generic<java.util.concurrent.FutureTask<java.lang.Object>> t)
    void genericParam2(jobject t) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, getClassInitState().sMethod_genericParam2_0, t);
    }

    // method: public final void genericParam3(io.github.landerlyoung.jennysampleapp.Generic<R> t)
    void genericParam3(jobject t) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, getClassInitState().sMethod_genericParam3_0, t);
    }

    // method: public final void genericParam4(java.util.Collection<? extends java.lang.Runnable> t)
    void genericParam4(jobject t) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, getClassInitState().sMethod_genericParam4_0, t);
    }

    // method: public final void array(int[] ia)
    void array(jintArray ia) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, getClassInitState().sMethod_array_0, ia);
    }

    // method: public final void array(int[][] ia)
    void array(jobjectArray ia) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, getClassInitState().sMethod_array_1, ia);
    }



private:
    struct ClassInitState {
    // thread safe init
    std::atomic_bool sInited {};
    std::mutex sInitLock {};

    jclass sClazz = nullptr;
    jmethodID sConstruct_0 = nullptr;

    jmethodID sMethod_getAndRet_0 = nullptr;
    jmethodID sMethod_genericParam_0 = nullptr;
    jmethodID sMethod_genericParam_1 = nullptr;
    jmethodID sMethod_genericParamMultiUpperBounds_0 = nullptr;
    jmethodID sMethod_genericParam2_0 = nullptr;
    jmethodID sMethod_genericParam3_0 = nullptr;
    jmethodID sMethod_genericParam4_0 = nullptr;
    jmethodID sMethod_array_0 = nullptr;
    jmethodID sMethod_array_1 = nullptr;


   }; // endof struct ClassInitState

   template <typename T = void>
   static ClassInitState& getClassInitState() {
       static ClassInitState classInitState;
       return classInitState;
   }

};





// external logger function passed by jenny.errorLoggerFunction
void jennySampleErrorLog(JNIEnv* env, const char* error);



/*static*/ inline bool GenericProxy::initClazz(JNIEnv* env) {
#define JENNY_CHECK_NULL(val)                      \
       do {                                        \
           if ((val) == nullptr) {                 \
               jennySampleErrorLog(env, "can't init GenericProxy::" #val); \
               return false;                       \
           }                                       \
       } while(false)

    auto& state = getClassInitState();
    if (!state.sInited) {
        std::lock_guard<std::mutex> lg(state.sInitLock);
        if (!state.sInited) {
            auto clazz = env->FindClass(FULL_CLASS_NAME);
            JENNY_CHECK_NULL(clazz);
            state.sClazz = reinterpret_cast<jclass>(env->NewGlobalRef(clazz));
            env->DeleteLocalRef(clazz);
            JENNY_CHECK_NULL(state.sClazz);

            state.sConstruct_0 = env->GetMethodID(state.sClazz, "<init>", "()V");
            JENNY_CHECK_NULL(state.sConstruct_0);


            state.sMethod_getAndRet_0 = env->GetMethodID(state.sClazz, "getAndRet", "(Ljava/lang/Runnable;)Ljava/lang/Runnable;");
            JENNY_CHECK_NULL(state.sMethod_getAndRet_0);

            state.sMethod_genericParam_0 = env->GetMethodID(state.sClazz, "genericParam", "(Ljava/lang/Object;)V");
            JENNY_CHECK_NULL(state.sMethod_genericParam_0);

            state.sMethod_genericParam_1 = env->GetMethodID(state.sClazz, "genericParam", "(Lio/github/landerlyoung/jennysampleapp/Generic;)V");
            JENNY_CHECK_NULL(state.sMethod_genericParam_1);

            state.sMethod_genericParamMultiUpperBounds_0 = env->GetMethodID(state.sClazz, "genericParamMultiUpperBounds", "(Ljava/lang/Runnable;)V");
            JENNY_CHECK_NULL(state.sMethod_genericParamMultiUpperBounds_0);

            state.sMethod_genericParam2_0 = env->GetMethodID(state.sClazz, "genericParam2", "(Lio/github/landerlyoung/jennysampleapp/Generic;)V");
            JENNY_CHECK_NULL(state.sMethod_genericParam2_0);

            state.sMethod_genericParam3_0 = env->GetMethodID(state.sClazz, "genericParam3", "(Lio/github/landerlyoung/jennysampleapp/Generic;)V");
            JENNY_CHECK_NULL(state.sMethod_genericParam3_0);

            state.sMethod_genericParam4_0 = env->GetMethodID(state.sClazz, "genericParam4", "(Ljava/util/Collection;)V");
            JENNY_CHECK_NULL(state.sMethod_genericParam4_0);

            state.sMethod_array_0 = env->GetMethodID(state.sClazz, "array", "([I)V");
            JENNY_CHECK_NULL(state.sMethod_array_0);

            state.sMethod_array_1 = env->GetMethodID(state.sClazz, "array", "([[I)V");
            JENNY_CHECK_NULL(state.sMethod_array_1);



            state.sInited = true;
        }
    }
#undef JENNY_CHECK_NULL
   return true;
}

/*static*/ inline void GenericProxy::releaseClazz(JNIEnv* env) {
    auto& state = getClassInitState();
    if (state.sInited) {
        std::lock_guard<std::mutex> lg(state.sInitLock);
        if (state.sInited) {
            env->DeleteGlobalRef(state.sClazz);
            state.sClazz = nullptr;
            state.sInited = false;
        }
    }
}



