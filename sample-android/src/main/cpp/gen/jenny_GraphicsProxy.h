/**
 * File generated by Jenny -- https://github.com/LanderlYoung/Jenny
 *
 * DO NOT EDIT THIS FILE.
 *
 * For bug report, please refer to github issue tracker https://github.com/LanderlYoung/Jenny/issues,
 * or contact author landerlyoung@gmail.com.
 */
#pragma once

#include <jni.h>
#include <assert.h>                        
#include <atomic>
#include <mutex>

namespace jenny {
class GraphicsProxy {

public:
    static constexpr auto FULL_CLASS_NAME = "io/github/landerlyoung/jennysampleapp/Graphics";



private:
    // thread safe init
    static std::atomic_bool sInited;
    static std::mutex sInitLock;

    JNIEnv* mJniEnv;
    jobject mJavaObjectReference;

public:

    static bool initClazz(JNIEnv *env);
    
    static void releaseClazz(JNIEnv *env);

    static void assertInited(JNIEnv *env) {
        auto initClazzSuccess = initClazz(env);
        assert(initClazzSuccess);
    }

    GraphicsProxy(JNIEnv *env, jobject javaObj)
            : mJniEnv(env), mJavaObjectReference(javaObj) {
        assertInited(env);
    }

    GraphicsProxy(const GraphicsProxy &from) = default;
    GraphicsProxy &operator=(const GraphicsProxy &) = default;

    GraphicsProxy(GraphicsProxy &&from)
           : mJniEnv(from.mJniEnv), mJavaObjectReference(from.mJavaObjectReference) {
        from.mJavaObjectReference = nullptr;
    }

    ~GraphicsProxy() = default;
    
    // helper method to get underlay jobject reference
    jobject operator*() {
       return mJavaObjectReference;
    }
    
    // helper method to delete JNI local ref.
    // use only when you really understand JNIEnv::DeleteLocalRef.
    void deleteLocalRef() {
       if (mJavaObjectReference) {
           mJniEnv->DeleteLocalRef(mJavaObjectReference);
           mJavaObjectReference = nullptr;
       }
    }
    
    // === java methods below ===
    
    // construct: private Graphics()
    static GraphicsProxy newInstance(JNIEnv* env) noexcept {
       assertInited(env);
       return GraphicsProxy(env, env->NewObject(sClazz, sConstruct_0));
    } 
    

    // method: public static final android.graphics.Paint newPaint()
    static jobject newPaint(JNIEnv* env) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_newPaint_0);
    }

    // method: public static final void paintSetStyle(android.graphics.Paint paint, android.graphics.Paint.Style style)
    static void paintSetStyle(JNIEnv* env, jobject paint, jobject style) {
        assertInited(env);
        env->CallStaticVoidMethod(sClazz, sMethod_paintSetStyle_0, paint, style);
    }

    // method: public static final void drawableCircle(android.graphics.Canvas canvas, float x, float y, float r, android.graphics.Paint paint)
    static void drawableCircle(JNIEnv* env, jobject canvas, jfloat x, jfloat y, jfloat r, jobject paint) {
        assertInited(env);
        env->CallStaticVoidMethod(sClazz, sMethod_drawableCircle_0, canvas, x, y, r, paint);
    }

    // method: public static final android.graphics.Rect drawableGetBounds(android.graphics.drawable.Drawable drawable)
    static jobject drawableGetBounds(JNIEnv* env, jobject drawable) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_drawableGetBounds_0, drawable);
    }

    // method: public static final void setColor(android.graphics.Paint paint, int color)
    static void setColor(JNIEnv* env, jobject paint, jint color) {
        assertInited(env);
        env->CallStaticVoidMethod(sClazz, sMethod_setColor_0, paint, color);
    }


    // field: public static final io.github.landerlyoung.jennysampleapp.Graphics INSTANCE
    static jobject getINSTANCE(JNIEnv* env) {
       assertInited(env);
       return env->GetStaticObjectField(sClazz, sField_INSTANCE_0);

    }

    // field: public static final io.github.landerlyoung.jennysampleapp.Graphics INSTANCE
    static void setINSTANCE(JNIEnv* env, jobject INSTANCE) {
        assertInited(env);
        env->SetStaticObjectField(sClazz, sField_INSTANCE_0, INSTANCE);
    }



private:
    static jclass sClazz;
    static jmethodID sConstruct_0;

    static jmethodID sMethod_newPaint_0;
    static jmethodID sMethod_paintSetStyle_0;
    static jmethodID sMethod_drawableCircle_0;
    static jmethodID sMethod_drawableGetBounds_0;
    static jmethodID sMethod_setColor_0;

    static jfieldID sField_INSTANCE_0;

};
} // endof namespace jenny
