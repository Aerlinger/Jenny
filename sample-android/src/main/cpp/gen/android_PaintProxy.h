/**
 * File generated by Jenny -- https://github.com/LanderlYoung/Jenny
 *
 * DO NOT EDIT THIS FILE.
 *
 * For bug report, please refer to github issue tracker https://github.com/LanderlYoung/Jenny/issues,
 * or contact author landerlyoung@gmail.com.
 */
#pragma once

#include <jni.h>
#include <assert.h>                        
#include <atomic>
#include <mutex>

namespace android {
class PaintProxy {

public:
    static constexpr auto FULL_CLASS_NAME = "android/graphics/Paint";

    static constexpr jint ANTI_ALIAS_FLAG = 1;
    static constexpr jint DEV_KERN_TEXT_FLAG = 256;
    static constexpr jint DITHER_FLAG = 4;
    static constexpr jint EMBEDDED_BITMAP_TEXT_FLAG = 1024;
    static constexpr jint FAKE_BOLD_TEXT_FLAG = 32;
    static constexpr jint FILTER_BITMAP_FLAG = 2;
    static constexpr jint HINTING_OFF = 0;
    static constexpr jint HINTING_ON = 1;
    static constexpr jint LINEAR_TEXT_FLAG = 64;
    static constexpr jint STRIKE_THRU_TEXT_FLAG = 16;
    static constexpr jint SUBPIXEL_TEXT_FLAG = 128;
    static constexpr jint UNDERLINE_TEXT_FLAG = 8;


private:
    // thread safe init
    static std::atomic_bool sInited;
    static std::mutex sInitLock;

    JNIEnv* mJniEnv;
    jobject mJavaObjectReference;

public:

    static bool initClazz(JNIEnv *env);
    
    static void releaseClazz(JNIEnv *env);

    static void assertInited(JNIEnv *env) {
        assert(initClazz(env));
    }

    PaintProxy(JNIEnv *env, jobject javaObj)
            : mJniEnv(env), mJavaObjectReference(javaObj) {
        assertInited(env);
    }

    PaintProxy(const PaintProxy &from) = default;
    PaintProxy &operator=(const PaintProxy &) = default;

    PaintProxy(PaintProxy &&from)
           : mJniEnv(from.mJniEnv), mJavaObjectReference(from.mJavaObjectReference) {
        from.mJavaObjectReference = nullptr;
    }

    ~PaintProxy() = default;
    
    // helper method to get underlay jobject reference
    jobject operator*() {
       return mJavaObjectReference;
    }
    
    // helper method to delete JNI local ref.
    // use only when you really understand JNIEnv::DeleteLocalRef.
    void deleteLocalRef() {
       if (mJavaObjectReference) {
           mJniEnv->DeleteLocalRef(mJavaObjectReference);
           mJavaObjectReference = nullptr;
       }
    }
    
    // === java methods below ===
    
    // construct: public Paint()
    static PaintProxy newInstance(JNIEnv* env) noexcept {
       assertInited(env);
       return PaintProxy(env, env->NewObject(sClazz, sConstruct_0));
    } 
    
    // construct: public Paint(int flags)
    static PaintProxy newInstance(JNIEnv* env, jint flags) noexcept {
       assertInited(env);
       return PaintProxy(env, env->NewObject(sClazz, sConstruct_1, flags));
    } 
    
    // construct: public Paint(android.graphics.Paint paint)
    static PaintProxy newInstance(JNIEnv* env, jobject paint) noexcept {
       assertInited(env);
       return PaintProxy(env, env->NewObject(sClazz, sConstruct_2, paint));
    } 
    

    // method: public void reset()
    void reset() const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_reset_0);
    }

    // method: public void set(android.graphics.Paint src)
    void set(jobject src) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_set_0, src);
    }

    // method: public int getFlags()
    jint getFlags() const {
        return mJniEnv->CallIntMethod(mJavaObjectReference, sMethod_getFlags_0);
    }

    // method: public void setFlags(int flags)
    void setFlags(jint flags) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setFlags_0, flags);
    }

    // method: public int getHinting()
    jint getHinting() const {
        return mJniEnv->CallIntMethod(mJavaObjectReference, sMethod_getHinting_0);
    }

    // method: public void setHinting(int mode)
    void setHinting(jint mode) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setHinting_0, mode);
    }

    // method: public final boolean isAntiAlias()
    jboolean isAntiAlias() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_isAntiAlias_0);
    }

    // method: public void setAntiAlias(boolean aa)
    void setAntiAlias(jboolean aa) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setAntiAlias_0, aa);
    }

    // method: public final boolean isDither()
    jboolean isDither() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_isDither_0);
    }

    // method: public void setDither(boolean dither)
    void setDither(jboolean dither) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setDither_0, dither);
    }

    // method: public final boolean isLinearText()
    jboolean isLinearText() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_isLinearText_0);
    }

    // method: public void setLinearText(boolean linearText)
    void setLinearText(jboolean linearText) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setLinearText_0, linearText);
    }

    // method: public final boolean isSubpixelText()
    jboolean isSubpixelText() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_isSubpixelText_0);
    }

    // method: public void setSubpixelText(boolean subpixelText)
    void setSubpixelText(jboolean subpixelText) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setSubpixelText_0, subpixelText);
    }

    // method: public final boolean isUnderlineText()
    jboolean isUnderlineText() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_isUnderlineText_0);
    }

    // method: public void setUnderlineText(boolean underlineText)
    void setUnderlineText(jboolean underlineText) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setUnderlineText_0, underlineText);
    }

    // method: public final boolean isStrikeThruText()
    jboolean isStrikeThruText() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_isStrikeThruText_0);
    }

    // method: public void setStrikeThruText(boolean strikeThruText)
    void setStrikeThruText(jboolean strikeThruText) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setStrikeThruText_0, strikeThruText);
    }

    // method: public final boolean isFakeBoldText()
    jboolean isFakeBoldText() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_isFakeBoldText_0);
    }

    // method: public void setFakeBoldText(boolean fakeBoldText)
    void setFakeBoldText(jboolean fakeBoldText) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setFakeBoldText_0, fakeBoldText);
    }

    // method: public final boolean isFilterBitmap()
    jboolean isFilterBitmap() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_isFilterBitmap_0);
    }

    // method: public void setFilterBitmap(boolean filter)
    void setFilterBitmap(jboolean filter) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setFilterBitmap_0, filter);
    }

    // method: public android.graphics.Paint.Style getStyle()
    jobject getStyle() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getStyle_0);
    }

    // method: public void setStyle(android.graphics.Paint.Style style)
    void setStyle(jobject style) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setStyle_0, style);
    }

    // method: public int getColor()
    jint getColor() const {
        return mJniEnv->CallIntMethod(mJavaObjectReference, sMethod_getColor_0);
    }

    // method: public void setColor(int color)
    void setColor(jint color) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setColor_0, color);
    }

    // method: public int getAlpha()
    jint getAlpha() const {
        return mJniEnv->CallIntMethod(mJavaObjectReference, sMethod_getAlpha_0);
    }

    // method: public void setAlpha(int a)
    void setAlpha(jint a) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setAlpha_0, a);
    }

    // method: public void setARGB(int a, int r, int g, int b)
    void setARGB(jint a, jint r, jint g, jint b) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setARGB_0, a, r, g, b);
    }

    // method: public float getStrokeWidth()
    jfloat getStrokeWidth() const {
        return mJniEnv->CallFloatMethod(mJavaObjectReference, sMethod_getStrokeWidth_0);
    }

    // method: public void setStrokeWidth(float width)
    void setStrokeWidth(jfloat width) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setStrokeWidth_0, width);
    }

    // method: public float getStrokeMiter()
    jfloat getStrokeMiter() const {
        return mJniEnv->CallFloatMethod(mJavaObjectReference, sMethod_getStrokeMiter_0);
    }

    // method: public void setStrokeMiter(float miter)
    void setStrokeMiter(jfloat miter) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setStrokeMiter_0, miter);
    }

    // method: public android.graphics.Paint.Cap getStrokeCap()
    jobject getStrokeCap() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getStrokeCap_0);
    }

    // method: public void setStrokeCap(android.graphics.Paint.Cap cap)
    void setStrokeCap(jobject cap) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setStrokeCap_0, cap);
    }

    // method: public android.graphics.Paint.Join getStrokeJoin()
    jobject getStrokeJoin() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getStrokeJoin_0);
    }

    // method: public void setStrokeJoin(android.graphics.Paint.Join join)
    void setStrokeJoin(jobject join) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setStrokeJoin_0, join);
    }

    // method: public boolean getFillPath(android.graphics.Path src, android.graphics.Path dst)
    jboolean getFillPath(jobject src, jobject dst) const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_getFillPath_0, src, dst);
    }

    // method: public android.graphics.Shader getShader()
    jobject getShader() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getShader_0);
    }

    // method: public android.graphics.Shader setShader(android.graphics.Shader shader)
    jobject setShader(jobject shader) const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_setShader_0, shader);
    }

    // method: public android.graphics.ColorFilter getColorFilter()
    jobject getColorFilter() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getColorFilter_0);
    }

    // method: public android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter filter)
    jobject setColorFilter(jobject filter) const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_setColorFilter_0, filter);
    }

    // method: public android.graphics.Xfermode getXfermode()
    jobject getXfermode() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getXfermode_0);
    }

    // method: public android.graphics.Xfermode setXfermode(android.graphics.Xfermode xfermode)
    jobject setXfermode(jobject xfermode) const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_setXfermode_0, xfermode);
    }

    // method: public android.graphics.PathEffect getPathEffect()
    jobject getPathEffect() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getPathEffect_0);
    }

    // method: public android.graphics.PathEffect setPathEffect(android.graphics.PathEffect effect)
    jobject setPathEffect(jobject effect) const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_setPathEffect_0, effect);
    }

    // method: public android.graphics.MaskFilter getMaskFilter()
    jobject getMaskFilter() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getMaskFilter_0);
    }

    // method: public android.graphics.MaskFilter setMaskFilter(android.graphics.MaskFilter maskfilter)
    jobject setMaskFilter(jobject maskfilter) const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_setMaskFilter_0, maskfilter);
    }

    // method: public android.graphics.Typeface getTypeface()
    jobject getTypeface() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getTypeface_0);
    }

    // method: public android.graphics.Typeface setTypeface(android.graphics.Typeface typeface)
    jobject setTypeface(jobject typeface) const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_setTypeface_0, typeface);
    }

    // method: public void setShadowLayer(float radius, float dx, float dy, int shadowColor)
    void setShadowLayer(jfloat radius, jfloat dx, jfloat dy, jint shadowColor) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setShadowLayer_0, radius, dx, dy, shadowColor);
    }

    // method: public void clearShadowLayer()
    void clearShadowLayer() const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_clearShadowLayer_0);
    }

    // method: public android.graphics.Paint.Align getTextAlign()
    jobject getTextAlign() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getTextAlign_0);
    }

    // method: public void setTextAlign(android.graphics.Paint.Align align)
    void setTextAlign(jobject align) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setTextAlign_0, align);
    }

    // method: public java.util.Locale getTextLocale()
    jobject getTextLocale() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getTextLocale_0);
    }

    // method: public android.os.LocaleList getTextLocales()
    jobject getTextLocales() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getTextLocales_0);
    }

    // method: public void setTextLocale(java.util.Locale locale)
    void setTextLocale(jobject locale) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setTextLocale_0, locale);
    }

    // method: public void setTextLocales(android.os.LocaleList locales)
    void setTextLocales(jobject locales) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setTextLocales_0, locales);
    }

    // method: public boolean isElegantTextHeight()
    jboolean isElegantTextHeight() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_isElegantTextHeight_0);
    }

    // method: public void setElegantTextHeight(boolean elegant)
    void setElegantTextHeight(jboolean elegant) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setElegantTextHeight_0, elegant);
    }

    // method: public float getTextSize()
    jfloat getTextSize() const {
        return mJniEnv->CallFloatMethod(mJavaObjectReference, sMethod_getTextSize_0);
    }

    // method: public void setTextSize(float textSize)
    void setTextSize(jfloat textSize) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setTextSize_0, textSize);
    }

    // method: public float getTextScaleX()
    jfloat getTextScaleX() const {
        return mJniEnv->CallFloatMethod(mJavaObjectReference, sMethod_getTextScaleX_0);
    }

    // method: public void setTextScaleX(float scaleX)
    void setTextScaleX(jfloat scaleX) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setTextScaleX_0, scaleX);
    }

    // method: public float getTextSkewX()
    jfloat getTextSkewX() const {
        return mJniEnv->CallFloatMethod(mJavaObjectReference, sMethod_getTextSkewX_0);
    }

    // method: public void setTextSkewX(float skewX)
    void setTextSkewX(jfloat skewX) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setTextSkewX_0, skewX);
    }

    // method: public float getLetterSpacing()
    jfloat getLetterSpacing() const {
        return mJniEnv->CallFloatMethod(mJavaObjectReference, sMethod_getLetterSpacing_0);
    }

    // method: public void setLetterSpacing(float letterSpacing)
    void setLetterSpacing(jfloat letterSpacing) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setLetterSpacing_0, letterSpacing);
    }

    // method: public java.lang.String getFontFeatureSettings()
    jstring getFontFeatureSettings() const {
        return reinterpret_cast<jstring>(mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getFontFeatureSettings_0));
    }

    // method: public void setFontFeatureSettings(java.lang.String settings)
    void setFontFeatureSettings(jstring settings) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_setFontFeatureSettings_0, settings);
    }

    // method: public java.lang.String getFontVariationSettings()
    jstring getFontVariationSettings() const {
        return reinterpret_cast<jstring>(mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getFontVariationSettings_0));
    }

    // method: public boolean setFontVariationSettings(java.lang.String fontVariationSettings)
    jboolean setFontVariationSettings(jstring fontVariationSettings) const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_setFontVariationSettings_0, fontVariationSettings);
    }

    // method: public float ascent()
    jfloat ascent() const {
        return mJniEnv->CallFloatMethod(mJavaObjectReference, sMethod_ascent_0);
    }

    // method: public float descent()
    jfloat descent() const {
        return mJniEnv->CallFloatMethod(mJavaObjectReference, sMethod_descent_0);
    }

    // method: public float getFontMetrics(android.graphics.Paint.FontMetrics metrics)
    jfloat getFontMetrics(jobject metrics) const {
        return mJniEnv->CallFloatMethod(mJavaObjectReference, sMethod_getFontMetrics_0, metrics);
    }

    // method: public android.graphics.Paint.FontMetrics getFontMetrics()
    jobject getFontMetrics() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getFontMetrics_1);
    }

    // method: public int getFontMetricsInt(android.graphics.Paint.FontMetricsInt fmi)
    jint getFontMetricsInt(jobject fmi) const {
        return mJniEnv->CallIntMethod(mJavaObjectReference, sMethod_getFontMetricsInt_0, fmi);
    }

    // method: public android.graphics.Paint.FontMetricsInt getFontMetricsInt()
    jobject getFontMetricsInt() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getFontMetricsInt_1);
    }

    // method: public float getFontSpacing()
    jfloat getFontSpacing() const {
        return mJniEnv->CallFloatMethod(mJavaObjectReference, sMethod_getFontSpacing_0);
    }

    // method: public float measureText(char[] text, int index, int count)
    jfloat measureText(jcharArray text, jint index, jint count) const {
        return mJniEnv->CallFloatMethod(mJavaObjectReference, sMethod_measureText_0, text, index, count);
    }

    // method: public float measureText(java.lang.String text, int start, int end)
    jfloat measureText(jstring text, jint start, jint end) const {
        return mJniEnv->CallFloatMethod(mJavaObjectReference, sMethod_measureText_1, text, start, end);
    }

    // method: public float measureText(java.lang.String text)
    jfloat measureText(jstring text) const {
        return mJniEnv->CallFloatMethod(mJavaObjectReference, sMethod_measureText_2, text);
    }

    // method: public float measureText(java.lang.CharSequence text, int start, int end)
    jfloat measureText(jobject text, jint start, jint end) const {
        return mJniEnv->CallFloatMethod(mJavaObjectReference, sMethod_measureText_3, text, start, end);
    }

    // method: public int breakText(char[] text, int index, int count, float maxWidth, float[] measuredWidth)
    jint breakText(jcharArray text, jint index, jint count, jfloat maxWidth, jfloatArray measuredWidth) const {
        return mJniEnv->CallIntMethod(mJavaObjectReference, sMethod_breakText_0, text, index, count, maxWidth, measuredWidth);
    }

    // method: public int breakText(java.lang.CharSequence text, int start, int end, boolean measureForwards, float maxWidth, float[] measuredWidth)
    jint breakText(jobject text, jint start, jint end, jboolean measureForwards, jfloat maxWidth, jfloatArray measuredWidth) const {
        return mJniEnv->CallIntMethod(mJavaObjectReference, sMethod_breakText_1, text, start, end, measureForwards, maxWidth, measuredWidth);
    }

    // method: public int breakText(java.lang.String text, boolean measureForwards, float maxWidth, float[] measuredWidth)
    jint breakText(jstring text, jboolean measureForwards, jfloat maxWidth, jfloatArray measuredWidth) const {
        return mJniEnv->CallIntMethod(mJavaObjectReference, sMethod_breakText_2, text, measureForwards, maxWidth, measuredWidth);
    }

    // method: public int getTextWidths(char[] text, int index, int count, float[] widths)
    jint getTextWidths(jcharArray text, jint index, jint count, jfloatArray widths) const {
        return mJniEnv->CallIntMethod(mJavaObjectReference, sMethod_getTextWidths_0, text, index, count, widths);
    }

    // method: public int getTextWidths(java.lang.CharSequence text, int start, int end, float[] widths)
    jint getTextWidths(jobject text, jint start, jint end, jfloatArray widths) const {
        return mJniEnv->CallIntMethod(mJavaObjectReference, sMethod_getTextWidths_1, text, start, end, widths);
    }

    // method: public int getTextWidths(java.lang.String text, int start, int end, float[] widths)
    jint getTextWidths(jstring text, jint start, jint end, jfloatArray widths) const {
        return mJniEnv->CallIntMethod(mJavaObjectReference, sMethod_getTextWidths_2, text, start, end, widths);
    }

    // method: public int getTextWidths(java.lang.String text, float[] widths)
    jint getTextWidths(jstring text, jfloatArray widths) const {
        return mJniEnv->CallIntMethod(mJavaObjectReference, sMethod_getTextWidths_3, text, widths);
    }

    // method: public void getTextPath(char[] text, int index, int count, float x, float y, android.graphics.Path path)
    void getTextPath(jcharArray text, jint index, jint count, jfloat x, jfloat y, jobject path) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_getTextPath_0, text, index, count, x, y, path);
    }

    // method: public void getTextPath(java.lang.String text, int start, int end, float x, float y, android.graphics.Path path)
    void getTextPath(jstring text, jint start, jint end, jfloat x, jfloat y, jobject path) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_getTextPath_1, text, start, end, x, y, path);
    }

    // method: public void getTextBounds(java.lang.String text, int start, int end, android.graphics.Rect bounds)
    void getTextBounds(jstring text, jint start, jint end, jobject bounds) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_getTextBounds_0, text, start, end, bounds);
    }

    // method: public void getTextBounds(char[] text, int index, int count, android.graphics.Rect bounds)
    void getTextBounds(jcharArray text, jint index, jint count, jobject bounds) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_getTextBounds_1, text, index, count, bounds);
    }

    // method: public boolean hasGlyph(java.lang.String string)
    jboolean hasGlyph(jstring string) const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_hasGlyph_0, string);
    }

    // method: public float getRunAdvance(char[] text, int start, int end, int contextStart, int contextEnd, boolean isRtl, int offset)
    jfloat getRunAdvance(jcharArray text, jint start, jint end, jint contextStart, jint contextEnd, jboolean isRtl, jint offset) const {
        return mJniEnv->CallFloatMethod(mJavaObjectReference, sMethod_getRunAdvance_0, text, start, end, contextStart, contextEnd, isRtl, offset);
    }

    // method: public float getRunAdvance(java.lang.CharSequence text, int start, int end, int contextStart, int contextEnd, boolean isRtl, int offset)
    jfloat getRunAdvance(jobject text, jint start, jint end, jint contextStart, jint contextEnd, jboolean isRtl, jint offset) const {
        return mJniEnv->CallFloatMethod(mJavaObjectReference, sMethod_getRunAdvance_1, text, start, end, contextStart, contextEnd, isRtl, offset);
    }

    // method: public int getOffsetForAdvance(char[] text, int start, int end, int contextStart, int contextEnd, boolean isRtl, float advance)
    jint getOffsetForAdvance(jcharArray text, jint start, jint end, jint contextStart, jint contextEnd, jboolean isRtl, jfloat advance) const {
        return mJniEnv->CallIntMethod(mJavaObjectReference, sMethod_getOffsetForAdvance_0, text, start, end, contextStart, contextEnd, isRtl, advance);
    }

    // method: public int getOffsetForAdvance(java.lang.CharSequence text, int start, int end, int contextStart, int contextEnd, boolean isRtl, float advance)
    jint getOffsetForAdvance(jobject text, jint start, jint end, jint contextStart, jint contextEnd, jboolean isRtl, jfloat advance) const {
        return mJniEnv->CallIntMethod(mJavaObjectReference, sMethod_getOffsetForAdvance_1, text, start, end, contextStart, contextEnd, isRtl, advance);
    }

    // method: public boolean equalsForTextMeasurement(android.graphics.Paint other)
    jboolean equalsForTextMeasurement(jobject other) const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_equalsForTextMeasurement_0, other);
    }



private:
    static jclass sClazz;
    static jmethodID sConstruct_0;
    static jmethodID sConstruct_1;
    static jmethodID sConstruct_2;

    static jmethodID sMethod_reset_0;
    static jmethodID sMethod_set_0;
    static jmethodID sMethod_getFlags_0;
    static jmethodID sMethod_setFlags_0;
    static jmethodID sMethod_getHinting_0;
    static jmethodID sMethod_setHinting_0;
    static jmethodID sMethod_isAntiAlias_0;
    static jmethodID sMethod_setAntiAlias_0;
    static jmethodID sMethod_isDither_0;
    static jmethodID sMethod_setDither_0;
    static jmethodID sMethod_isLinearText_0;
    static jmethodID sMethod_setLinearText_0;
    static jmethodID sMethod_isSubpixelText_0;
    static jmethodID sMethod_setSubpixelText_0;
    static jmethodID sMethod_isUnderlineText_0;
    static jmethodID sMethod_setUnderlineText_0;
    static jmethodID sMethod_isStrikeThruText_0;
    static jmethodID sMethod_setStrikeThruText_0;
    static jmethodID sMethod_isFakeBoldText_0;
    static jmethodID sMethod_setFakeBoldText_0;
    static jmethodID sMethod_isFilterBitmap_0;
    static jmethodID sMethod_setFilterBitmap_0;
    static jmethodID sMethod_getStyle_0;
    static jmethodID sMethod_setStyle_0;
    static jmethodID sMethod_getColor_0;
    static jmethodID sMethod_setColor_0;
    static jmethodID sMethod_getAlpha_0;
    static jmethodID sMethod_setAlpha_0;
    static jmethodID sMethod_setARGB_0;
    static jmethodID sMethod_getStrokeWidth_0;
    static jmethodID sMethod_setStrokeWidth_0;
    static jmethodID sMethod_getStrokeMiter_0;
    static jmethodID sMethod_setStrokeMiter_0;
    static jmethodID sMethod_getStrokeCap_0;
    static jmethodID sMethod_setStrokeCap_0;
    static jmethodID sMethod_getStrokeJoin_0;
    static jmethodID sMethod_setStrokeJoin_0;
    static jmethodID sMethod_getFillPath_0;
    static jmethodID sMethod_getShader_0;
    static jmethodID sMethod_setShader_0;
    static jmethodID sMethod_getColorFilter_0;
    static jmethodID sMethod_setColorFilter_0;
    static jmethodID sMethod_getXfermode_0;
    static jmethodID sMethod_setXfermode_0;
    static jmethodID sMethod_getPathEffect_0;
    static jmethodID sMethod_setPathEffect_0;
    static jmethodID sMethod_getMaskFilter_0;
    static jmethodID sMethod_setMaskFilter_0;
    static jmethodID sMethod_getTypeface_0;
    static jmethodID sMethod_setTypeface_0;
    static jmethodID sMethod_setShadowLayer_0;
    static jmethodID sMethod_clearShadowLayer_0;
    static jmethodID sMethod_getTextAlign_0;
    static jmethodID sMethod_setTextAlign_0;
    static jmethodID sMethod_getTextLocale_0;
    static jmethodID sMethod_getTextLocales_0;
    static jmethodID sMethod_setTextLocale_0;
    static jmethodID sMethod_setTextLocales_0;
    static jmethodID sMethod_isElegantTextHeight_0;
    static jmethodID sMethod_setElegantTextHeight_0;
    static jmethodID sMethod_getTextSize_0;
    static jmethodID sMethod_setTextSize_0;
    static jmethodID sMethod_getTextScaleX_0;
    static jmethodID sMethod_setTextScaleX_0;
    static jmethodID sMethod_getTextSkewX_0;
    static jmethodID sMethod_setTextSkewX_0;
    static jmethodID sMethod_getLetterSpacing_0;
    static jmethodID sMethod_setLetterSpacing_0;
    static jmethodID sMethod_getFontFeatureSettings_0;
    static jmethodID sMethod_setFontFeatureSettings_0;
    static jmethodID sMethod_getFontVariationSettings_0;
    static jmethodID sMethod_setFontVariationSettings_0;
    static jmethodID sMethod_ascent_0;
    static jmethodID sMethod_descent_0;
    static jmethodID sMethod_getFontMetrics_0;
    static jmethodID sMethod_getFontMetrics_1;
    static jmethodID sMethod_getFontMetricsInt_0;
    static jmethodID sMethod_getFontMetricsInt_1;
    static jmethodID sMethod_getFontSpacing_0;
    static jmethodID sMethod_measureText_0;
    static jmethodID sMethod_measureText_1;
    static jmethodID sMethod_measureText_2;
    static jmethodID sMethod_measureText_3;
    static jmethodID sMethod_breakText_0;
    static jmethodID sMethod_breakText_1;
    static jmethodID sMethod_breakText_2;
    static jmethodID sMethod_getTextWidths_0;
    static jmethodID sMethod_getTextWidths_1;
    static jmethodID sMethod_getTextWidths_2;
    static jmethodID sMethod_getTextWidths_3;
    static jmethodID sMethod_getTextPath_0;
    static jmethodID sMethod_getTextPath_1;
    static jmethodID sMethod_getTextBounds_0;
    static jmethodID sMethod_getTextBounds_1;
    static jmethodID sMethod_hasGlyph_0;
    static jmethodID sMethod_getRunAdvance_0;
    static jmethodID sMethod_getRunAdvance_1;
    static jmethodID sMethod_getOffsetForAdvance_0;
    static jmethodID sMethod_getOffsetForAdvance_1;
    static jmethodID sMethod_equalsForTextMeasurement_0;


};
} // endof namespace android
