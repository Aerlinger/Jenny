/**
 * File generated by Jenny -- https://github.com/LanderlYoung/Jenny
 *
 * DO NOT EDIT THIS FILE.
 *
 * For bug report, please refer to github issue tracker https://github.com/LanderlYoung/Jenny/issues,
 * or contact author landerlyoung@gmail.com.
 */
#include "CallbackProxy.h"


jclass CallbackProxy::sClazz = nullptr;

// thread safe init
std::mutex CallbackProxy::sInitLock;
std::atomic_bool CallbackProxy::sInited;

/*static*/ bool CallbackProxy::initClazz(JNIEnv *env) {
#define JENNY_CHECK_NULL(val)                      \
       do {                                        \
           if ((val) == nullptr) {                 \
               return false;                       \
           }                                       \
       } while(false)

    if (!sInited) {
        std::lock_guard<std::mutex> lg(sInitLock);
        if (!sInited) {
            auto clazz = env->FindClass(FULL_CLASS_NAME);
            JENNY_CHECK_NULL(clazz);
            sClazz = reinterpret_cast<jclass>(env->NewGlobalRef(clazz));
            env->DeleteLocalRef(clazz);
            JENNY_CHECK_NULL(sClazz);
            sConstruct_0 = env->GetMethodID(sClazz, "<init>", "()V");
            JENNY_CHECK_NULL(sConstruct_0);

            sConstruct_1 = env->GetMethodID(sClazz, "<init>", "(I)V");
            JENNY_CHECK_NULL(sConstruct_1);

            sConstruct_2 = env->GetMethodID(sClazz, "<init>", "(Ljava/util/HashMap;)V");
            JENNY_CHECK_NULL(sConstruct_2);


            sMethod_onJobDone_0 = env->GetMethodID(sClazz, "onJobDone", "(ZLjava/lang/String;)V");
            JENNY_CHECK_NULL(sMethod_onJobDone_0);

            sMethod_onJobProgress_0 = env->GetMethodID(sClazz, "onJobProgress", "(J)V");
            JENNY_CHECK_NULL(sMethod_onJobProgress_0);

            sMethod_onJobStart_0 = env->GetMethodID(sClazz, "onJobStart", "()V");
            JENNY_CHECK_NULL(sMethod_onJobStart_0);

            sMethod_onJobStart_1 = env->GetMethodID(sClazz, "onJobStart", "(Lio/github/landerlyoung/jennysampleapp/Callback$NestedClass;)V");
            JENNY_CHECK_NULL(sMethod_onJobStart_1);

            sMethod_newInstnace_0 = env->GetStaticMethodID(sClazz, "newInstnace", "()V");
            JENNY_CHECK_NULL(sMethod_newInstnace_0);


            sField_lock_0 = env->GetFieldID(sClazz, "lock", "Ljava/lang/Object;");
            JENNY_CHECK_NULL(sField_lock_0);

            sField_COMPILE_NON_CONSTANT_INT_1 = env->GetStaticFieldID(sClazz, "COMPILE_NON_CONSTANT_INT", "J");
            JENNY_CHECK_NULL(sField_COMPILE_NON_CONSTANT_INT_1);

            sField_ANOTHER_COMPILE_CONSTANT_INT_2 = env->GetFieldID(sClazz, "ANOTHER_COMPILE_CONSTANT_INT", "I");
            JENNY_CHECK_NULL(sField_ANOTHER_COMPILE_CONSTANT_INT_2);

            sField_count_3 = env->GetFieldID(sClazz, "count", "I");
            JENNY_CHECK_NULL(sField_count_3);

            sField_staticCount_4 = env->GetStaticFieldID(sClazz, "staticCount", "I");
            JENNY_CHECK_NULL(sField_staticCount_4);

            sField_name_5 = env->GetFieldID(sClazz, "name", "Ljava/lang/String;");
            JENNY_CHECK_NULL(sField_name_5);

            sField_staticName_6 = env->GetStaticFieldID(sClazz, "staticName", "Ljava/lang/String;");
            JENNY_CHECK_NULL(sField_staticName_6);

            sField_aStaticField_7 = env->GetStaticFieldID(sClazz, "aStaticField", "Ljava/util/List;");
            JENNY_CHECK_NULL(sField_aStaticField_7);


            sInited = true;
        }
    }
#undef JENNY_CHECK_NULL
   return true;
}

/*static*/ void CallbackProxy::releaseClazz(JNIEnv *env) {
    if (sInited) {
        std::lock_guard<std::mutex> lg(sInitLock);
        if (sInited) {
            env->DeleteLocalRef(sClazz);
            sInited = false;
        }
    }
}

jmethodID CallbackProxy::sConstruct_0;
jmethodID CallbackProxy::sConstruct_1;
jmethodID CallbackProxy::sConstruct_2;

jmethodID CallbackProxy::sMethod_onJobDone_0;
jmethodID CallbackProxy::sMethod_onJobProgress_0;
jmethodID CallbackProxy::sMethod_onJobStart_0;
jmethodID CallbackProxy::sMethod_onJobStart_1;
jmethodID CallbackProxy::sMethod_newInstnace_0;

jfieldID CallbackProxy::sField_lock_0;
jfieldID CallbackProxy::sField_COMPILE_NON_CONSTANT_INT_1;
jfieldID CallbackProxy::sField_ANOTHER_COMPILE_CONSTANT_INT_2;
jfieldID CallbackProxy::sField_count_3;
jfieldID CallbackProxy::sField_staticCount_4;
jfieldID CallbackProxy::sField_name_5;
jfieldID CallbackProxy::sField_staticName_6;
jfieldID CallbackProxy::sField_aStaticField_7;


