/**
 * File generated by Jenny -- https://github.com/LanderlYoung/Jenny
 *
 * DO NOT EDIT THIS FILE.
 *
 * For bug report, please refer to github issue tracker https://github.com/LanderlYoung/Jenny/issues,
 * or contact author landerlyoung@gmail.com.
 */
#pragma once

#include <jni.h>
#include <assert.h>                        
#include <atomic>
#include <mutex>

class CollectionsProxy {

public:
    static constexpr auto FULL_CLASS_NAME = "java/util/Collections";
    
private:
    // thread safe init
    static std::atomic_bool sInited;
    static std::mutex sInitLock;

    JNIEnv* mJniEnv;
    jobject mJavaObjectReference;

public:

    static bool initClazz(JNIEnv *env);
    
    static void releaseClazz(JNIEnv *env);

    static void assertInited(JNIEnv *env) {
        assert(initClazz(env));
    }

    CollectionsProxy(JNIEnv *env, jobject javaObj)
            : mJniEnv(env), mJavaObjectReference(javaObj) {
        assertInited(env);
    }

    CollectionsProxy(const CollectionsProxy &from) = default;
    CollectionsProxy &operator=(const CollectionsProxy &) = default;

    CollectionsProxy(CollectionsProxy &&from)
           : mJniEnv(from.mJniEnv), mJavaObjectReference(from.mJavaObjectReference) {
        from.mJavaObjectReference = nullptr;
    }

    ~CollectionsProxy() = default;
    
    // helper method to get underlay jobject reference
    jobject operator*() {
       return mJavaObjectReference;
    }
    
    // helper method to delete JNI local ref.
    // use only when you really understand JNIEnv::DeleteLocalRef.
    void releaseLocalRef() {
       mJniEnv->DeleteLocalRef(mJavaObjectReference);
       mJavaObjectReference = nullptr;
    }
    
    // === java methods below ===
    
    // construct:  Collections()
    static CollectionsProxy newInstance(JNIEnv* env) noexcept {
       assertInited(env);
       return CollectionsProxy(env, env->NewObject(sClazz, sConstruct_0));
    } 
    

    // method: public static void sort(java.util.List<T> list)
    static void sort(JNIEnv* env, jobject list) {
        assertInited(env);
        env->CallStaticVoidMethod(sClazz, sMethod_sort_0, list);
    }

    // method: public static void sort(java.util.List<T> list, java.util.Comparator<? super T> c)
    static void sort(JNIEnv* env, jobject list, jobject c) {
        assertInited(env);
        env->CallStaticVoidMethod(sClazz, sMethod_sort_1, list, c);
    }

    // method: public static int binarySearch(java.util.List<? extends java.lang.Comparable<? super T>> list, T key)
    static jint binarySearch(JNIEnv* env, jobject list, jobject key) {
        assertInited(env);
        return env->CallStaticIntMethod(sClazz, sMethod_binarySearch_0, list, key);
    }

    // method: public static int binarySearch(java.util.List<? extends T> list, T key, java.util.Comparator<? super T> c)
    static jint binarySearch(JNIEnv* env, jobject list, jobject key, jobject c) {
        assertInited(env);
        return env->CallStaticIntMethod(sClazz, sMethod_binarySearch_1, list, key, c);
    }

    // method: public static void reverse(java.util.List<?> list)
    static void reverse(JNIEnv* env, jobject list) {
        assertInited(env);
        env->CallStaticVoidMethod(sClazz, sMethod_reverse_0, list);
    }

    // method: public static void shuffle(java.util.List<?> list)
    static void shuffle(JNIEnv* env, jobject list) {
        assertInited(env);
        env->CallStaticVoidMethod(sClazz, sMethod_shuffle_0, list);
    }

    // method: public static void shuffle(java.util.List<?> list, java.util.Random rnd)
    static void shuffle(JNIEnv* env, jobject list, jobject rnd) {
        assertInited(env);
        env->CallStaticVoidMethod(sClazz, sMethod_shuffle_1, list, rnd);
    }

    // method: public static void swap(java.util.List<?> list, int i, int j)
    static void swap(JNIEnv* env, jobject list, jint i, jint j) {
        assertInited(env);
        env->CallStaticVoidMethod(sClazz, sMethod_swap_0, list, i, j);
    }

    // method: public static void fill(java.util.List<? super T> list, T obj)
    static void fill(JNIEnv* env, jobject list, jobject obj) {
        assertInited(env);
        env->CallStaticVoidMethod(sClazz, sMethod_fill_0, list, obj);
    }

    // method: public static void copy(java.util.List<? super T> dest, java.util.List<? extends T> src)
    static void copy(JNIEnv* env, jobject dest, jobject src) {
        assertInited(env);
        env->CallStaticVoidMethod(sClazz, sMethod_copy_0, dest, src);
    }

    // method: public static T min(java.util.Collection<? extends T> coll)
    static jobject min(JNIEnv* env, jobject coll) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_min_0, coll);
    }

    // method: public static T min(java.util.Collection<? extends T> coll, java.util.Comparator<? super T> comp)
    static jobject min(JNIEnv* env, jobject coll, jobject comp) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_min_1, coll, comp);
    }

    // method: public static T max(java.util.Collection<? extends T> coll)
    static jobject max(JNIEnv* env, jobject coll) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_max_0, coll);
    }

    // method: public static T max(java.util.Collection<? extends T> coll, java.util.Comparator<? super T> comp)
    static jobject max(JNIEnv* env, jobject coll, jobject comp) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_max_1, coll, comp);
    }

    // method: public static void rotate(java.util.List<?> list, int distance)
    static void rotate(JNIEnv* env, jobject list, jint distance) {
        assertInited(env);
        env->CallStaticVoidMethod(sClazz, sMethod_rotate_0, list, distance);
    }

    // method: public static boolean replaceAll(java.util.List<T> list, T oldVal, T newVal)
    static jboolean replaceAll(JNIEnv* env, jobject list, jobject oldVal, jobject newVal) {
        assertInited(env);
        return env->CallStaticBooleanMethod(sClazz, sMethod_replaceAll_0, list, oldVal, newVal);
    }

    // method: public static int indexOfSubList(java.util.List<?> source, java.util.List<?> target)
    static jint indexOfSubList(JNIEnv* env, jobject source, jobject target) {
        assertInited(env);
        return env->CallStaticIntMethod(sClazz, sMethod_indexOfSubList_0, source, target);
    }

    // method: public static int lastIndexOfSubList(java.util.List<?> source, java.util.List<?> target)
    static jint lastIndexOfSubList(JNIEnv* env, jobject source, jobject target) {
        assertInited(env);
        return env->CallStaticIntMethod(sClazz, sMethod_lastIndexOfSubList_0, source, target);
    }

    // method: public static java.util.Collection<T> unmodifiableCollection(java.util.Collection<? extends T> c)
    static jobject unmodifiableCollection(JNIEnv* env, jobject c) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_unmodifiableCollection_0, c);
    }

    // method: public static java.util.Set<T> unmodifiableSet(java.util.Set<? extends T> s)
    static jobject unmodifiableSet(JNIEnv* env, jobject s) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_unmodifiableSet_0, s);
    }

    // method: public static java.util.SortedSet<T> unmodifiableSortedSet(java.util.SortedSet<T> s)
    static jobject unmodifiableSortedSet(JNIEnv* env, jobject s) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_unmodifiableSortedSet_0, s);
    }

    // method: public static java.util.NavigableSet<T> unmodifiableNavigableSet(java.util.NavigableSet<T> s)
    static jobject unmodifiableNavigableSet(JNIEnv* env, jobject s) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_unmodifiableNavigableSet_0, s);
    }

    // method: public static java.util.List<T> unmodifiableList(java.util.List<? extends T> list)
    static jobject unmodifiableList(JNIEnv* env, jobject list) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_unmodifiableList_0, list);
    }

    // method: public static java.util.Map<K,V> unmodifiableMap(java.util.Map<? extends K,? extends V> m)
    static jobject unmodifiableMap(JNIEnv* env, jobject m) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_unmodifiableMap_0, m);
    }

    // method: public static java.util.SortedMap<K,V> unmodifiableSortedMap(java.util.SortedMap<K,? extends V> m)
    static jobject unmodifiableSortedMap(JNIEnv* env, jobject m) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_unmodifiableSortedMap_0, m);
    }

    // method: public static java.util.NavigableMap<K,V> unmodifiableNavigableMap(java.util.NavigableMap<K,? extends V> m)
    static jobject unmodifiableNavigableMap(JNIEnv* env, jobject m) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_unmodifiableNavigableMap_0, m);
    }

    // method: public static java.util.Collection<T> synchronizedCollection(java.util.Collection<T> c)
    static jobject synchronizedCollection(JNIEnv* env, jobject c) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_synchronizedCollection_0, c);
    }

    // method: public static java.util.Set<T> synchronizedSet(java.util.Set<T> s)
    static jobject synchronizedSet(JNIEnv* env, jobject s) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_synchronizedSet_0, s);
    }

    // method: public static java.util.SortedSet<T> synchronizedSortedSet(java.util.SortedSet<T> s)
    static jobject synchronizedSortedSet(JNIEnv* env, jobject s) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_synchronizedSortedSet_0, s);
    }

    // method: public static java.util.NavigableSet<T> synchronizedNavigableSet(java.util.NavigableSet<T> s)
    static jobject synchronizedNavigableSet(JNIEnv* env, jobject s) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_synchronizedNavigableSet_0, s);
    }

    // method: public static java.util.List<T> synchronizedList(java.util.List<T> list)
    static jobject synchronizedList(JNIEnv* env, jobject list) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_synchronizedList_0, list);
    }

    // method: public static java.util.Map<K,V> synchronizedMap(java.util.Map<K,V> m)
    static jobject synchronizedMap(JNIEnv* env, jobject m) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_synchronizedMap_0, m);
    }

    // method: public static java.util.SortedMap<K,V> synchronizedSortedMap(java.util.SortedMap<K,V> m)
    static jobject synchronizedSortedMap(JNIEnv* env, jobject m) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_synchronizedSortedMap_0, m);
    }

    // method: public static java.util.NavigableMap<K,V> synchronizedNavigableMap(java.util.NavigableMap<K,V> m)
    static jobject synchronizedNavigableMap(JNIEnv* env, jobject m) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_synchronizedNavigableMap_0, m);
    }

    // method: public static java.util.Collection<E> checkedCollection(java.util.Collection<E> c, java.lang.Class<E> type)
    static jobject checkedCollection(JNIEnv* env, jobject c, jclass type) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_checkedCollection_0, c, type);
    }

    // method: public static java.util.Queue<E> checkedQueue(java.util.Queue<E> queue, java.lang.Class<E> type)
    static jobject checkedQueue(JNIEnv* env, jobject queue, jclass type) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_checkedQueue_0, queue, type);
    }

    // method: public static java.util.Set<E> checkedSet(java.util.Set<E> s, java.lang.Class<E> type)
    static jobject checkedSet(JNIEnv* env, jobject s, jclass type) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_checkedSet_0, s, type);
    }

    // method: public static java.util.SortedSet<E> checkedSortedSet(java.util.SortedSet<E> s, java.lang.Class<E> type)
    static jobject checkedSortedSet(JNIEnv* env, jobject s, jclass type) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_checkedSortedSet_0, s, type);
    }

    // method: public static java.util.NavigableSet<E> checkedNavigableSet(java.util.NavigableSet<E> s, java.lang.Class<E> type)
    static jobject checkedNavigableSet(JNIEnv* env, jobject s, jclass type) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_checkedNavigableSet_0, s, type);
    }

    // method: public static java.util.List<E> checkedList(java.util.List<E> list, java.lang.Class<E> type)
    static jobject checkedList(JNIEnv* env, jobject list, jclass type) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_checkedList_0, list, type);
    }

    // method: public static java.util.Map<K,V> checkedMap(java.util.Map<K,V> m, java.lang.Class<K> keyType, java.lang.Class<V> valueType)
    static jobject checkedMap(JNIEnv* env, jobject m, jclass keyType, jclass valueType) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_checkedMap_0, m, keyType, valueType);
    }

    // method: public static java.util.SortedMap<K,V> checkedSortedMap(java.util.SortedMap<K,V> m, java.lang.Class<K> keyType, java.lang.Class<V> valueType)
    static jobject checkedSortedMap(JNIEnv* env, jobject m, jclass keyType, jclass valueType) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_checkedSortedMap_0, m, keyType, valueType);
    }

    // method: public static java.util.NavigableMap<K,V> checkedNavigableMap(java.util.NavigableMap<K,V> m, java.lang.Class<K> keyType, java.lang.Class<V> valueType)
    static jobject checkedNavigableMap(JNIEnv* env, jobject m, jclass keyType, jclass valueType) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_checkedNavigableMap_0, m, keyType, valueType);
    }

    // method: public static java.util.Iterator<T> emptyIterator()
    static jobject emptyIterator(JNIEnv* env) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_emptyIterator_0);
    }

    // method: public static java.util.ListIterator<T> emptyListIterator()
    static jobject emptyListIterator(JNIEnv* env) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_emptyListIterator_0);
    }

    // method: public static java.util.Enumeration<T> emptyEnumeration()
    static jobject emptyEnumeration(JNIEnv* env) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_emptyEnumeration_0);
    }

    // method: public static final java.util.Set<T> emptySet()
    static jobject emptySet(JNIEnv* env) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_emptySet_0);
    }

    // method: public static java.util.SortedSet<E> emptySortedSet()
    static jobject emptySortedSet(JNIEnv* env) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_emptySortedSet_0);
    }

    // method: public static java.util.NavigableSet<E> emptyNavigableSet()
    static jobject emptyNavigableSet(JNIEnv* env) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_emptyNavigableSet_0);
    }

    // method: public static final java.util.List<T> emptyList()
    static jobject emptyList(JNIEnv* env) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_emptyList_0);
    }

    // method: public static final java.util.Map<K,V> emptyMap()
    static jobject emptyMap(JNIEnv* env) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_emptyMap_0);
    }

    // method: public static final java.util.SortedMap<K,V> emptySortedMap()
    static jobject emptySortedMap(JNIEnv* env) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_emptySortedMap_0);
    }

    // method: public static final java.util.NavigableMap<K,V> emptyNavigableMap()
    static jobject emptyNavigableMap(JNIEnv* env) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_emptyNavigableMap_0);
    }

    // method: public static java.util.Set<T> singleton(T o)
    static jobject singleton(JNIEnv* env, jobject o) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_singleton_0, o);
    }

    // method: public static java.util.List<T> singletonList(T o)
    static jobject singletonList(JNIEnv* env, jobject o) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_singletonList_0, o);
    }

    // method: public static java.util.Map<K,V> singletonMap(K key, V value)
    static jobject singletonMap(JNIEnv* env, jobject key, jobject value) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_singletonMap_0, key, value);
    }

    // method: public static java.util.List<T> nCopies(int n, T o)
    static jobject nCopies(JNIEnv* env, jint n, jobject o) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_nCopies_0, n, o);
    }

    // method: public static java.util.Comparator<T> reverseOrder()
    static jobject reverseOrder(JNIEnv* env) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_reverseOrder_0);
    }

    // method: public static java.util.Comparator<T> reverseOrder(java.util.Comparator<T> cmp)
    static jobject reverseOrder(JNIEnv* env, jobject cmp) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_reverseOrder_1, cmp);
    }

    // method: public static java.util.Enumeration<T> enumeration(java.util.Collection<T> c)
    static jobject enumeration(JNIEnv* env, jobject c) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_enumeration_0, c);
    }

    // method: public static java.util.ArrayList<T> list(java.util.Enumeration<T> e)
    static jobject list(JNIEnv* env, jobject e) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_list_0, e);
    }

    // method: public static int frequency(java.util.Collection<?> c, java.lang.Object o)
    static jint frequency(JNIEnv* env, jobject c, jobject o) {
        assertInited(env);
        return env->CallStaticIntMethod(sClazz, sMethod_frequency_0, c, o);
    }

    // method: public static boolean disjoint(java.util.Collection<?> c1, java.util.Collection<?> c2)
    static jboolean disjoint(JNIEnv* env, jobject c1, jobject c2) {
        assertInited(env);
        return env->CallStaticBooleanMethod(sClazz, sMethod_disjoint_0, c1, c2);
    }

    // method: public static boolean addAll(java.util.Collection<? super T> c, T[] elements)
    static jboolean addAll(JNIEnv* env, jobject c, jobjectArray elements) {
        assertInited(env);
        return env->CallStaticBooleanMethod(sClazz, sMethod_addAll_0, c, elements);
    }

    // method: public static java.util.Set<E> newSetFromMap(java.util.Map<E,java.lang.Boolean> map)
    static jobject newSetFromMap(JNIEnv* env, jobject map) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_newSetFromMap_0, map);
    }

    // method: public static java.util.Queue<T> asLifoQueue(java.util.Deque<T> deque)
    static jobject asLifoQueue(JNIEnv* env, jobject deque) {
        assertInited(env);
        return env->CallStaticObjectMethod(sClazz, sMethod_asLifoQueue_0, deque);
    }


    // field: public static final java.util.List EMPTY_LIST
    jobject getEMPTY_LIST() const {
       return mJniEnv->GetStaticObjectField(sClazz, sField_EMPTY_LIST_0);

   }
    // field: public static final java.util.List EMPTY_LIST
    void setEMPTY_LIST(jobject EMPTY_LIST) const {
        mJniEnv->SetStaticObjectField(sClazz, sField_EMPTY_LIST_0, EMPTY_LIST);
    }

    // field: public static final java.util.Map EMPTY_MAP
    jobject getEMPTY_MAP() const {
       return mJniEnv->GetStaticObjectField(sClazz, sField_EMPTY_MAP_1);

   }
    // field: public static final java.util.Map EMPTY_MAP
    void setEMPTY_MAP(jobject EMPTY_MAP) const {
        mJniEnv->SetStaticObjectField(sClazz, sField_EMPTY_MAP_1, EMPTY_MAP);
    }

    // field: public static final java.util.Set EMPTY_SET
    jobject getEMPTY_SET() const {
       return mJniEnv->GetStaticObjectField(sClazz, sField_EMPTY_SET_2);

   }
    // field: public static final java.util.Set EMPTY_SET
    void setEMPTY_SET(jobject EMPTY_SET) const {
        mJniEnv->SetStaticObjectField(sClazz, sField_EMPTY_SET_2, EMPTY_SET);
    }


private:
    static jclass sClazz;

    static jmethodID sConstruct_0;

    static jmethodID sMethod_sort_0;
    static jmethodID sMethod_sort_1;
    static jmethodID sMethod_binarySearch_0;
    static jmethodID sMethod_binarySearch_1;
    static jmethodID sMethod_reverse_0;
    static jmethodID sMethod_shuffle_0;
    static jmethodID sMethod_shuffle_1;
    static jmethodID sMethod_swap_0;
    static jmethodID sMethod_fill_0;
    static jmethodID sMethod_copy_0;
    static jmethodID sMethod_min_0;
    static jmethodID sMethod_min_1;
    static jmethodID sMethod_max_0;
    static jmethodID sMethod_max_1;
    static jmethodID sMethod_rotate_0;
    static jmethodID sMethod_replaceAll_0;
    static jmethodID sMethod_indexOfSubList_0;
    static jmethodID sMethod_lastIndexOfSubList_0;
    static jmethodID sMethod_unmodifiableCollection_0;
    static jmethodID sMethod_unmodifiableSet_0;
    static jmethodID sMethod_unmodifiableSortedSet_0;
    static jmethodID sMethod_unmodifiableNavigableSet_0;
    static jmethodID sMethod_unmodifiableList_0;
    static jmethodID sMethod_unmodifiableMap_0;
    static jmethodID sMethod_unmodifiableSortedMap_0;
    static jmethodID sMethod_unmodifiableNavigableMap_0;
    static jmethodID sMethod_synchronizedCollection_0;
    static jmethodID sMethod_synchronizedSet_0;
    static jmethodID sMethod_synchronizedSortedSet_0;
    static jmethodID sMethod_synchronizedNavigableSet_0;
    static jmethodID sMethod_synchronizedList_0;
    static jmethodID sMethod_synchronizedMap_0;
    static jmethodID sMethod_synchronizedSortedMap_0;
    static jmethodID sMethod_synchronizedNavigableMap_0;
    static jmethodID sMethod_checkedCollection_0;
    static jmethodID sMethod_checkedQueue_0;
    static jmethodID sMethod_checkedSet_0;
    static jmethodID sMethod_checkedSortedSet_0;
    static jmethodID sMethod_checkedNavigableSet_0;
    static jmethodID sMethod_checkedList_0;
    static jmethodID sMethod_checkedMap_0;
    static jmethodID sMethod_checkedSortedMap_0;
    static jmethodID sMethod_checkedNavigableMap_0;
    static jmethodID sMethod_emptyIterator_0;
    static jmethodID sMethod_emptyListIterator_0;
    static jmethodID sMethod_emptyEnumeration_0;
    static jmethodID sMethod_emptySet_0;
    static jmethodID sMethod_emptySortedSet_0;
    static jmethodID sMethod_emptyNavigableSet_0;
    static jmethodID sMethod_emptyList_0;
    static jmethodID sMethod_emptyMap_0;
    static jmethodID sMethod_emptySortedMap_0;
    static jmethodID sMethod_emptyNavigableMap_0;
    static jmethodID sMethod_singleton_0;
    static jmethodID sMethod_singletonList_0;
    static jmethodID sMethod_singletonMap_0;
    static jmethodID sMethod_nCopies_0;
    static jmethodID sMethod_reverseOrder_0;
    static jmethodID sMethod_reverseOrder_1;
    static jmethodID sMethod_enumeration_0;
    static jmethodID sMethod_list_0;
    static jmethodID sMethod_frequency_0;
    static jmethodID sMethod_disjoint_0;
    static jmethodID sMethod_addAll_0;
    static jmethodID sMethod_newSetFromMap_0;
    static jmethodID sMethod_asLifoQueue_0;

    static jfieldID sField_EMPTY_LIST_0;
    static jfieldID sField_EMPTY_MAP_1;
    static jfieldID sField_EMPTY_SET_2;

};