/**
 * File generated by Jenny -- https://github.com/LanderlYoung/Jenny
 *
 * DO NOT EDIT THIS FILE WITHOUT COPYING TO YOUR SRC DIRECTORY.
 *
 * For bug report, please refer to github issue tracker https://github.com/LanderlYoung/Jenny/issues,
 * or contact author landerlyoung@gmail.com.
 */
#include "FileProxy.h"

jclass FileProxy::sClazz = nullptr;

std::mutex FileProxy::sInitLock;
std::atomic_bool FileProxy::sInited;

/*static*/ bool FileProxy::initClazz(JNIEnv *env) {
#define JENNY_CHECK_NULL(val)                      \
       do {                                        \
           if ((val) == nullptr) {                 \
               return false;                       \
           }                                       \
       } while(false)

    if (!sInited) {
        std::lock_guard<std::mutex> lg(sInitLock);
        if (!sInited) {
            auto clazz = env->FindClass(FULL_CLASS_NAME);
            JENNY_CHECK_NULL(clazz);
            sClazz = reinterpret_cast<jclass>(env->NewGlobalRef(clazz));
            env->DeleteLocalRef(clazz);
            JENNY_CHECK_NULL(sClazz);
            sConstruct_0 = env->GetMethodID(sClazz, "<init>", "(Ljava/lang/String;)V");
            JENNY_CHECK_NULL(sConstruct_0);

            sConstruct_1 = env->GetMethodID(sClazz, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
            JENNY_CHECK_NULL(sConstruct_1);

            sConstruct_2 = env->GetMethodID(sClazz, "<init>", "(Ljava/io/File;Ljava/lang/String;)V");
            JENNY_CHECK_NULL(sConstruct_2);

            sConstruct_3 = env->GetMethodID(sClazz, "<init>", "(Ljava/net/URI;)V");
            JENNY_CHECK_NULL(sConstruct_3);


            sMethod_getName_0 = env->GetMethodID(sClazz, "getName", "()Ljava/lang/String;");
            JENNY_CHECK_NULL(sMethod_getName_0);

            sMethod_renameTo_1 = env->GetMethodID(sClazz, "renameTo", "(Ljava/io/File;)Z");
            JENNY_CHECK_NULL(sMethod_renameTo_1);

            sMethod_listRoots_2 = env->GetStaticMethodID(sClazz, "listRoots", "()[Ljava/io/File;");
            JENNY_CHECK_NULL(sMethod_listRoots_2);

            sMethod_getUsableSpace_3 = env->GetMethodID(sClazz, "getUsableSpace", "()J");
            JENNY_CHECK_NULL(sMethod_getUsableSpace_3);

            sMethod_canRead_4 = env->GetMethodID(sClazz, "canRead", "()Z");
            JENNY_CHECK_NULL(sMethod_canRead_4);

            sMethod_setExecutable_5 = env->GetMethodID(sClazz, "setExecutable", "(ZZ)Z");
            JENNY_CHECK_NULL(sMethod_setExecutable_5);

            sMethod_setExecutable_6 = env->GetMethodID(sClazz, "setExecutable", "(Z)Z");
            JENNY_CHECK_NULL(sMethod_setExecutable_6);

            sMethod_getCanonicalFile_7 = env->GetMethodID(sClazz, "getCanonicalFile", "()Ljava/io/File;");
            JENNY_CHECK_NULL(sMethod_getCanonicalFile_7);

            sMethod_compareTo_8 = env->GetMethodID(sClazz, "compareTo", "(Ljava/io/File;)I");
            JENNY_CHECK_NULL(sMethod_compareTo_8);

            sMethod_delete_9 = env->GetMethodID(sClazz, "delete", "()Z");
            JENNY_CHECK_NULL(sMethod_delete_9);

            sMethod_setReadable_10 = env->GetMethodID(sClazz, "setReadable", "(ZZ)Z");
            JENNY_CHECK_NULL(sMethod_setReadable_10);

            sMethod_setReadable_11 = env->GetMethodID(sClazz, "setReadable", "(Z)Z");
            JENNY_CHECK_NULL(sMethod_setReadable_11);

            sMethod_getTotalSpace_12 = env->GetMethodID(sClazz, "getTotalSpace", "()J");
            JENNY_CHECK_NULL(sMethod_getTotalSpace_12);

            sMethod_hashCode_13 = env->GetMethodID(sClazz, "hashCode", "()I");
            JENNY_CHECK_NULL(sMethod_hashCode_13);

            sMethod_getParentFile_14 = env->GetMethodID(sClazz, "getParentFile", "()Ljava/io/File;");
            JENNY_CHECK_NULL(sMethod_getParentFile_14);

            sMethod_getPath_15 = env->GetMethodID(sClazz, "getPath", "()Ljava/lang/String;");
            JENNY_CHECK_NULL(sMethod_getPath_15);

            sMethod_getAbsoluteFile_16 = env->GetMethodID(sClazz, "getAbsoluteFile", "()Ljava/io/File;");
            JENNY_CHECK_NULL(sMethod_getAbsoluteFile_16);

            sMethod_listFiles_17 = env->GetMethodID(sClazz, "listFiles", "()[Ljava/io/File;");
            JENNY_CHECK_NULL(sMethod_listFiles_17);

            sMethod_listFiles_18 = env->GetMethodID(sClazz, "listFiles", "(Ljava/io/FilenameFilter;)[Ljava/io/File;");
            JENNY_CHECK_NULL(sMethod_listFiles_18);

            sMethod_listFiles_19 = env->GetMethodID(sClazz, "listFiles", "(Ljava/io/FileFilter;)[Ljava/io/File;");
            JENNY_CHECK_NULL(sMethod_listFiles_19);

            sMethod_mkdir_20 = env->GetMethodID(sClazz, "mkdir", "()Z");
            JENNY_CHECK_NULL(sMethod_mkdir_20);

            sMethod_deleteOnExit_21 = env->GetMethodID(sClazz, "deleteOnExit", "()V");
            JENNY_CHECK_NULL(sMethod_deleteOnExit_21);

            sMethod_getParent_22 = env->GetMethodID(sClazz, "getParent", "()Ljava/lang/String;");
            JENNY_CHECK_NULL(sMethod_getParent_22);

            sMethod_getCanonicalPath_23 = env->GetMethodID(sClazz, "getCanonicalPath", "()Ljava/lang/String;");
            JENNY_CHECK_NULL(sMethod_getCanonicalPath_23);

            sMethod_toURL_24 = env->GetMethodID(sClazz, "toURL", "()Ljava/net/URL;");
            JENNY_CHECK_NULL(sMethod_toURL_24);

            sMethod_canExecute_25 = env->GetMethodID(sClazz, "canExecute", "()Z");
            JENNY_CHECK_NULL(sMethod_canExecute_25);

            sMethod_setWritable_26 = env->GetMethodID(sClazz, "setWritable", "(ZZ)Z");
            JENNY_CHECK_NULL(sMethod_setWritable_26);

            sMethod_setWritable_27 = env->GetMethodID(sClazz, "setWritable", "(Z)Z");
            JENNY_CHECK_NULL(sMethod_setWritable_27);

            sMethod_isFile_28 = env->GetMethodID(sClazz, "isFile", "()Z");
            JENNY_CHECK_NULL(sMethod_isFile_28);

            sMethod_getAbsolutePath_29 = env->GetMethodID(sClazz, "getAbsolutePath", "()Ljava/lang/String;");
            JENNY_CHECK_NULL(sMethod_getAbsolutePath_29);

            sMethod_toURI_30 = env->GetMethodID(sClazz, "toURI", "()Ljava/net/URI;");
            JENNY_CHECK_NULL(sMethod_toURI_30);

            sMethod_length_31 = env->GetMethodID(sClazz, "length", "()J");
            JENNY_CHECK_NULL(sMethod_length_31);

            sMethod_getFreeSpace_32 = env->GetMethodID(sClazz, "getFreeSpace", "()J");
            JENNY_CHECK_NULL(sMethod_getFreeSpace_32);

            sMethod_canWrite_33 = env->GetMethodID(sClazz, "canWrite", "()Z");
            JENNY_CHECK_NULL(sMethod_canWrite_33);

            sMethod_createTempFile_34 = env->GetStaticMethodID(sClazz, "createTempFile", "(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;");
            JENNY_CHECK_NULL(sMethod_createTempFile_34);

            sMethod_createTempFile_35 = env->GetStaticMethodID(sClazz, "createTempFile", "(Ljava/lang/String;Ljava/lang/String;)Ljava/io/File;");
            JENNY_CHECK_NULL(sMethod_createTempFile_35);

            sMethod_list_36 = env->GetMethodID(sClazz, "list", "()[Ljava/lang/String;");
            JENNY_CHECK_NULL(sMethod_list_36);

            sMethod_list_37 = env->GetMethodID(sClazz, "list", "(Ljava/io/FilenameFilter;)[Ljava/lang/String;");
            JENNY_CHECK_NULL(sMethod_list_37);

            sMethod_isHidden_38 = env->GetMethodID(sClazz, "isHidden", "()Z");
            JENNY_CHECK_NULL(sMethod_isHidden_38);

            sMethod_toPath_39 = env->GetMethodID(sClazz, "toPath", "()Ljava/nio/file/Path;");
            JENNY_CHECK_NULL(sMethod_toPath_39);

            sMethod_mkdirs_40 = env->GetMethodID(sClazz, "mkdirs", "()Z");
            JENNY_CHECK_NULL(sMethod_mkdirs_40);

            sMethod_equals_41 = env->GetMethodID(sClazz, "equals", "(Ljava/lang/Object;)Z");
            JENNY_CHECK_NULL(sMethod_equals_41);

            sMethod_isAbsolute_42 = env->GetMethodID(sClazz, "isAbsolute", "()Z");
            JENNY_CHECK_NULL(sMethod_isAbsolute_42);

            sMethod_exists_43 = env->GetMethodID(sClazz, "exists", "()Z");
            JENNY_CHECK_NULL(sMethod_exists_43);

            sMethod_toString_44 = env->GetMethodID(sClazz, "toString", "()Ljava/lang/String;");
            JENNY_CHECK_NULL(sMethod_toString_44);

            sMethod_lastModified_45 = env->GetMethodID(sClazz, "lastModified", "()J");
            JENNY_CHECK_NULL(sMethod_lastModified_45);

            sMethod_createNewFile_46 = env->GetMethodID(sClazz, "createNewFile", "()Z");
            JENNY_CHECK_NULL(sMethod_createNewFile_46);

            sMethod_isDirectory_47 = env->GetMethodID(sClazz, "isDirectory", "()Z");
            JENNY_CHECK_NULL(sMethod_isDirectory_47);

            sMethod_setLastModified_48 = env->GetMethodID(sClazz, "setLastModified", "(J)Z");
            JENNY_CHECK_NULL(sMethod_setLastModified_48);

            sMethod_setReadOnly_49 = env->GetMethodID(sClazz, "setReadOnly", "()Z");
            JENNY_CHECK_NULL(sMethod_setReadOnly_49);


            sField_pathSeparatorChar_0 = env->GetStaticFieldID(sClazz, "pathSeparatorChar", "C");
            JENNY_CHECK_NULL(sField_pathSeparatorChar_0);

            sField_separator_1 = env->GetStaticFieldID(sClazz, "separator", "Ljava/lang/String;");
            JENNY_CHECK_NULL(sField_separator_1);

            sField_pathSeparator_2 = env->GetStaticFieldID(sClazz, "pathSeparator", "Ljava/lang/String;");
            JENNY_CHECK_NULL(sField_pathSeparator_2);

            sField_separatorChar_3 = env->GetStaticFieldID(sClazz, "separatorChar", "C");
            JENNY_CHECK_NULL(sField_separatorChar_3);


            sInited = true;
        }
    }
#undef JENNY_CHECK_NULL
   return true;
}

/*static*/ void FileProxy::releaseClazz(JNIEnv *env) {
    if (sInited) {
        std::lock_guard<std::mutex> lg(sInitLock);
        if (sInited) {
            env->DeleteLocalRef(sClazz);
            sInited = false;
        }
    }
}

jmethodID FileProxy::sConstruct_0;
jmethodID FileProxy::sConstruct_1;
jmethodID FileProxy::sConstruct_2;
jmethodID FileProxy::sConstruct_3;

jmethodID FileProxy::sMethod_getName_0;
jmethodID FileProxy::sMethod_renameTo_1;
jmethodID FileProxy::sMethod_listRoots_2;
jmethodID FileProxy::sMethod_getUsableSpace_3;
jmethodID FileProxy::sMethod_canRead_4;
jmethodID FileProxy::sMethod_setExecutable_5;
jmethodID FileProxy::sMethod_setExecutable_6;
jmethodID FileProxy::sMethod_getCanonicalFile_7;
jmethodID FileProxy::sMethod_compareTo_8;
jmethodID FileProxy::sMethod_delete_9;
jmethodID FileProxy::sMethod_setReadable_10;
jmethodID FileProxy::sMethod_setReadable_11;
jmethodID FileProxy::sMethod_getTotalSpace_12;
jmethodID FileProxy::sMethod_hashCode_13;
jmethodID FileProxy::sMethod_getParentFile_14;
jmethodID FileProxy::sMethod_getPath_15;
jmethodID FileProxy::sMethod_getAbsoluteFile_16;
jmethodID FileProxy::sMethod_listFiles_17;
jmethodID FileProxy::sMethod_listFiles_18;
jmethodID FileProxy::sMethod_listFiles_19;
jmethodID FileProxy::sMethod_mkdir_20;
jmethodID FileProxy::sMethod_deleteOnExit_21;
jmethodID FileProxy::sMethod_getParent_22;
jmethodID FileProxy::sMethod_getCanonicalPath_23;
jmethodID FileProxy::sMethod_toURL_24;
jmethodID FileProxy::sMethod_canExecute_25;
jmethodID FileProxy::sMethod_setWritable_26;
jmethodID FileProxy::sMethod_setWritable_27;
jmethodID FileProxy::sMethod_isFile_28;
jmethodID FileProxy::sMethod_getAbsolutePath_29;
jmethodID FileProxy::sMethod_toURI_30;
jmethodID FileProxy::sMethod_length_31;
jmethodID FileProxy::sMethod_getFreeSpace_32;
jmethodID FileProxy::sMethod_canWrite_33;
jmethodID FileProxy::sMethod_createTempFile_34;
jmethodID FileProxy::sMethod_createTempFile_35;
jmethodID FileProxy::sMethod_list_36;
jmethodID FileProxy::sMethod_list_37;
jmethodID FileProxy::sMethod_isHidden_38;
jmethodID FileProxy::sMethod_toPath_39;
jmethodID FileProxy::sMethod_mkdirs_40;
jmethodID FileProxy::sMethod_equals_41;
jmethodID FileProxy::sMethod_isAbsolute_42;
jmethodID FileProxy::sMethod_exists_43;
jmethodID FileProxy::sMethod_toString_44;
jmethodID FileProxy::sMethod_lastModified_45;
jmethodID FileProxy::sMethod_createNewFile_46;
jmethodID FileProxy::sMethod_isDirectory_47;
jmethodID FileProxy::sMethod_setLastModified_48;
jmethodID FileProxy::sMethod_setReadOnly_49;

jfieldID FileProxy::sField_pathSeparatorChar_0;
jfieldID FileProxy::sField_separator_1;
jfieldID FileProxy::sField_pathSeparator_2;
jfieldID FileProxy::sField_separatorChar_3;

