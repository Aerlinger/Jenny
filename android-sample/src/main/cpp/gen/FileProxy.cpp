/**
 * File generated by Jenny -- https://github.com/LanderlYoung/Jenny
 *
 * DO NOT EDIT THIS FILE.
 *
 * For bug report, please refer to github issue tracker https://github.com/LanderlYoung/Jenny/issues,
 * or contact author landerlyoung@gmail.com.
 */
#include "FileProxy.h"

jclass FileProxy::sClazz = nullptr;

// thread safe init
std::mutex FileProxy::sInitLock;
std::atomic_bool FileProxy::sInited;

/*static*/ bool FileProxy::initClazz(JNIEnv *env) {
#define JENNY_CHECK_NULL(val)                      \
       do {                                        \
           if ((val) == nullptr) {                 \
               return false;                       \
           }                                       \
       } while(false)

    if (!sInited) {
        std::lock_guard<std::mutex> lg(sInitLock);
        if (!sInited) {
            auto clazz = env->FindClass(FULL_CLASS_NAME);
            JENNY_CHECK_NULL(clazz);
            sClazz = reinterpret_cast<jclass>(env->NewGlobalRef(clazz));
            env->DeleteLocalRef(clazz);
            JENNY_CHECK_NULL(sClazz);
            sConstruct_0 = env->GetMethodID(sClazz, "<init>", "(Ljava/lang/String;)V");
            JENNY_CHECK_NULL(sConstruct_0);

            sConstruct_1 = env->GetMethodID(sClazz, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
            JENNY_CHECK_NULL(sConstruct_1);

            sConstruct_2 = env->GetMethodID(sClazz, "<init>", "(Ljava/io/File;Ljava/lang/String;)V");
            JENNY_CHECK_NULL(sConstruct_2);

            sConstruct_3 = env->GetMethodID(sClazz, "<init>", "(Ljava/net/URI;)V");
            JENNY_CHECK_NULL(sConstruct_3);


            sMethod_getName_0 = env->GetMethodID(sClazz, "getName", "()Ljava/lang/String;");
            JENNY_CHECK_NULL(sMethod_getName_0);

            sMethod_getParent_0 = env->GetMethodID(sClazz, "getParent", "()Ljava/lang/String;");
            JENNY_CHECK_NULL(sMethod_getParent_0);

            sMethod_getParentFile_0 = env->GetMethodID(sClazz, "getParentFile", "()Ljava/io/File;");
            JENNY_CHECK_NULL(sMethod_getParentFile_0);

            sMethod_getPath_0 = env->GetMethodID(sClazz, "getPath", "()Ljava/lang/String;");
            JENNY_CHECK_NULL(sMethod_getPath_0);

            sMethod_isAbsolute_0 = env->GetMethodID(sClazz, "isAbsolute", "()Z");
            JENNY_CHECK_NULL(sMethod_isAbsolute_0);

            sMethod_getAbsolutePath_0 = env->GetMethodID(sClazz, "getAbsolutePath", "()Ljava/lang/String;");
            JENNY_CHECK_NULL(sMethod_getAbsolutePath_0);

            sMethod_getAbsoluteFile_0 = env->GetMethodID(sClazz, "getAbsoluteFile", "()Ljava/io/File;");
            JENNY_CHECK_NULL(sMethod_getAbsoluteFile_0);

            sMethod_getCanonicalPath_0 = env->GetMethodID(sClazz, "getCanonicalPath", "()Ljava/lang/String;");
            JENNY_CHECK_NULL(sMethod_getCanonicalPath_0);

            sMethod_getCanonicalFile_0 = env->GetMethodID(sClazz, "getCanonicalFile", "()Ljava/io/File;");
            JENNY_CHECK_NULL(sMethod_getCanonicalFile_0);

            sMethod_toURL_0 = env->GetMethodID(sClazz, "toURL", "()Ljava/net/URL;");
            JENNY_CHECK_NULL(sMethod_toURL_0);

            sMethod_toURI_0 = env->GetMethodID(sClazz, "toURI", "()Ljava/net/URI;");
            JENNY_CHECK_NULL(sMethod_toURI_0);

            sMethod_canRead_0 = env->GetMethodID(sClazz, "canRead", "()Z");
            JENNY_CHECK_NULL(sMethod_canRead_0);

            sMethod_canWrite_0 = env->GetMethodID(sClazz, "canWrite", "()Z");
            JENNY_CHECK_NULL(sMethod_canWrite_0);

            sMethod_exists_0 = env->GetMethodID(sClazz, "exists", "()Z");
            JENNY_CHECK_NULL(sMethod_exists_0);

            sMethod_isDirectory_0 = env->GetMethodID(sClazz, "isDirectory", "()Z");
            JENNY_CHECK_NULL(sMethod_isDirectory_0);

            sMethod_isFile_0 = env->GetMethodID(sClazz, "isFile", "()Z");
            JENNY_CHECK_NULL(sMethod_isFile_0);

            sMethod_isHidden_0 = env->GetMethodID(sClazz, "isHidden", "()Z");
            JENNY_CHECK_NULL(sMethod_isHidden_0);

            sMethod_lastModified_0 = env->GetMethodID(sClazz, "lastModified", "()J");
            JENNY_CHECK_NULL(sMethod_lastModified_0);

            sMethod_length_0 = env->GetMethodID(sClazz, "length", "()J");
            JENNY_CHECK_NULL(sMethod_length_0);

            sMethod_createNewFile_0 = env->GetMethodID(sClazz, "createNewFile", "()Z");
            JENNY_CHECK_NULL(sMethod_createNewFile_0);

            sMethod_delete_0 = env->GetMethodID(sClazz, "delete", "()Z");
            JENNY_CHECK_NULL(sMethod_delete_0);

            sMethod_deleteOnExit_0 = env->GetMethodID(sClazz, "deleteOnExit", "()V");
            JENNY_CHECK_NULL(sMethod_deleteOnExit_0);

            sMethod_list_0 = env->GetMethodID(sClazz, "list", "()[Ljava/lang/String;");
            JENNY_CHECK_NULL(sMethod_list_0);

            sMethod_list_1 = env->GetMethodID(sClazz, "list", "(Ljava/io/FilenameFilter;)[Ljava/lang/String;");
            JENNY_CHECK_NULL(sMethod_list_1);

            sMethod_listFiles_0 = env->GetMethodID(sClazz, "listFiles", "()[Ljava/io/File;");
            JENNY_CHECK_NULL(sMethod_listFiles_0);

            sMethod_listFiles_1 = env->GetMethodID(sClazz, "listFiles", "(Ljava/io/FilenameFilter;)[Ljava/io/File;");
            JENNY_CHECK_NULL(sMethod_listFiles_1);

            sMethod_listFiles_2 = env->GetMethodID(sClazz, "listFiles", "(Ljava/io/FileFilter;)[Ljava/io/File;");
            JENNY_CHECK_NULL(sMethod_listFiles_2);

            sMethod_mkdir_0 = env->GetMethodID(sClazz, "mkdir", "()Z");
            JENNY_CHECK_NULL(sMethod_mkdir_0);

            sMethod_mkdirs_0 = env->GetMethodID(sClazz, "mkdirs", "()Z");
            JENNY_CHECK_NULL(sMethod_mkdirs_0);

            sMethod_renameTo_0 = env->GetMethodID(sClazz, "renameTo", "(Ljava/io/File;)Z");
            JENNY_CHECK_NULL(sMethod_renameTo_0);

            sMethod_setLastModified_0 = env->GetMethodID(sClazz, "setLastModified", "(J)Z");
            JENNY_CHECK_NULL(sMethod_setLastModified_0);

            sMethod_setReadOnly_0 = env->GetMethodID(sClazz, "setReadOnly", "()Z");
            JENNY_CHECK_NULL(sMethod_setReadOnly_0);

            sMethod_setWritable_0 = env->GetMethodID(sClazz, "setWritable", "(ZZ)Z");
            JENNY_CHECK_NULL(sMethod_setWritable_0);

            sMethod_setWritable_1 = env->GetMethodID(sClazz, "setWritable", "(Z)Z");
            JENNY_CHECK_NULL(sMethod_setWritable_1);

            sMethod_setReadable_0 = env->GetMethodID(sClazz, "setReadable", "(ZZ)Z");
            JENNY_CHECK_NULL(sMethod_setReadable_0);

            sMethod_setReadable_1 = env->GetMethodID(sClazz, "setReadable", "(Z)Z");
            JENNY_CHECK_NULL(sMethod_setReadable_1);

            sMethod_setExecutable_0 = env->GetMethodID(sClazz, "setExecutable", "(ZZ)Z");
            JENNY_CHECK_NULL(sMethod_setExecutable_0);

            sMethod_setExecutable_1 = env->GetMethodID(sClazz, "setExecutable", "(Z)Z");
            JENNY_CHECK_NULL(sMethod_setExecutable_1);

            sMethod_canExecute_0 = env->GetMethodID(sClazz, "canExecute", "()Z");
            JENNY_CHECK_NULL(sMethod_canExecute_0);

            sMethod_listRoots_0 = env->GetStaticMethodID(sClazz, "listRoots", "()[Ljava/io/File;");
            JENNY_CHECK_NULL(sMethod_listRoots_0);

            sMethod_getTotalSpace_0 = env->GetMethodID(sClazz, "getTotalSpace", "()J");
            JENNY_CHECK_NULL(sMethod_getTotalSpace_0);

            sMethod_getFreeSpace_0 = env->GetMethodID(sClazz, "getFreeSpace", "()J");
            JENNY_CHECK_NULL(sMethod_getFreeSpace_0);

            sMethod_getUsableSpace_0 = env->GetMethodID(sClazz, "getUsableSpace", "()J");
            JENNY_CHECK_NULL(sMethod_getUsableSpace_0);

            sMethod_createTempFile_0 = env->GetStaticMethodID(sClazz, "createTempFile", "(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;");
            JENNY_CHECK_NULL(sMethod_createTempFile_0);

            sMethod_createTempFile_1 = env->GetStaticMethodID(sClazz, "createTempFile", "(Ljava/lang/String;Ljava/lang/String;)Ljava/io/File;");
            JENNY_CHECK_NULL(sMethod_createTempFile_1);

            sMethod_compareTo_0 = env->GetMethodID(sClazz, "compareTo", "(Ljava/io/File;)I");
            JENNY_CHECK_NULL(sMethod_compareTo_0);

            sMethod_equals_0 = env->GetMethodID(sClazz, "equals", "(Ljava/lang/Object;)Z");
            JENNY_CHECK_NULL(sMethod_equals_0);

            sMethod_hashCode_0 = env->GetMethodID(sClazz, "hashCode", "()I");
            JENNY_CHECK_NULL(sMethod_hashCode_0);

            sMethod_toString_0 = env->GetMethodID(sClazz, "toString", "()Ljava/lang/String;");
            JENNY_CHECK_NULL(sMethod_toString_0);

            sMethod_toPath_0 = env->GetMethodID(sClazz, "toPath", "()Ljava/nio/file/Path;");
            JENNY_CHECK_NULL(sMethod_toPath_0);


            sField_pathSeparator_0 = env->GetStaticFieldID(sClazz, "pathSeparator", "Ljava/lang/String;");
            JENNY_CHECK_NULL(sField_pathSeparator_0);

            sField_pathSeparatorChar_1 = env->GetStaticFieldID(sClazz, "pathSeparatorChar", "C");
            JENNY_CHECK_NULL(sField_pathSeparatorChar_1);

            sField_separator_2 = env->GetStaticFieldID(sClazz, "separator", "Ljava/lang/String;");
            JENNY_CHECK_NULL(sField_separator_2);

            sField_separatorChar_3 = env->GetStaticFieldID(sClazz, "separatorChar", "C");
            JENNY_CHECK_NULL(sField_separatorChar_3);


            sInited = true;
        }
    }
#undef JENNY_CHECK_NULL
   return true;
}

/*static*/ void FileProxy::releaseClazz(JNIEnv *env) {
    if (sInited) {
        std::lock_guard<std::mutex> lg(sInitLock);
        if (sInited) {
            env->DeleteLocalRef(sClazz);
            sInited = false;
        }
    }
}

jmethodID FileProxy::sConstruct_0;
jmethodID FileProxy::sConstruct_1;
jmethodID FileProxy::sConstruct_2;
jmethodID FileProxy::sConstruct_3;

jmethodID FileProxy::sMethod_getName_0;
jmethodID FileProxy::sMethod_getParent_0;
jmethodID FileProxy::sMethod_getParentFile_0;
jmethodID FileProxy::sMethod_getPath_0;
jmethodID FileProxy::sMethod_isAbsolute_0;
jmethodID FileProxy::sMethod_getAbsolutePath_0;
jmethodID FileProxy::sMethod_getAbsoluteFile_0;
jmethodID FileProxy::sMethod_getCanonicalPath_0;
jmethodID FileProxy::sMethod_getCanonicalFile_0;
jmethodID FileProxy::sMethod_toURL_0;
jmethodID FileProxy::sMethod_toURI_0;
jmethodID FileProxy::sMethod_canRead_0;
jmethodID FileProxy::sMethod_canWrite_0;
jmethodID FileProxy::sMethod_exists_0;
jmethodID FileProxy::sMethod_isDirectory_0;
jmethodID FileProxy::sMethod_isFile_0;
jmethodID FileProxy::sMethod_isHidden_0;
jmethodID FileProxy::sMethod_lastModified_0;
jmethodID FileProxy::sMethod_length_0;
jmethodID FileProxy::sMethod_createNewFile_0;
jmethodID FileProxy::sMethod_delete_0;
jmethodID FileProxy::sMethod_deleteOnExit_0;
jmethodID FileProxy::sMethod_list_0;
jmethodID FileProxy::sMethod_list_1;
jmethodID FileProxy::sMethod_listFiles_0;
jmethodID FileProxy::sMethod_listFiles_1;
jmethodID FileProxy::sMethod_listFiles_2;
jmethodID FileProxy::sMethod_mkdir_0;
jmethodID FileProxy::sMethod_mkdirs_0;
jmethodID FileProxy::sMethod_renameTo_0;
jmethodID FileProxy::sMethod_setLastModified_0;
jmethodID FileProxy::sMethod_setReadOnly_0;
jmethodID FileProxy::sMethod_setWritable_0;
jmethodID FileProxy::sMethod_setWritable_1;
jmethodID FileProxy::sMethod_setReadable_0;
jmethodID FileProxy::sMethod_setReadable_1;
jmethodID FileProxy::sMethod_setExecutable_0;
jmethodID FileProxy::sMethod_setExecutable_1;
jmethodID FileProxy::sMethod_canExecute_0;
jmethodID FileProxy::sMethod_listRoots_0;
jmethodID FileProxy::sMethod_getTotalSpace_0;
jmethodID FileProxy::sMethod_getFreeSpace_0;
jmethodID FileProxy::sMethod_getUsableSpace_0;
jmethodID FileProxy::sMethod_createTempFile_0;
jmethodID FileProxy::sMethod_createTempFile_1;
jmethodID FileProxy::sMethod_compareTo_0;
jmethodID FileProxy::sMethod_equals_0;
jmethodID FileProxy::sMethod_hashCode_0;
jmethodID FileProxy::sMethod_toString_0;
jmethodID FileProxy::sMethod_toPath_0;

jfieldID FileProxy::sField_pathSeparator_0;
jfieldID FileProxy::sField_pathSeparatorChar_1;
jfieldID FileProxy::sField_separator_2;
jfieldID FileProxy::sField_separatorChar_3;

