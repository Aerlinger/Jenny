/**
 * File generated by Jenny -- https://github.com/LanderlYoung/Jenny
 *
 * DO NOT EDIT THIS FILE WITHOUT COPYING TO YOUR SRC DIRECTORY.
 *
 * For bug report, please refer to github issue tracker https://github.com/LanderlYoung/Jenny/issues,
 * or contact author landerlyoung@gmail.com.
 */
#pragma once

#include <jni.h>
#include <assert.h>                        
#include <atomic>
#include <mutex>

class FileProxy {

public:
    static constexpr auto FULL_CLASS_NAME = "java/io/File";
    
private:
    static jclass sClazz;

    static jmethodID sConstruct_0;
    static jmethodID sConstruct_1;
    static jmethodID sConstruct_2;
    static jmethodID sConstruct_3;

    static jmethodID sMethod_getName_0;
    static jmethodID sMethod_renameTo_1;
    static jmethodID sMethod_listRoots_2;
    static jmethodID sMethod_getUsableSpace_3;
    static jmethodID sMethod_canRead_4;
    static jmethodID sMethod_setExecutable_5;
    static jmethodID sMethod_setExecutable_6;
    static jmethodID sMethod_getCanonicalFile_7;
    static jmethodID sMethod_compareTo_8;
    static jmethodID sMethod_delete_9;
    static jmethodID sMethod_setReadable_10;
    static jmethodID sMethod_setReadable_11;
    static jmethodID sMethod_getTotalSpace_12;
    static jmethodID sMethod_hashCode_13;
    static jmethodID sMethod_getParentFile_14;
    static jmethodID sMethod_getPath_15;
    static jmethodID sMethod_getAbsoluteFile_16;
    static jmethodID sMethod_listFiles_17;
    static jmethodID sMethod_listFiles_18;
    static jmethodID sMethod_listFiles_19;
    static jmethodID sMethod_mkdir_20;
    static jmethodID sMethod_deleteOnExit_21;
    static jmethodID sMethod_getParent_22;
    static jmethodID sMethod_getCanonicalPath_23;
    static jmethodID sMethod_toURL_24;
    static jmethodID sMethod_canExecute_25;
    static jmethodID sMethod_setWritable_26;
    static jmethodID sMethod_setWritable_27;
    static jmethodID sMethod_isFile_28;
    static jmethodID sMethod_getAbsolutePath_29;
    static jmethodID sMethod_toURI_30;
    static jmethodID sMethod_length_31;
    static jmethodID sMethod_getFreeSpace_32;
    static jmethodID sMethod_canWrite_33;
    static jmethodID sMethod_createTempFile_34;
    static jmethodID sMethod_createTempFile_35;
    static jmethodID sMethod_list_36;
    static jmethodID sMethod_list_37;
    static jmethodID sMethod_isHidden_38;
    static jmethodID sMethod_toPath_39;
    static jmethodID sMethod_mkdirs_40;
    static jmethodID sMethod_equals_41;
    static jmethodID sMethod_isAbsolute_42;
    static jmethodID sMethod_exists_43;
    static jmethodID sMethod_toString_44;
    static jmethodID sMethod_lastModified_45;
    static jmethodID sMethod_createNewFile_46;
    static jmethodID sMethod_isDirectory_47;
    static jmethodID sMethod_setLastModified_48;
    static jmethodID sMethod_setReadOnly_49;

    static jfieldID sField_pathSeparatorChar_0;
    static jfieldID sField_separator_1;
    static jfieldID sField_pathSeparator_2;
    static jfieldID sField_separatorChar_3;

private:
    static std::atomic_bool sInited;
    static std::mutex sInitLock;

private:
    JNIEnv* mJniEnv;
    jobject mJavaObjectReference;

public:

    static bool initClazz(JNIEnv *env);
    
    static void releaseClazz(JNIEnv *env);

    static void assertInited(JNIEnv *env) {
        assert(initClazz(env));
    }

    FileProxy(JNIEnv *env, jobject javaObj)
            : mJniEnv(env), mJavaObjectReference(javaObj) {
        assertInited(env);
    }

    FileProxy(const FileProxy &from) = default;
    FileProxy &operator=(const FileProxy &) = default;

    // trivial struct, no move needed
    FileProxy(const FileProxy &&from) = delete;

    ~FileProxy() = default;
    
    // construct File(java.lang.String pathname)
    jobject newInstance(jstring pathname) noexcept {
       assertInited(mJniEnv);
       return mJniEnv->NewObject(sClazz, sConstruct_0, pathname);
    } 
    
    // construct File(java.lang.String parent, java.lang.String child)
    jobject newInstance(jstring parent,jstring child) noexcept {
       assertInited(mJniEnv);
       return mJniEnv->NewObject(sClazz, sConstruct_1, parent, child);
    } 
    
    // construct File(java.io.File parent, java.lang.String child)
    jobject newInstance(jobject parent,jstring child) noexcept {
       assertInited(mJniEnv);
       return mJniEnv->NewObject(sClazz, sConstruct_2, parent, child);
    } 
    
    // construct File(java.net.URI uri)
    jobject newInstance(jobject uri) noexcept {
       assertInited(mJniEnv);
       return mJniEnv->NewObject(sClazz, sConstruct_3, uri);
    } 
    

    // method: java.lang.String getName()
    jstring getName() const {
        return reinterpret_cast<jstring>(mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getName_0));
    }

    // method: boolean renameTo(java.io.File dest)
    jboolean renameTo(jobject dest) const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_renameTo_1, dest);
    }

    // method: java.io.File[] listRoots()
    jobjectArray listRoots() const {
        return reinterpret_cast<jobjectArray>(mJniEnv->CallStaticObjectMethod(sClazz, sMethod_listRoots_2));
    }

    // method: long getUsableSpace()
    jlong getUsableSpace() const {
        return mJniEnv->CallLongMethod(mJavaObjectReference, sMethod_getUsableSpace_3);
    }

    // method: boolean canRead()
    jboolean canRead() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_canRead_4);
    }

    // method: boolean setExecutable(boolean executable, boolean ownerOnly)
    jboolean setExecutable(jboolean executable,jboolean ownerOnly) const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_setExecutable_5, executable, ownerOnly);
    }

    // method: boolean setExecutable(boolean executable)
    jboolean setExecutable(jboolean executable) const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_setExecutable_6, executable);
    }

    // method: java.io.File getCanonicalFile()
    jobject getCanonicalFile() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getCanonicalFile_7);
    }

    // method: int compareTo(java.io.File pathname)
    jint compareTo(jobject pathname) const {
        return mJniEnv->CallIntMethod(mJavaObjectReference, sMethod_compareTo_8, pathname);
    }

    // method: boolean delete()
//    jboolean delete() const {
//        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_delete_9);
//    }

    // method: boolean setReadable(boolean readable, boolean ownerOnly)
    jboolean setReadable(jboolean readable,jboolean ownerOnly) const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_setReadable_10, readable, ownerOnly);
    }

    // method: boolean setReadable(boolean readable)
    jboolean setReadable(jboolean readable) const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_setReadable_11, readable);
    }

    // method: long getTotalSpace()
    jlong getTotalSpace() const {
        return mJniEnv->CallLongMethod(mJavaObjectReference, sMethod_getTotalSpace_12);
    }

    // method: int hashCode()
    jint hashCode() const {
        return mJniEnv->CallIntMethod(mJavaObjectReference, sMethod_hashCode_13);
    }

    // method: java.io.File getParentFile()
    jobject getParentFile() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getParentFile_14);
    }

    // method: java.lang.String getPath()
    jstring getPath() const {
        return reinterpret_cast<jstring>(mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getPath_15));
    }

    // method: java.io.File getAbsoluteFile()
    jobject getAbsoluteFile() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getAbsoluteFile_16);
    }

    // method: java.io.File[] listFiles()
    jobjectArray listFiles() const {
        return reinterpret_cast<jobjectArray>(mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_listFiles_17));
    }

//    // method: java.io.File[] listFiles(java.io.FilenameFilter filter)
//    jobjectArray listFiles(jobject filter) const {
//        return reinterpret_cast<jobjectArray>(mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_listFiles_18, filter));
//    }
//
//    // method: java.io.File[] listFiles(java.io.FileFilter filter)
//    jobjectArray listFiles(jobject filter) const {
//        return reinterpret_cast<jobjectArray>(mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_listFiles_19, filter));
//    }

    // method: boolean mkdir()
    jboolean mkdir() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_mkdir_20);
    }

    // method: void deleteOnExit()
    void deleteOnExit() const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_deleteOnExit_21);
    }

    // method: java.lang.String getParent()
    jstring getParent() const {
        return reinterpret_cast<jstring>(mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getParent_22));
    }

    // method: java.lang.String getCanonicalPath()
    jstring getCanonicalPath() const {
        return reinterpret_cast<jstring>(mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getCanonicalPath_23));
    }

    // method: java.net.URL toURL()
    jobject toURL() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_toURL_24);
    }

    // method: boolean canExecute()
    jboolean canExecute() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_canExecute_25);
    }

    // method: boolean setWritable(boolean writable, boolean ownerOnly)
    jboolean setWritable(jboolean writable,jboolean ownerOnly) const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_setWritable_26, writable, ownerOnly);
    }

    // method: boolean setWritable(boolean writable)
    jboolean setWritable(jboolean writable) const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_setWritable_27, writable);
    }

    // method: boolean isFile()
    jboolean isFile() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_isFile_28);
    }

    // method: java.lang.String getAbsolutePath()
    jstring getAbsolutePath() const {
        return reinterpret_cast<jstring>(mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getAbsolutePath_29));
    }

    // method: java.net.URI toURI()
    jobject toURI() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_toURI_30);
    }

    // method: long length()
    jlong length() const {
        return mJniEnv->CallLongMethod(mJavaObjectReference, sMethod_length_31);
    }

    // method: long getFreeSpace()
    jlong getFreeSpace() const {
        return mJniEnv->CallLongMethod(mJavaObjectReference, sMethod_getFreeSpace_32);
    }

    // method: boolean canWrite()
    jboolean canWrite() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_canWrite_33);
    }

    // method: java.io.File createTempFile(java.lang.String prefix, java.lang.String suffix, java.io.File directory)
    jobject createTempFile(jstring prefix,jstring suffix,jobject directory) const {
        return mJniEnv->CallStaticObjectMethod(sClazz, sMethod_createTempFile_34, prefix, suffix, directory);
    }

    // method: java.io.File createTempFile(java.lang.String prefix, java.lang.String suffix)
    jobject createTempFile(jstring prefix,jstring suffix) const {
        return mJniEnv->CallStaticObjectMethod(sClazz, sMethod_createTempFile_35, prefix, suffix);
    }

    // method: java.lang.String[] list()
    jobjectArray list() const {
        return reinterpret_cast<jobjectArray>(mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_list_36));
    }

    // method: java.lang.String[] list(java.io.FilenameFilter filter)
    jobjectArray list(jobject filter) const {
        return reinterpret_cast<jobjectArray>(mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_list_37, filter));
    }

    // method: boolean isHidden()
    jboolean isHidden() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_isHidden_38);
    }

    // method: java.nio.file.Path toPath()
    jobject toPath() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_toPath_39);
    }

    // method: boolean mkdirs()
    jboolean mkdirs() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_mkdirs_40);
    }

    // method: boolean equals(java.lang.Object obj)
    jboolean equals(jobject obj) const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_equals_41, obj);
    }

    // method: boolean isAbsolute()
    jboolean isAbsolute() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_isAbsolute_42);
    }

    // method: boolean exists()
    jboolean exists() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_exists_43);
    }

    // method: java.lang.String toString()
    jstring toString() const {
        return reinterpret_cast<jstring>(mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_toString_44));
    }

    // method: long lastModified()
    jlong lastModified() const {
        return mJniEnv->CallLongMethod(mJavaObjectReference, sMethod_lastModified_45);
    }

    // method: boolean createNewFile()
    jboolean createNewFile() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_createNewFile_46);
    }

    // method: boolean isDirectory()
    jboolean isDirectory() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_isDirectory_47);
    }

    // method: boolean setLastModified(long time)
    jboolean setLastModified(jlong time) const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_setLastModified_48, time);
    }

    // method: boolean setReadOnly()
    jboolean setReadOnly() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_setReadOnly_49);
    }


    // field: static final char pathSeparatorChar
    jchar getPathSeparatorChar() const {
       return mJniEnv->GetStaticCharField(sClazz, sField_pathSeparatorChar_0);

   }
    // field: static final char pathSeparatorChar
    void setPathSeparatorChar(jchar pathSeparatorChar) const {
        mJniEnv->SetStaticCharField(sClazz, sField_pathSeparatorChar_0, pathSeparatorChar);
    }

    // field: static final java.lang.String separator
    jstring getSeparator() const {
       return reinterpret_cast<jstring>(mJniEnv->GetStaticObjectField(sClazz, sField_separator_1));

   }
    // field: static final java.lang.String separator
    void setSeparator(jstring separator) const {
        mJniEnv->SetStaticObjectField(sClazz, sField_separator_1, separator);
    }

    // field: static final java.lang.String pathSeparator
    jstring getPathSeparator() const {
       return reinterpret_cast<jstring>(mJniEnv->GetStaticObjectField(sClazz, sField_pathSeparator_2));

   }
    // field: static final java.lang.String pathSeparator
    void setPathSeparator(jstring pathSeparator) const {
        mJniEnv->SetStaticObjectField(sClazz, sField_pathSeparator_2, pathSeparator);
    }

    // field: static final char separatorChar
    jchar getSeparatorChar() const {
       return mJniEnv->GetStaticCharField(sClazz, sField_separatorChar_3);

   }
    // field: static final char separatorChar
    void setSeparatorChar(jchar separatorChar) const {
        mJniEnv->SetStaticCharField(sClazz, sField_separatorChar_3, separatorChar);
    }

};