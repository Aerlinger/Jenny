/**
 * File generated by Jenny -- https://github.com/LanderlYoung/Jenny
 *
 * DO NOT EDIT THIS FILE.
 *
 * For bug report, please refer to github issue tracker https://github.com/LanderlYoung/Jenny/issues,
 * or contact author landerlyoung@gmail.com.
 */
#pragma once

#include <jni.h>
#include <assert.h>                        
#include <atomic>
#include <mutex>

class FileProxy {

public:
    static constexpr auto FULL_CLASS_NAME = "java/io/File";
    
private:
    static jclass sClazz;

    static jmethodID sConstruct_0;
    static jmethodID sConstruct_1;
    static jmethodID sConstruct_2;
    static jmethodID sConstruct_3;

    static jmethodID sMethod_getName_0;
    static jmethodID sMethod_getParent_0;
    static jmethodID sMethod_getParentFile_0;
    static jmethodID sMethod_getPath_0;
    static jmethodID sMethod_isAbsolute_0;
    static jmethodID sMethod_getAbsolutePath_0;
    static jmethodID sMethod_getAbsoluteFile_0;
    static jmethodID sMethod_getCanonicalPath_0;
    static jmethodID sMethod_getCanonicalFile_0;
    static jmethodID sMethod_toURL_0;
    static jmethodID sMethod_toURI_0;
    static jmethodID sMethod_canRead_0;
    static jmethodID sMethod_canWrite_0;
    static jmethodID sMethod_exists_0;
    static jmethodID sMethod_isDirectory_0;
    static jmethodID sMethod_isFile_0;
    static jmethodID sMethod_isHidden_0;
    static jmethodID sMethod_lastModified_0;
    static jmethodID sMethod_length_0;
    static jmethodID sMethod_createNewFile_0;
    static jmethodID sMethod_delete_0;
    static jmethodID sMethod_deleteOnExit_0;
    static jmethodID sMethod_list_0;
    static jmethodID sMethod_list_1;
    static jmethodID sMethod_listFiles_0;
    static jmethodID sMethod_listFiles_1;
    static jmethodID sMethod_listFiles_2;
    static jmethodID sMethod_mkdir_0;
    static jmethodID sMethod_mkdirs_0;
    static jmethodID sMethod_renameTo_0;
    static jmethodID sMethod_setLastModified_0;
    static jmethodID sMethod_setReadOnly_0;
    static jmethodID sMethod_setWritable_0;
    static jmethodID sMethod_setWritable_1;
    static jmethodID sMethod_setReadable_0;
    static jmethodID sMethod_setReadable_1;
    static jmethodID sMethod_setExecutable_0;
    static jmethodID sMethod_setExecutable_1;
    static jmethodID sMethod_canExecute_0;
    static jmethodID sMethod_listRoots_0;
    static jmethodID sMethod_getTotalSpace_0;
    static jmethodID sMethod_getFreeSpace_0;
    static jmethodID sMethod_getUsableSpace_0;
    static jmethodID sMethod_createTempFile_0;
    static jmethodID sMethod_createTempFile_1;
    static jmethodID sMethod_compareTo_0;
    static jmethodID sMethod_equals_0;
    static jmethodID sMethod_hashCode_0;
    static jmethodID sMethod_toString_0;
    static jmethodID sMethod_toPath_0;

    static jfieldID sField_pathSeparator_0;
    static jfieldID sField_pathSeparatorChar_1;
    static jfieldID sField_separator_2;
    static jfieldID sField_separatorChar_3;

private:
    static std::atomic_bool sInited;
    static std::mutex sInitLock;

private:
    JNIEnv* mJniEnv;
    jobject mJavaObjectReference;

public:

    static bool initClazz(JNIEnv *env);
    
    static void releaseClazz(JNIEnv *env);

    static void assertInited(JNIEnv *env) {
        assert(initClazz(env));
    }

    FileProxy(JNIEnv *env, jobject javaObj)
            : mJniEnv(env), mJavaObjectReference(javaObj) {
        assertInited(env);
    }

    FileProxy(const FileProxy &from) = default;
    FileProxy &operator=(const FileProxy &) = default;

    // trivial struct, no move needed
    FileProxy(const FileProxy &&from) = delete;

    ~FileProxy() = default;
    
    // construct: public File(java.lang.String pathname)
    static jobject newInstance(JNIEnv* env, jstring pathname) noexcept {
       assertInited(env);
       return env->NewObject(sClazz, sConstruct_0, pathname);
    } 
    
    // construct: public File(java.lang.String parent, java.lang.String child)
    static jobject newInstance(JNIEnv* env, jstring parent, jstring child) noexcept {
       assertInited(env);
       return env->NewObject(sClazz, sConstruct_1, parent, child);
    } 
    
    // construct: public File(java.io.File parent, java.lang.String child)
    static jobject newInstance(JNIEnv* env, jobject parent, jstring child) noexcept {
       assertInited(env);
       return env->NewObject(sClazz, sConstruct_2, parent, child);
    } 
    
    // construct: public File(java.net.URI uri)
    static jobject newInstance(JNIEnv* env, jobject uri) noexcept {
       assertInited(env);
       return env->NewObject(sClazz, sConstruct_3, uri);
    } 
    

    // method: public java.lang.String getName()
    jstring getName() const {
        return reinterpret_cast<jstring>(mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getName_0));
    }

    // method: public java.lang.String getParent()
    jstring getParent() const {
        return reinterpret_cast<jstring>(mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getParent_0));
    }

    // method: public java.io.File getParentFile()
    jobject getParentFile() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getParentFile_0);
    }

    // method: public java.lang.String getPath()
    jstring getPath() const {
        return reinterpret_cast<jstring>(mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getPath_0));
    }

    // method: public boolean isAbsolute()
    jboolean isAbsolute() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_isAbsolute_0);
    }

    // method: public java.lang.String getAbsolutePath()
    jstring getAbsolutePath() const {
        return reinterpret_cast<jstring>(mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getAbsolutePath_0));
    }

    // method: public java.io.File getAbsoluteFile()
    jobject getAbsoluteFile() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getAbsoluteFile_0);
    }

    // method: public java.lang.String getCanonicalPath()
    jstring getCanonicalPath() const {
        return reinterpret_cast<jstring>(mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getCanonicalPath_0));
    }

    // method: public java.io.File getCanonicalFile()
    jobject getCanonicalFile() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_getCanonicalFile_0);
    }

    // method: public java.net.URL toURL()
    jobject toURL() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_toURL_0);
    }

    // method: public java.net.URI toURI()
    jobject toURI() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_toURI_0);
    }

    // method: public boolean canRead()
    jboolean canRead() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_canRead_0);
    }

    // method: public boolean canWrite()
    jboolean canWrite() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_canWrite_0);
    }

    // method: public boolean exists()
    jboolean exists() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_exists_0);
    }

    // method: public boolean isDirectory()
    jboolean isDirectory() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_isDirectory_0);
    }

    // method: public boolean isFile()
    jboolean isFile() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_isFile_0);
    }

    // method: public boolean isHidden()
    jboolean isHidden() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_isHidden_0);
    }

    // method: public long lastModified()
    jlong lastModified() const {
        return mJniEnv->CallLongMethod(mJavaObjectReference, sMethod_lastModified_0);
    }

    // method: public long length()
    jlong length() const {
        return mJniEnv->CallLongMethod(mJavaObjectReference, sMethod_length_0);
    }

    // method: public boolean createNewFile()
    jboolean createNewFile() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_createNewFile_0);
    }

    // method: public boolean delete()
    jboolean delete__() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_delete_0);
    }

    // method: public void deleteOnExit()
    void deleteOnExit() const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_deleteOnExit_0);
    }

    // method: public java.lang.String[] list()
    jobjectArray list() const {
        return reinterpret_cast<jobjectArray>(mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_list_0));
    }

    // method: public java.lang.String[] list(java.io.FilenameFilter filter)
    jobjectArray list(jobject filter) const {
        return reinterpret_cast<jobjectArray>(mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_list_1, filter));
    }

    // method: public java.io.File[] listFiles()
    jobjectArray listFiles() const {
        return reinterpret_cast<jobjectArray>(mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_listFiles_0));
    }

    // method: public java.io.File[] listFiles(java.io.FilenameFilter filter)
    jobjectArray listFiles__Ljava_io_FilenameFilter_2(jobject filter) const {
        return reinterpret_cast<jobjectArray>(mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_listFiles_1, filter));
    }

    // method: public java.io.File[] listFiles(java.io.FileFilter filter)
    jobjectArray listFiles__Ljava_io_FileFilter_2(jobject filter) const {
        return reinterpret_cast<jobjectArray>(mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_listFiles_2, filter));
    }

    // method: public boolean mkdir()
    jboolean mkdir() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_mkdir_0);
    }

    // method: public boolean mkdirs()
    jboolean mkdirs() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_mkdirs_0);
    }

    // method: public boolean renameTo(java.io.File dest)
    jboolean renameTo(jobject dest) const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_renameTo_0, dest);
    }

    // method: public boolean setLastModified(long time)
    jboolean setLastModified(jlong time) const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_setLastModified_0, time);
    }

    // method: public boolean setReadOnly()
    jboolean setReadOnly() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_setReadOnly_0);
    }

    // method: public boolean setWritable(boolean writable, boolean ownerOnly)
    jboolean setWritable(jboolean writable, jboolean ownerOnly) const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_setWritable_0, writable, ownerOnly);
    }

    // method: public boolean setWritable(boolean writable)
    jboolean setWritable(jboolean writable) const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_setWritable_1, writable);
    }

    // method: public boolean setReadable(boolean readable, boolean ownerOnly)
    jboolean setReadable(jboolean readable, jboolean ownerOnly) const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_setReadable_0, readable, ownerOnly);
    }

    // method: public boolean setReadable(boolean readable)
    jboolean setReadable(jboolean readable) const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_setReadable_1, readable);
    }

    // method: public boolean setExecutable(boolean executable, boolean ownerOnly)
    jboolean setExecutable(jboolean executable, jboolean ownerOnly) const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_setExecutable_0, executable, ownerOnly);
    }

    // method: public boolean setExecutable(boolean executable)
    jboolean setExecutable(jboolean executable) const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_setExecutable_1, executable);
    }

    // method: public boolean canExecute()
    jboolean canExecute() const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_canExecute_0);
    }

    // method: public static java.io.File[] listRoots()
    jobjectArray listRoots() const {
        return reinterpret_cast<jobjectArray>(mJniEnv->CallStaticObjectMethod(sClazz, sMethod_listRoots_0));
    }

    // method: public long getTotalSpace()
    jlong getTotalSpace() const {
        return mJniEnv->CallLongMethod(mJavaObjectReference, sMethod_getTotalSpace_0);
    }

    // method: public long getFreeSpace()
    jlong getFreeSpace() const {
        return mJniEnv->CallLongMethod(mJavaObjectReference, sMethod_getFreeSpace_0);
    }

    // method: public long getUsableSpace()
    jlong getUsableSpace() const {
        return mJniEnv->CallLongMethod(mJavaObjectReference, sMethod_getUsableSpace_0);
    }

    // method: public static java.io.File createTempFile(java.lang.String prefix, java.lang.String suffix, java.io.File directory)
    jobject createTempFile(jstring prefix, jstring suffix, jobject directory) const {
        return mJniEnv->CallStaticObjectMethod(sClazz, sMethod_createTempFile_0, prefix, suffix, directory);
    }

    // method: public static java.io.File createTempFile(java.lang.String prefix, java.lang.String suffix)
    jobject createTempFile(jstring prefix, jstring suffix) const {
        return mJniEnv->CallStaticObjectMethod(sClazz, sMethod_createTempFile_1, prefix, suffix);
    }

    // method: public int compareTo(java.io.File pathname)
    jint compareTo(jobject pathname) const {
        return mJniEnv->CallIntMethod(mJavaObjectReference, sMethod_compareTo_0, pathname);
    }

    // method: public boolean equals(java.lang.Object obj)
    jboolean equals(jobject obj) const {
        return mJniEnv->CallBooleanMethod(mJavaObjectReference, sMethod_equals_0, obj);
    }

    // method: public int hashCode()
    jint hashCode() const {
        return mJniEnv->CallIntMethod(mJavaObjectReference, sMethod_hashCode_0);
    }

    // method: public java.lang.String toString()
    jstring toString() const {
        return reinterpret_cast<jstring>(mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_toString_0));
    }

    // method: public java.nio.file.Path toPath()
    jobject toPath() const {
        return mJniEnv->CallObjectMethod(mJavaObjectReference, sMethod_toPath_0);
    }


    // field: public static final java.lang.String pathSeparator
    jstring getPathSeparator() const {
       return reinterpret_cast<jstring>(mJniEnv->GetStaticObjectField(sClazz, sField_pathSeparator_0));

   }
    // field: public static final java.lang.String pathSeparator
    void setPathSeparator(jstring pathSeparator) const {
        mJniEnv->SetStaticObjectField(sClazz, sField_pathSeparator_0, pathSeparator);
    }

    // field: public static final char pathSeparatorChar
    jchar getPathSeparatorChar() const {
       return mJniEnv->GetStaticCharField(sClazz, sField_pathSeparatorChar_1);

   }
    // field: public static final char pathSeparatorChar
    void setPathSeparatorChar(jchar pathSeparatorChar) const {
        mJniEnv->SetStaticCharField(sClazz, sField_pathSeparatorChar_1, pathSeparatorChar);
    }

    // field: public static final java.lang.String separator
    jstring getSeparator() const {
       return reinterpret_cast<jstring>(mJniEnv->GetStaticObjectField(sClazz, sField_separator_2));

   }
    // field: public static final java.lang.String separator
    void setSeparator(jstring separator) const {
        mJniEnv->SetStaticObjectField(sClazz, sField_separator_2, separator);
    }

    // field: public static final char separatorChar
    jchar getSeparatorChar() const {
       return mJniEnv->GetStaticCharField(sClazz, sField_separatorChar_3);

   }
    // field: public static final char separatorChar
    void setSeparatorChar(jchar separatorChar) const {
        mJniEnv->SetStaticCharField(sClazz, sField_separatorChar_3, separatorChar);
    }

};