/**
 * File generated by Jenny -- https://github.com/LanderlYoung/Jenny
 *
 * DO NOT EDIT THIS FILE WITHOUT COPYING TO YOUR SRC DIRECTORY.
 *
 * For bug report, please refer to github issue tracker https://github.com/LanderlYoung/Jenny/issues,
 * or contact author landerlyoung@gmail.com.
 */
#include "InputStreamProxy.h"

jclass InputStreamProxy::sClazz = nullptr;

std::mutex InputStreamProxy::sInitLock;
std::atomic_bool InputStreamProxy::sInited;

/*static*/ bool InputStreamProxy::initClazz(JNIEnv *env) {
#define JENNY_CHECK_NULL(val)                      \
       do {                                        \
           if ((val) == nullptr) {                 \
               return false;                       \
           }                                       \
       } while(false)

    if (!sInited) {
        std::lock_guard<std::mutex> lg(sInitLock);
        if (!sInited) {
            auto clazz = env->FindClass(FULL_CLASS_NAME);
            JENNY_CHECK_NULL(clazz);
            sClazz = reinterpret_cast<jclass>(env->NewGlobalRef(clazz));
            env->DeleteLocalRef(clazz);
            JENNY_CHECK_NULL(sClazz);
            sConstruct_0 = env->GetMethodID(sClazz, "<init>", "()V");
            JENNY_CHECK_NULL(sConstruct_0);


            sMethod_read_0 = env->GetMethodID(sClazz, "read", "()I");
            JENNY_CHECK_NULL(sMethod_read_0);

            sMethod_read_1 = env->GetMethodID(sClazz, "read", "([B)I");
            JENNY_CHECK_NULL(sMethod_read_1);

            sMethod_read_2 = env->GetMethodID(sClazz, "read", "([BII)I");
            JENNY_CHECK_NULL(sMethod_read_2);

            sMethod_markSupported_3 = env->GetMethodID(sClazz, "markSupported", "()Z");
            JENNY_CHECK_NULL(sMethod_markSupported_3);

            sMethod_available_4 = env->GetMethodID(sClazz, "available", "()I");
            JENNY_CHECK_NULL(sMethod_available_4);

            sMethod_skip_5 = env->GetMethodID(sClazz, "skip", "(J)J");
            JENNY_CHECK_NULL(sMethod_skip_5);

            sMethod_reset_6 = env->GetMethodID(sClazz, "reset", "()V");
            JENNY_CHECK_NULL(sMethod_reset_6);

            sMethod_close_7 = env->GetMethodID(sClazz, "close", "()V");
            JENNY_CHECK_NULL(sMethod_close_7);

            sMethod_mark_8 = env->GetMethodID(sClazz, "mark", "(I)V");
            JENNY_CHECK_NULL(sMethod_mark_8);



            sInited = true;
        }
    }
#undef JENNY_CHECK_NULL
   return true;
}

/*static*/ void InputStreamProxy::releaseClazz(JNIEnv *env) {
    if (sInited) {
        std::lock_guard<std::mutex> lg(sInitLock);
        if (sInited) {
            env->DeleteLocalRef(sClazz);
            sInited = false;
        }
    }
}

jmethodID InputStreamProxy::sConstruct_0;

jmethodID InputStreamProxy::sMethod_read_0;
jmethodID InputStreamProxy::sMethod_read_1;
jmethodID InputStreamProxy::sMethod_read_2;
jmethodID InputStreamProxy::sMethod_markSupported_3;
jmethodID InputStreamProxy::sMethod_available_4;
jmethodID InputStreamProxy::sMethod_skip_5;
jmethodID InputStreamProxy::sMethod_reset_6;
jmethodID InputStreamProxy::sMethod_close_7;
jmethodID InputStreamProxy::sMethod_mark_8;


