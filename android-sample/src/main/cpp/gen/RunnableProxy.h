/**
 * File generated by Jenny -- https://github.com/LanderlYoung/Jenny
 *
 * DO NOT EDIT THIS FILE.
 *
 * For bug report, please refer to github issue tracker https://github.com/LanderlYoung/Jenny/issues,
 * or contact author landerlyoung@gmail.com.
 */
#pragma once

#include <jni.h>
#include <assert.h>                        
#include <atomic>
#include <mutex>

class RunnableProxy {

public:
    static constexpr auto FULL_CLASS_NAME = "java/lang/Runnable";
    
private:
    // thread safe init
    static std::atomic_bool sInited;
    static std::mutex sInitLock;

    JNIEnv* mJniEnv;
    jobject mJavaObjectReference;

public:

    static bool initClazz(JNIEnv *env);
    
    static void releaseClazz(JNIEnv *env);

    static void assertInited(JNIEnv *env) {
        assert(initClazz(env));
    }

    RunnableProxy(JNIEnv *env, jobject javaObj)
            : mJniEnv(env), mJavaObjectReference(javaObj) {
        assertInited(env);
    }

    RunnableProxy(const RunnableProxy &from) = default;
    RunnableProxy &operator=(const RunnableProxy &) = default;

    RunnableProxy(RunnableProxy &&from)
           : mJniEnv(from.mJniEnv), mJavaObjectReference(from.mJavaObjectReference) {
        from.mJavaObjectReference = nullptr;
    }

    ~RunnableProxy() = default;
    
    // helper method to get underlay jobject reference
    jobject operator*() {
       return mJavaObjectReference;
    }
    
    // helper method to delete JNI local ref.
    // use only when you really understand JNIEnv::DeleteLocalRef.
    void releaseLocalRef() {
       mJniEnv->DeleteLocalRef(mJavaObjectReference);
       mJavaObjectReference = nullptr;
    }
    
    // === java methods below ===
    

    // method: public abstract void run()
    void run() const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_run_0);
    }



private:
    static jclass sClazz;


    static jmethodID sMethod_run_0;


};