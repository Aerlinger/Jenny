/**
 * File generated by Jenny -- https://github.com/LanderlYoung/Jenny
 *
 * DO NOT EDIT THIS FILE WITHOUT COPYING TO YOUR SRC DIRECTORY.
 *
 * For bug report, please refer to github issue tracker https://github.com/LanderlYoung/Jenny/issues,
 * or contact author landerlyoung@gmail.com.
 */
#pragma once

#include <jni.h>
#include <assert.h>                        
#include <atomic>
#include <mutex>

class RunnableProxy {

public:
    static constexpr auto FULL_CLASS_NAME = "java/lang/Runnable";
    
private:
    static jclass sClazz;


    static jmethodID sMethod_run_0;


private:
    static std::atomic_bool sInited;
    static std::mutex sInitLock;

private:
    JNIEnv* mJniEnv;
    jobject mJavaObjectReference;

public:

    static bool initClazz(JNIEnv *env);
    
    static void releaseClazz(JNIEnv *env);

    static void assertInited(JNIEnv *env) {
        assert(initClazz(env));
    }

    RunnableProxy(JNIEnv *env, jobject javaObj)
            : mJniEnv(env), mJavaObjectReference(javaObj) {
        assertInited(env);
    }

    RunnableProxy(const RunnableProxy &from) = default;
    RunnableProxy &operator=(const RunnableProxy &) = default;

    // trivial struct, no move needed
    RunnableProxy(const RunnableProxy &&from) = delete;

    ~RunnableProxy() = default;
    

    // method: void run()
    void run() const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_run_0);
    }


};