/**
 * File generated by Jenny -- https://github.com/LanderlYoung/Jenny
 *
 * DO NOT EDIT THIS FILE WITHOUT COPYING TO YOUR SRC DIRECTORY.
 *
 * For bug report, please refer to github issue tracker https://github.com/LanderlYoung/Jenny/issues,
 * or contact author landerlyoung@gmail.com.
 */
#pragma once

#include <jni.h>
#include <assert.h>
#include <atomic>
#include <mutex>

#ifdef __EXCEPTIONS
#include <stdexcept>
#endif

class NestedClassProxy {
public:
    static constexpr auto FULL_CLASS_NAME = "io/github/landerlyoung/jennysampleapp/Callback$NestedClass";

private:
    static std::atomic_bool sInited;
    static std::mutex sInitLock;

    static jmethodID sConstruct_0;

    static jmethodID sMethod_hello_0;


private:
    JNIEnv *mJniEnv;
    jobject mJavaObjectReference;

public:
    static bool initClazz(JNIEnv *env) {
#define JENNY_CHECK_NULL(val)                       \
        do {                                        \
            if ((val) == nullptr) {                 \
                env->DeleteLocalRef(clazz);         \
                return false;                       \
            }                                       \
        } while(false)

        if (!sInited) {
            std::lock_guard<std::mutex> lg(sInitLock);
            if (!sInited) {
                auto clazz = env->FindClass(FULL_CLASS_NAME);
                JENNY_CHECK_NULL(clazz);

                sConstruct_0 = env->GetMethodID(clazz, "<init>",
                                                "(Lio/github/landerlyoung/jennysampleapp/Callback;)V");
                JENNY_CHECK_NULL(sConstruct_0);

                sMethod_hello_0 = env->GetMethodID(clazz, "hello", "()V");
                JENNY_CHECK_NULL(sMethod_hello_0);
            }
        }
#undef JENNY_CHECK_NULL
        return true;
    }

    static void releaseClazz(JNIEnv *env) {
        sInited = false;
    }

    static void assertInited(JNIEnv *env) {
        assert(initClazz(env));
    }

    NestedClassProxy(JNIEnv *env, jobject javaObj)
            : mJniEnv(env), mJavaObjectReference(javaObj) {
        assertInited(env);
    }

    NestedClassProxy(const NestedClassProxy &from) = default;
    NestedClassProxy &operator=(const NestedClassProxy &) = default;

    // trivial struct, no move needed
    NestedClassProxy(const NestedClassProxy &&from) = delete;

    ~NestedClassProxy() = default;

    // constructor
    static jobject newInstance(JNIEnv *env, jobject enclosingClass) noexcept {
        assertInited(env);
        auto clazz = env->FindClass(FULL_CLASS_NAME);
        auto ret = env->NewObject(clazz, sConstruct_0, enclosingClass);
        env->DeleteLocalRef(clazz);
        return ret;
    }

    void hello(jobject enclosingClass) const {
        mJniEnv->CallVoidMethod(mJavaObjectReference, sMethod_hello_0, enclosingClass);
    }


};
